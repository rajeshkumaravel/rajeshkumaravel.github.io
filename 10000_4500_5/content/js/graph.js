/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 544278.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 4.0], [3.9, 7.0], [4.0, 7.0], [4.1, 8.0], [4.2, 8.0], [4.3, 8.0], [4.4, 8.0], [4.5, 8.0], [4.6, 8.0], [4.7, 8.0], [4.8, 9.0], [4.9, 9.0], [5.0, 9.0], [5.1, 9.0], [5.2, 9.0], [5.3, 9.0], [5.4, 9.0], [5.5, 9.0], [5.6, 9.0], [5.7, 10.0], [5.8, 10.0], [5.9, 10.0], [6.0, 10.0], [6.1, 10.0], [6.2, 10.0], [6.3, 10.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 11.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 11.0], [7.3, 11.0], [7.4, 11.0], [7.5, 12.0], [7.6, 12.0], [7.7, 12.0], [7.8, 12.0], [7.9, 12.0], [8.0, 12.0], [8.1, 12.0], [8.2, 12.0], [8.3, 13.0], [8.4, 13.0], [8.5, 13.0], [8.6, 13.0], [8.7, 13.0], [8.8, 13.0], [8.9, 13.0], [9.0, 13.0], [9.1, 14.0], [9.2, 14.0], [9.3, 14.0], [9.4, 14.0], [9.5, 14.0], [9.6, 14.0], [9.7, 14.0], [9.8, 14.0], [9.9, 14.0], [10.0, 14.0], [10.1, 15.0], [10.2, 15.0], [10.3, 15.0], [10.4, 15.0], [10.5, 15.0], [10.6, 15.0], [10.7, 15.0], [10.8, 15.0], [10.9, 15.0], [11.0, 15.0], [11.1, 15.0], [11.2, 15.0], [11.3, 15.0], [11.4, 15.0], [11.5, 16.0], [11.6, 16.0], [11.7, 16.0], [11.8, 16.0], [11.9, 16.0], [12.0, 16.0], [12.1, 16.0], [12.2, 16.0], [12.3, 16.0], [12.4, 16.0], [12.5, 16.0], [12.6, 16.0], [12.7, 16.0], [12.8, 16.0], [12.9, 16.0], [13.0, 16.0], [13.1, 16.0], [13.2, 16.0], [13.3, 16.0], [13.4, 16.0], [13.5, 17.0], [13.6, 17.0], [13.7, 17.0], [13.8, 17.0], [13.9, 17.0], [14.0, 17.0], [14.1, 17.0], [14.2, 17.0], [14.3, 17.0], [14.4, 17.0], [14.5, 17.0], [14.6, 17.0], [14.7, 17.0], [14.8, 17.0], [14.9, 17.0], [15.0, 17.0], [15.1, 17.0], [15.2, 17.0], [15.3, 17.0], [15.4, 18.0], [15.5, 18.0], [15.6, 18.0], [15.7, 18.0], [15.8, 18.0], [15.9, 18.0], [16.0, 18.0], [16.1, 18.0], [16.2, 18.0], [16.3, 18.0], [16.4, 18.0], [16.5, 18.0], [16.6, 18.0], [16.7, 18.0], [16.8, 18.0], [16.9, 18.0], [17.0, 18.0], [17.1, 18.0], [17.2, 19.0], [17.3, 19.0], [17.4, 19.0], [17.5, 19.0], [17.6, 19.0], [17.7, 19.0], [17.8, 19.0], [17.9, 19.0], [18.0, 19.0], [18.1, 19.0], [18.2, 19.0], [18.3, 19.0], [18.4, 19.0], [18.5, 19.0], [18.6, 19.0], [18.7, 19.0], [18.8, 19.0], [18.9, 20.0], [19.0, 20.0], [19.1, 20.0], [19.2, 20.0], [19.3, 20.0], [19.4, 20.0], [19.5, 20.0], [19.6, 20.0], [19.7, 20.0], [19.8, 20.0], [19.9, 20.0], [20.0, 20.0], [20.1, 20.0], [20.2, 20.0], [20.3, 20.0], [20.4, 20.0], [20.5, 20.0], [20.6, 20.0], [20.7, 21.0], [20.8, 21.0], [20.9, 21.0], [21.0, 21.0], [21.1, 21.0], [21.2, 21.0], [21.3, 21.0], [21.4, 21.0], [21.5, 21.0], [21.6, 21.0], [21.7, 21.0], [21.8, 21.0], [21.9, 21.0], [22.0, 21.0], [22.1, 21.0], [22.2, 21.0], [22.3, 21.0], [22.4, 22.0], [22.5, 22.0], [22.6, 22.0], [22.7, 22.0], [22.8, 22.0], [22.9, 22.0], [23.0, 22.0], [23.1, 22.0], [23.2, 22.0], [23.3, 22.0], [23.4, 22.0], [23.5, 22.0], [23.6, 22.0], [23.7, 22.0], [23.8, 22.0], [23.9, 22.0], [24.0, 22.0], [24.1, 23.0], [24.2, 23.0], [24.3, 23.0], [24.4, 23.0], [24.5, 23.0], [24.6, 23.0], [24.7, 23.0], [24.8, 23.0], [24.9, 23.0], [25.0, 23.0], [25.1, 23.0], [25.2, 23.0], [25.3, 23.0], [25.4, 23.0], [25.5, 23.0], [25.6, 23.0], [25.7, 23.0], [25.8, 24.0], [25.9, 24.0], [26.0, 24.0], [26.1, 24.0], [26.2, 24.0], [26.3, 24.0], [26.4, 24.0], [26.5, 24.0], [26.6, 24.0], [26.7, 24.0], [26.8, 24.0], [26.9, 24.0], [27.0, 24.0], [27.1, 24.0], [27.2, 24.0], [27.3, 25.0], [27.4, 25.0], [27.5, 25.0], [27.6, 25.0], [27.7, 25.0], [27.8, 25.0], [27.9, 25.0], [28.0, 25.0], [28.1, 25.0], [28.2, 25.0], [28.3, 25.0], [28.4, 25.0], [28.5, 25.0], [28.6, 25.0], [28.7, 25.0], [28.8, 25.0], [28.9, 25.0], [29.0, 26.0], [29.1, 26.0], [29.2, 26.0], [29.3, 26.0], [29.4, 26.0], [29.5, 26.0], [29.6, 26.0], [29.7, 26.0], [29.8, 26.0], [29.9, 26.0], [30.0, 26.0], [30.1, 26.0], [30.2, 26.0], [30.3, 26.0], [30.4, 26.0], [30.5, 26.0], [30.6, 26.0], [30.7, 26.0], [30.8, 27.0], [30.9, 27.0], [31.0, 27.0], [31.1, 27.0], [31.2, 27.0], [31.3, 27.0], [31.4, 27.0], [31.5, 27.0], [31.6, 27.0], [31.7, 27.0], [31.8, 27.0], [31.9, 27.0], [32.0, 27.0], [32.1, 27.0], [32.2, 27.0], [32.3, 27.0], [32.4, 27.0], [32.5, 27.0], [32.6, 27.0], [32.7, 28.0], [32.8, 28.0], [32.9, 28.0], [33.0, 28.0], [33.1, 28.0], [33.2, 28.0], [33.3, 28.0], [33.4, 28.0], [33.5, 28.0], [33.6, 28.0], [33.7, 28.0], [33.8, 28.0], [33.9, 28.0], [34.0, 28.0], [34.1, 28.0], [34.2, 28.0], [34.3, 28.0], [34.4, 29.0], [34.5, 29.0], [34.6, 29.0], [34.7, 29.0], [34.8, 29.0], [34.9, 29.0], [35.0, 29.0], [35.1, 29.0], [35.2, 29.0], [35.3, 29.0], [35.4, 29.0], [35.5, 29.0], [35.6, 29.0], [35.7, 29.0], [35.8, 29.0], [35.9, 29.0], [36.0, 30.0], [36.1, 30.0], [36.2, 30.0], [36.3, 30.0], [36.4, 30.0], [36.5, 30.0], [36.6, 30.0], [36.7, 30.0], [36.8, 30.0], [36.9, 30.0], [37.0, 30.0], [37.1, 30.0], [37.2, 30.0], [37.3, 30.0], [37.4, 31.0], [37.5, 31.0], [37.6, 31.0], [37.7, 31.0], [37.8, 31.0], [37.9, 31.0], [38.0, 31.0], [38.1, 31.0], [38.2, 31.0], [38.3, 31.0], [38.4, 31.0], [38.5, 31.0], [38.6, 31.0], [38.7, 32.0], [38.8, 32.0], [38.9, 32.0], [39.0, 32.0], [39.1, 32.0], [39.2, 32.0], [39.3, 32.0], [39.4, 32.0], [39.5, 32.0], [39.6, 32.0], [39.7, 32.0], [39.8, 33.0], [39.9, 33.0], [40.0, 33.0], [40.1, 33.0], [40.2, 33.0], [40.3, 33.0], [40.4, 33.0], [40.5, 33.0], [40.6, 33.0], [40.7, 33.0], [40.8, 34.0], [40.9, 34.0], [41.0, 34.0], [41.1, 34.0], [41.2, 34.0], [41.3, 34.0], [41.4, 34.0], [41.5, 34.0], [41.6, 34.0], [41.7, 34.0], [41.8, 34.0], [41.9, 35.0], [42.0, 35.0], [42.1, 35.0], [42.2, 35.0], [42.3, 35.0], [42.4, 35.0], [42.5, 35.0], [42.6, 35.0], [42.7, 35.0], [42.8, 35.0], [42.9, 36.0], [43.0, 36.0], [43.1, 36.0], [43.2, 36.0], [43.3, 36.0], [43.4, 36.0], [43.5, 36.0], [43.6, 36.0], [43.7, 37.0], [43.8, 37.0], [43.9, 37.0], [44.0, 37.0], [44.1, 37.0], [44.2, 37.0], [44.3, 37.0], [44.4, 37.0], [44.5, 37.0], [44.6, 38.0], [44.7, 38.0], [44.8, 38.0], [44.9, 38.0], [45.0, 38.0], [45.1, 38.0], [45.2, 38.0], [45.3, 38.0], [45.4, 38.0], [45.5, 39.0], [45.6, 39.0], [45.7, 39.0], [45.8, 39.0], [45.9, 39.0], [46.0, 39.0], [46.1, 39.0], [46.2, 40.0], [46.3, 40.0], [46.4, 40.0], [46.5, 40.0], [46.6, 40.0], [46.7, 40.0], [46.8, 40.0], [46.9, 40.0], [47.0, 41.0], [47.1, 41.0], [47.2, 41.0], [47.3, 41.0], [47.4, 41.0], [47.5, 41.0], [47.6, 41.0], [47.7, 41.0], [47.8, 42.0], [47.9, 42.0], [48.0, 42.0], [48.1, 42.0], [48.2, 42.0], [48.3, 42.0], [48.4, 42.0], [48.5, 43.0], [48.6, 43.0], [48.7, 43.0], [48.8, 43.0], [48.9, 43.0], [49.0, 43.0], [49.1, 43.0], [49.2, 44.0], [49.3, 44.0], [49.4, 44.0], [49.5, 44.0], [49.6, 44.0], [49.7, 45.0], [49.8, 45.0], [49.9, 45.0], [50.0, 45.0], [50.1, 45.0], [50.2, 45.0], [50.3, 46.0], [50.4, 46.0], [50.5, 46.0], [50.6, 46.0], [50.7, 46.0], [50.8, 47.0], [50.9, 47.0], [51.0, 47.0], [51.1, 47.0], [51.2, 47.0], [51.3, 48.0], [51.4, 48.0], [51.5, 48.0], [51.6, 48.0], [51.7, 48.0], [51.8, 49.0], [51.9, 49.0], [52.0, 49.0], [52.1, 49.0], [52.2, 49.0], [52.3, 50.0], [52.4, 50.0], [52.5, 50.0], [52.6, 50.0], [52.7, 50.0], [52.8, 50.0], [52.9, 51.0], [53.0, 51.0], [53.1, 51.0], [53.2, 51.0], [53.3, 52.0], [53.4, 52.0], [53.5, 52.0], [53.6, 52.0], [53.7, 53.0], [53.8, 53.0], [53.9, 53.0], [54.0, 54.0], [54.1, 54.0], [54.2, 54.0], [54.3, 55.0], [54.4, 55.0], [54.5, 55.0], [54.6, 56.0], [54.7, 56.0], [54.8, 57.0], [54.9, 57.0], [55.0, 58.0], [55.1, 58.0], [55.2, 59.0], [55.3, 59.0], [55.4, 60.0], [55.5, 61.0], [55.6, 61.0], [55.7, 62.0], [55.8, 62.0], [55.9, 63.0], [56.0, 64.0], [56.1, 65.0], [56.2, 66.0], [56.3, 67.0], [56.4, 68.0], [56.5, 69.0], [56.6, 70.0], [56.7, 71.0], [56.8, 73.0], [56.9, 74.0], [57.0, 76.0], [57.1, 78.0], [57.2, 80.0], [57.3, 82.0], [57.4, 85.0], [57.5, 88.0], [57.6, 91.0], [57.7, 96.0], [57.8, 101.0], [57.9, 106.0], [58.0, 111.0], [58.1, 120.0], [58.2, 135.0], [58.3, 162.0], [58.4, 231.0], [58.5, 339.0], [58.6, 447.0], [58.7, 488.0], [58.8, 529.0], [58.9, 568.0], [59.0, 729.0], [59.1, 853.0], [59.2, 1093.0], [59.3, 1519.0], [59.4, 1961.0], [59.5, 2274.0], [59.6, 2745.0], [59.7, 3125.0], [59.8, 3721.0], [59.9, 3827.0], [60.0, 4000.0], [60.1, 4001.0], [60.2, 4001.0], [60.3, 4001.0], [60.4, 4001.0], [60.5, 4001.0], [60.6, 4002.0], [60.7, 4002.0], [60.8, 4002.0], [60.9, 4002.0], [61.0, 4002.0], [61.1, 4002.0], [61.2, 4002.0], [61.3, 4002.0], [61.4, 4002.0], [61.5, 4002.0], [61.6, 4002.0], [61.7, 4002.0], [61.8, 4002.0], [61.9, 4002.0], [62.0, 4003.0], [62.1, 4003.0], [62.2, 4003.0], [62.3, 4003.0], [62.4, 4003.0], [62.5, 4003.0], [62.6, 4003.0], [62.7, 4003.0], [62.8, 4003.0], [62.9, 4003.0], [63.0, 4003.0], [63.1, 4003.0], [63.2, 4003.0], [63.3, 4003.0], [63.4, 4003.0], [63.5, 4003.0], [63.6, 4003.0], [63.7, 4003.0], [63.8, 4003.0], [63.9, 4003.0], [64.0, 4003.0], [64.1, 4003.0], [64.2, 4003.0], [64.3, 4003.0], [64.4, 4003.0], [64.5, 4003.0], [64.6, 4003.0], [64.7, 4003.0], [64.8, 4003.0], [64.9, 4003.0], [65.0, 4003.0], [65.1, 4003.0], [65.2, 4003.0], [65.3, 4003.0], [65.4, 4003.0], [65.5, 4004.0], [65.6, 4004.0], [65.7, 4004.0], [65.8, 4004.0], [65.9, 4004.0], [66.0, 4004.0], [66.1, 4004.0], [66.2, 4004.0], [66.3, 4004.0], [66.4, 4004.0], [66.5, 4004.0], [66.6, 4004.0], [66.7, 4004.0], [66.8, 4004.0], [66.9, 4004.0], [67.0, 4004.0], [67.1, 4004.0], [67.2, 4004.0], [67.3, 4004.0], [67.4, 4004.0], [67.5, 4004.0], [67.6, 4004.0], [67.7, 4004.0], [67.8, 4004.0], [67.9, 4004.0], [68.0, 4004.0], [68.1, 4004.0], [68.2, 4004.0], [68.3, 4004.0], [68.4, 4004.0], [68.5, 4004.0], [68.6, 4004.0], [68.7, 4004.0], [68.8, 4004.0], [68.9, 4004.0], [69.0, 4004.0], [69.1, 4004.0], [69.2, 4004.0], [69.3, 4004.0], [69.4, 4004.0], [69.5, 4004.0], [69.6, 4004.0], [69.7, 4004.0], [69.8, 4004.0], [69.9, 4004.0], [70.0, 4004.0], [70.1, 4004.0], [70.2, 4004.0], [70.3, 4004.0], [70.4, 4004.0], [70.5, 4004.0], [70.6, 4004.0], [70.7, 4005.0], [70.8, 4005.0], [70.9, 4005.0], [71.0, 4005.0], [71.1, 4005.0], [71.2, 4005.0], [71.3, 4005.0], [71.4, 4005.0], [71.5, 4005.0], [71.6, 4005.0], [71.7, 4005.0], [71.8, 4005.0], [71.9, 4005.0], [72.0, 4005.0], [72.1, 4005.0], [72.2, 4005.0], [72.3, 4005.0], [72.4, 4005.0], [72.5, 4005.0], [72.6, 4005.0], [72.7, 4005.0], [72.8, 4005.0], [72.9, 4005.0], [73.0, 4005.0], [73.1, 4005.0], [73.2, 4005.0], [73.3, 4005.0], [73.4, 4005.0], [73.5, 4005.0], [73.6, 4005.0], [73.7, 4005.0], [73.8, 4005.0], [73.9, 4005.0], [74.0, 4005.0], [74.1, 4005.0], [74.2, 4005.0], [74.3, 4005.0], [74.4, 4005.0], [74.5, 4005.0], [74.6, 4005.0], [74.7, 4005.0], [74.8, 4005.0], [74.9, 4005.0], [75.0, 4005.0], [75.1, 4005.0], [75.2, 4005.0], [75.3, 4005.0], [75.4, 4005.0], [75.5, 4005.0], [75.6, 4005.0], [75.7, 4005.0], [75.8, 4005.0], [75.9, 4005.0], [76.0, 4005.0], [76.1, 4005.0], [76.2, 4005.0], [76.3, 4005.0], [76.4, 4005.0], [76.5, 4005.0], [76.6, 4005.0], [76.7, 4006.0], [76.8, 4006.0], [76.9, 4006.0], [77.0, 4006.0], [77.1, 4006.0], [77.2, 4006.0], [77.3, 4006.0], [77.4, 4006.0], [77.5, 4006.0], [77.6, 4006.0], [77.7, 4006.0], [77.8, 4006.0], [77.9, 4006.0], [78.0, 4006.0], [78.1, 4006.0], [78.2, 4006.0], [78.3, 4006.0], [78.4, 4006.0], [78.5, 4006.0], [78.6, 4006.0], [78.7, 4006.0], [78.8, 4006.0], [78.9, 4006.0], [79.0, 4006.0], [79.1, 4006.0], [79.2, 4006.0], [79.3, 4006.0], [79.4, 4006.0], [79.5, 4006.0], [79.6, 4006.0], [79.7, 4006.0], [79.8, 4006.0], [79.9, 4006.0], [80.0, 4006.0], [80.1, 4006.0], [80.2, 4006.0], [80.3, 4006.0], [80.4, 4006.0], [80.5, 4006.0], [80.6, 4006.0], [80.7, 4006.0], [80.8, 4006.0], [80.9, 4006.0], [81.0, 4006.0], [81.1, 4006.0], [81.2, 4006.0], [81.3, 4006.0], [81.4, 4006.0], [81.5, 4006.0], [81.6, 4006.0], [81.7, 4006.0], [81.8, 4006.0], [81.9, 4006.0], [82.0, 4006.0], [82.1, 4006.0], [82.2, 4006.0], [82.3, 4006.0], [82.4, 4006.0], [82.5, 4006.0], [82.6, 4006.0], [82.7, 4006.0], [82.8, 4007.0], [82.9, 4007.0], [83.0, 4007.0], [83.1, 4007.0], [83.2, 4007.0], [83.3, 4007.0], [83.4, 4007.0], [83.5, 4007.0], [83.6, 4007.0], [83.7, 4007.0], [83.8, 4007.0], [83.9, 4007.0], [84.0, 4007.0], [84.1, 4007.0], [84.2, 4007.0], [84.3, 4007.0], [84.4, 4007.0], [84.5, 4007.0], [84.6, 4007.0], [84.7, 4007.0], [84.8, 4007.0], [84.9, 4007.0], [85.0, 4007.0], [85.1, 4007.0], [85.2, 4007.0], [85.3, 4007.0], [85.4, 4007.0], [85.5, 4007.0], [85.6, 4007.0], [85.7, 4007.0], [85.8, 4007.0], [85.9, 4007.0], [86.0, 4007.0], [86.1, 4007.0], [86.2, 4007.0], [86.3, 4007.0], [86.4, 4007.0], [86.5, 4007.0], [86.6, 4007.0], [86.7, 4007.0], [86.8, 4007.0], [86.9, 4007.0], [87.0, 4007.0], [87.1, 4007.0], [87.2, 4008.0], [87.3, 4008.0], [87.4, 4008.0], [87.5, 4008.0], [87.6, 4008.0], [87.7, 4008.0], [87.8, 4008.0], [87.9, 4008.0], [88.0, 4008.0], [88.1, 4008.0], [88.2, 4008.0], [88.3, 4008.0], [88.4, 4008.0], [88.5, 4008.0], [88.6, 4008.0], [88.7, 4008.0], [88.8, 4008.0], [88.9, 4008.0], [89.0, 4008.0], [89.1, 4008.0], [89.2, 4008.0], [89.3, 4008.0], [89.4, 4008.0], [89.5, 4008.0], [89.6, 4008.0], [89.7, 4008.0], [89.8, 4008.0], [89.9, 4008.0], [90.0, 4008.0], [90.1, 4008.0], [90.2, 4008.0], [90.3, 4009.0], [90.4, 4009.0], [90.5, 4009.0], [90.6, 4009.0], [90.7, 4009.0], [90.8, 4009.0], [90.9, 4009.0], [91.0, 4009.0], [91.1, 4009.0], [91.2, 4009.0], [91.3, 4009.0], [91.4, 4009.0], [91.5, 4009.0], [91.6, 4009.0], [91.7, 4009.0], [91.8, 4009.0], [91.9, 4009.0], [92.0, 4009.0], [92.1, 4009.0], [92.2, 4010.0], [92.3, 4010.0], [92.4, 4010.0], [92.5, 4010.0], [92.6, 4010.0], [92.7, 4010.0], [92.8, 4010.0], [92.9, 4010.0], [93.0, 4010.0], [93.1, 4010.0], [93.2, 4010.0], [93.3, 4010.0], [93.4, 4011.0], [93.5, 4011.0], [93.6, 4011.0], [93.7, 4011.0], [93.8, 4011.0], [93.9, 4011.0], [94.0, 4011.0], [94.1, 4012.0], [94.2, 4012.0], [94.3, 4012.0], [94.4, 4012.0], [94.5, 4012.0], [94.6, 4012.0], [94.7, 4013.0], [94.8, 4013.0], [94.9, 4013.0], [95.0, 4013.0], [95.1, 4013.0], [95.2, 4014.0], [95.3, 4014.0], [95.4, 4014.0], [95.5, 4015.0], [95.6, 4015.0], [95.7, 4015.0], [95.8, 4016.0], [95.9, 4016.0], [96.0, 4017.0], [96.1, 4017.0], [96.2, 4018.0], [96.3, 4019.0], [96.4, 4020.0], [96.5, 4021.0], [96.6, 4023.0], [96.7, 4028.0], [96.8, 4038.0], [96.9, 4049.0], [97.0, 4066.0], [97.1, 4099.0], [97.2, 4106.0], [97.3, 4121.0], [97.4, 4147.0], [97.5, 4246.0], [97.6, 4373.0], [97.7, 4467.0], [97.8, 4596.0], [97.9, 4681.0], [98.0, 4882.0], [98.1, 5075.0], [98.2, 5148.0], [98.3, 5212.0], [98.4, 5225.0], [98.5, 5273.0], [98.6, 5401.0], [98.7, 5426.0], [98.8, 5696.0], [98.9, 5895.0], [99.0, 6047.0], [99.1, 6553.0], [99.2, 6868.0], [99.3, 12458.0], [99.4, 25634.0], [99.5, 39978.0], [99.6, 454779.0], [99.7, 477244.0], [99.8, 499760.0], [99.9, 522337.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 28891.0, "series": [{"data": [[0.0, 28891.0], [531600.0, 1.0], [535700.0, 1.0], [460100.0, 1.0], [517700.0, 1.0], [539800.0, 1.0], [543900.0, 1.0], [456000.0, 1.0], [528000.0, 1.0], [532100.0, 1.0], [461900.0, 1.0], [519500.0, 1.0], [536200.0, 1.0], [457800.0, 1.0], [464200.0, 1.0], [483400.0, 1.0], [489800.0, 1.0], [542900.0, 1.0], [457300.0, 1.0], [463700.0, 1.0], [489300.0, 1.0], [521300.0, 1.0], [100.0, 292.0], [440400.0, 1.0], [459600.0, 1.0], [491600.0, 1.0], [523600.0, 1.0], [34500.0, 1.0], [38500.0, 2.0], [48100.0, 1.0], [539300.0, 1.0], [200.0, 43.0], [51300.0, 1.0], [439900.0, 1.0], [55300.0, 1.0], [459100.0, 1.0], [465500.0, 1.0], [491100.0, 1.0], [523100.0, 1.0], [543400.0, 1.0], [300.0, 50.0], [400.0, 90.0], [461400.0, 1.0], [500.0, 90.0], [600.0, 36.0], [700.0, 27.0], [524500.0, 1.0], [800.0, 34.0], [441700.0, 1.0], [900.0, 25.0], [467300.0, 1.0], [492900.0, 1.0], [1000.0, 26.0], [1100.0, 11.0], [1200.0, 3.0], [1300.0, 11.0], [1400.0, 14.0], [1500.0, 18.0], [1600.0, 18.0], [1700.0, 6.0], [1800.0, 10.0], [463200.0, 1.0], [469600.0, 1.0], [1900.0, 7.0], [495200.0, 1.0], [2000.0, 26.0], [520800.0, 1.0], [2100.0, 14.0], [2300.0, 7.0], [2200.0, 15.0], [2400.0, 7.0], [2500.0, 8.0], [2600.0, 11.0], [2800.0, 18.0], [2700.0, 23.0], [2900.0, 8.0], [3000.0, 8.0], [3100.0, 5.0], [3200.0, 6.0], [3300.0, 2.0], [3400.0, 5.0], [3500.0, 5.0], [3700.0, 22.0], [3600.0, 28.0], [462700.0, 1.0], [469100.0, 1.0], [3800.0, 55.0], [3900.0, 11.0], [501100.0, 1.0], [4000.0, 18567.0], [4100.0, 178.0], [4300.0, 43.0], [4200.0, 32.0], [4400.0, 44.0], [4600.0, 50.0], [4500.0, 51.0], [4800.0, 43.0], [4700.0, 15.0], [4900.0, 32.0], [5000.0, 34.0], [5100.0, 58.0], [5200.0, 120.0], [5300.0, 44.0], [5500.0, 9.0], [5600.0, 13.0], [5400.0, 81.0], [5700.0, 27.0], [5800.0, 28.0], [5900.0, 29.0], [6100.0, 5.0], [6000.0, 25.0], [6300.0, 14.0], [6200.0, 18.0], [6600.0, 1.0], [6400.0, 1.0], [6500.0, 11.0], [6700.0, 3.0], [6800.0, 42.0], [6900.0, 4.0], [7000.0, 2.0], [445800.0, 1.0], [7300.0, 2.0], [465000.0, 1.0], [471400.0, 1.0], [7200.0, 1.0], [7500.0, 1.0], [7900.0, 1.0], [497000.0, 1.0], [7800.0, 2.0], [8000.0, 1.0], [8600.0, 1.0], [8400.0, 2.0], [527600.0, 1.0], [8200.0, 1.0], [8800.0, 2.0], [9000.0, 1.0], [10200.0, 2.0], [10800.0, 2.0], [11200.0, 1.0], [11000.0, 1.0], [11400.0, 1.0], [11600.0, 1.0], [12000.0, 1.0], [12400.0, 1.0], [13600.0, 1.0], [13800.0, 1.0], [14200.0, 1.0], [15600.0, 1.0], [496500.0, 1.0], [502900.0, 1.0], [16200.0, 1.0], [16000.0, 1.0], [17200.0, 1.0], [19600.0, 1.0], [20400.0, 1.0], [22800.0, 1.0], [23200.0, 1.0], [24400.0, 1.0], [24800.0, 1.0], [25200.0, 1.0], [26400.0, 1.0], [25600.0, 1.0], [26800.0, 1.0], [441200.0, 1.0], [466800.0, 1.0], [473200.0, 1.0], [30400.0, 1.0], [30000.0, 1.0], [33600.0, 1.0], [37600.0, 1.0], [40800.0, 1.0], [42400.0, 1.0], [43200.0, 1.0], [440700.0, 1.0], [443000.0, 1.0], [468600.0, 1.0], [475000.0, 1.0], [532500.0, 1.0], [503300.0, 1.0], [536600.0, 1.0], [540700.0, 1.0], [448000.0, 1.0], [473600.0, 1.0], [499200.0, 1.0], [447500.0, 1.0], [479500.0, 1.0], [498700.0, 1.0], [505100.0, 1.0], [511500.0, 1.0], [443400.0, 1.0], [449800.0, 1.0], [507400.0, 1.0], [449300.0, 1.0], [455700.0, 1.0], [500500.0, 1.0], [445200.0, 1.0], [451600.0, 1.0], [477200.0, 1.0], [33100.0, 1.0], [34700.0, 1.0], [36300.0, 1.0], [38700.0, 1.0], [40300.0, 1.0], [46700.0, 1.0], [451100.0, 1.0], [476700.0, 1.0], [515100.0, 1.0], [540200.0, 1.0], [447000.0, 1.0], [453400.0, 1.0], [472600.0, 1.0], [479000.0, 1.0], [504600.0, 1.0], [511000.0, 1.0], [446500.0, 1.0], [484900.0, 1.0], [506400.0, 1.0], [454700.0, 1.0], [505900.0, 1.0], [512300.0, 1.0], [482600.0, 1.0], [489000.0, 1.0], [514600.0, 1.0], [508200.0, 1.0], [528500.0, 1.0], [488500.0, 1.0], [507700.0, 1.0], [514100.0, 1.0], [16900.0, 1.0], [16500.0, 1.0], [19700.0, 1.0], [20100.0, 2.0], [20900.0, 1.0], [20500.0, 1.0], [22100.0, 1.0], [24100.0, 2.0], [23700.0, 1.0], [26100.0, 1.0], [26500.0, 1.0], [27300.0, 1.0], [27700.0, 1.0], [452400.0, 1.0], [458800.0, 1.0], [478000.0, 1.0], [484400.0, 1.0], [30500.0, 1.0], [31300.0, 1.0], [30900.0, 1.0], [32500.0, 1.0], [510000.0, 1.0], [35400.0, 1.0], [37800.0, 2.0], [39400.0, 1.0], [43400.0, 2.0], [45000.0, 1.0], [524900.0, 1.0], [483900.0, 1.0], [509500.0, 1.0], [515900.0, 1.0], [522300.0, 1.0], [529000.0, 1.0], [533100.0, 1.0], [538000.0, 1.0], [456900.0, 1.0], [533400.0, 1.0], [516800.0, 1.0], [534400.0, 1.0], [490700.0, 1.0], [516300.0, 1.0], [522700.0, 1.0], [533900.0, 1.0], [461000.0, 1.0], [486600.0, 1.0], [518600.0, 1.0], [460500.0, 1.0], [486100.0, 1.0], [492500.0, 1.0], [518100.0, 1.0], [494800.0, 1.0], [520400.0, 1.0], [34900.0, 1.0], [38100.0, 1.0], [39700.0, 1.0], [54900.0, 1.0], [462300.0, 1.0], [487900.0, 1.0], [494300.0, 1.0], [519900.0, 1.0], [537000.0, 1.0], [541100.0, 1.0], [458200.0, 1.0], [464600.0, 1.0], [471000.0, 1.0], [490200.0, 1.0], [526800.0, 1.0], [470500.0, 1.0], [496100.0, 1.0], [521700.0, 1.0], [466400.0, 1.0], [492000.0, 1.0], [498400.0, 1.0], [524000.0, 1.0], [465900.0, 1.0], [472300.0, 1.0], [544200.0, 1.0], [442600.0, 1.0], [493800.0, 1.0], [8700.0, 1.0], [8300.0, 1.0], [8900.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [9300.0, 2.0], [10100.0, 1.0], [11100.0, 2.0], [11700.0, 2.0], [11500.0, 2.0], [11300.0, 1.0], [11900.0, 1.0], [12500.0, 1.0], [525300.0, 1.0], [13100.0, 2.0], [13300.0, 1.0], [442100.0, 1.0], [14300.0, 1.0], [467700.0, 1.0], [15100.0, 1.0], [493300.0, 1.0], [499700.0, 1.0], [17400.0, 1.0], [529400.0, 1.0], [17800.0, 1.0], [19800.0, 1.0], [21400.0, 1.0], [21000.0, 1.0], [23000.0, 1.0], [24200.0, 1.0], [25000.0, 1.0], [25400.0, 1.0], [24600.0, 1.0], [26200.0, 1.0], [28600.0, 1.0], [28200.0, 1.0], [495600.0, 1.0], [502000.0, 1.0], [31800.0, 1.0], [32200.0, 1.0], [34000.0, 2.0], [38000.0, 1.0], [37200.0, 1.0], [48400.0, 1.0], [53200.0, 1.0], [443900.0, 1.0], [450300.0, 1.0], [475900.0, 1.0], [501500.0, 1.0], [525800.0, 1.0], [529900.0, 1.0], [446200.0, 1.0], [471800.0, 1.0], [497400.0, 1.0], [534800.0, 1.0], [538900.0, 1.0], [448900.0, 1.0], [468100.0, 1.0], [474500.0, 1.0], [500100.0, 1.0], [444800.0, 1.0], [502400.0, 1.0], [531200.0, 1.0], [535300.0, 1.0], [444300.0, 1.0], [450700.0, 1.0], [469900.0, 1.0], [476300.0, 1.0], [453000.0, 1.0], [478600.0, 1.0], [497800.0, 1.0], [504200.0, 1.0], [510600.0, 1.0], [542000.0, 1.0], [503700.0, 1.0], [537400.0, 1.0], [541500.0, 1.0], [448400.0, 1.0], [474000.0, 1.0], [480400.0, 1.0], [538400.0, 1.0], [36700.0, 1.0], [39900.0, 2.0], [43900.0, 1.0], [46300.0, 1.0], [542500.0, 1.0], [454300.0, 1.0], [479900.0, 1.0], [505500.0, 1.0], [511900.0, 1.0], [456600.0, 1.0], [482200.0, 1.0], [475300.0, 1.0], [481700.0, 1.0], [513700.0, 1.0], [452000.0, 1.0], [477600.0, 1.0], [509100.0, 1.0], [515500.0, 1.0], [453800.0, 1.0], [485800.0, 1.0], [530800.0, 1.0], [485300.0, 1.0], [517300.0, 1.0], [526200.0, 1.0], [18300.0, 1.0], [19100.0, 1.0], [18700.0, 1.0], [21100.0, 1.0], [21900.0, 1.0], [22300.0, 1.0], [23500.0, 1.0], [23100.0, 1.0], [530300.0, 1.0], [25900.0, 1.0], [27100.0, 2.0], [29500.0, 1.0], [29100.0, 1.0], [481200.0, 1.0], [487600.0, 1.0], [506800.0, 1.0], [31100.0, 1.0], [32700.0, 1.0], [513200.0, 1.0], [527200.0, 1.0], [33400.0, 1.0], [35800.0, 1.0], [39000.0, 1.0], [455100.0, 1.0], [480700.0, 1.0], [487100.0, 1.0], [512700.0, 1.0], [519100.0, 1.0], [483000.0, 1.0], [508600.0, 1.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 544200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 275.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 27454.0, "series": [{"data": [[0.0, 27454.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 275.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1151.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 21120.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.57467678E12, "maxY": 277.2260479041915, "series": [{"data": [[1.57467702E12, 1.0], [1.57467924E12, 44.20209580838325], [1.57468086E12, 1.0], [1.57467762E12, 1.8116788321167898], [1.57467984E12, 1.0], [1.57467804E12, 1.0165413533834584], [1.57468026E12, 277.2113943028485], [1.57467966E12, 1.0], [1.57467864E12, 44.206015037594], [1.5746778E12, 1.0030075187969925], [1.57467942E12, 11.189189189189195], [1.5746784E12, 30.082733812949648], [1.57467822E12, 1.0210526315789477], [1.57468104E12, 24.00539568345322], [1.57467882E12, 44.213432835820896], [1.57468044E12, 277.2092675635274], [1.5746772E12, 1.0], [1.57467828E12, 1.0255255255255253], [1.5746805E12, 277.15393133997844], [1.5746799E12, 1.0], [1.57467888E12, 44.20601503759398], [1.5746787E12, 44.20895522388065], [1.57467708E12, 1.0], [1.57468092E12, 1.0014925373134338], [1.57467768E12, 1.0], [1.5746793E12, 44.22188905547225], [1.57467684E12, 1.0], [1.57467846E12, 44.212030075187975], [1.57468128E12, 1.0], [1.57467906E12, 44.20689655172415], [1.57468068E12, 1.0], [1.57467744E12, 1.0045317220543808], [1.57467726E12, 1.001503759398497], [1.57467948E12, 76.23041997729851], [1.5746811E12, 44.42857142857141], [1.57467786E12, 1.0300751879699237], [1.57468008E12, 264.6947368421052], [1.57467894E12, 44.20808383233537], [1.57467732E12, 1.0], [1.57468116E12, 18.12201257861634], [1.57467792E12, 1.0045112781954886], [1.57467954E12, 44.2140718562874], [1.57467774E12, 1.0060150375939854], [1.57467996E12, 1.0], [1.57468056E12, 168.26720647773286], [1.57467834E12, 4.499999999999999], [1.5746775E12, 1.0074850299401208], [1.57467972E12, 1.0], [1.57468032E12, 277.21194029850756], [1.5746781E12, 1.0105263157894744], [1.57467852E12, 44.21856287425144], [1.57468074E12, 1.0], [1.5746769E12, 1.0], [1.57468014E12, 277.2104477611939], [1.57467912E12, 44.20508982035925], [1.57467798E12, 1.0060150375939865], [1.5746808E12, 1.0], [1.57467696E12, 1.0], [1.57467858E12, 44.206896551724135], [1.5746802E12, 277.2260479041915], [1.57467678E12, 1.0], [1.574679E12, 44.2068965517241], [1.57468122E12, 1.0], [1.57468062E12, 1.0], [1.57467738E12, 1.0045112781954892], [1.5746796E12, 27.311720698254383], [1.57467876E12, 44.21503759398494], [1.57468098E12, 1.0506912442396312], [1.57468038E12, 277.2117117117114], [1.57467714E12, 1.0], [1.57467936E12, 44.203592814371284], [1.57467756E12, 11.184496124031], [1.57467918E12, 44.20989505247379], [1.57467816E12, 1.0151285930408498], [1.57467978E12, 1.0]], "isOverall": false, "label": "1. Save API", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57468128E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 29.677330593975917, "minX": 1.0, "maxY": 30905.494365859515, "series": [{"data": [[2.0, 499.7964601769912], [3.0, 377.0394736842106], [4.0, 738.0405405405405], [5.0, 661.5737704918032], [6.0, 910.970149253731], [7.0, 826.7130434782609], [8.0, 355.7614678899082], [9.0, 435.74117647058813], [10.0, 822.0454545454545], [11.0, 244.93333333333337], [12.0, 1422.5217391304348], [13.0, 179.29310344827584], [14.0, 986.2222222222222], [15.0, 380.6692913385828], [16.0, 708.4494382022474], [17.0, 398.130434782609], [18.0, 1599.8260869565215], [19.0, 1017.883720930232], [20.0, 526.7647058823527], [21.0, 95.8952380952381], [22.0, 597.9], [23.0, 319.17808219178085], [24.0, 2282.1923076923076], [25.0, 1926.0], [26.0, 7957.571428571427], [27.0, 5063.416666666668], [28.0, 1308.7894736842106], [29.0, 984.6956521739128], [30.0, 14178.904761904765], [31.0, 7676.666666666667], [32.0, 1628.0526315789477], [33.0, 2595.607142857142], [34.0, 1799.6521739130437], [35.0, 2265.5000000000005], [36.0, 1868.333333333333], [37.0, 3057.25641025641], [38.0, 3172.9750000000004], [39.0, 3143.6136363636365], [40.0, 2690.6956521739144], [41.0, 2823.4181818181814], [42.0, 2838.0952380952367], [43.0, 3132.55], [44.0, 4004.4420169706505], [45.0, 3989.23502466526], [46.0, 3879.630434782609], [47.0, 3493.102564102565], [48.0, 3291.333333333334], [49.0, 3734.481481481482], [50.0, 2875.0000000000005], [51.0, 3656.8888888888887], [53.0, 3981.0], [52.0, 3886.0], [55.0, 3921.6666666666665], [54.0, 3877.0], [57.0, 3960.8], [56.0, 3850.0], [59.0, 3839.5], [58.0, 3847.5], [61.0, 3179.75], [60.0, 3671.0], [62.0, 3833.0], [63.0, 3661.0], [67.0, 3914.75], [64.0, 3799.4], [66.0, 3639.0], [65.0, 3642.0], [71.0, 3134.0], [69.0, 3950.2], [70.0, 4104.5], [68.0, 3639.0], [75.0, 4288.0], [74.0, 4118.0], [73.0, 4564.0], [72.0, 4564.0], [76.0, 4120.0], [77.0, 4286.0], [79.0, 4564.0], [78.0, 4564.0], [83.0, 4559.0], [82.0, 4563.0], [81.0, 4561.0], [80.0, 4562.0], [86.0, 4057.4545454545455], [85.0, 4285.0], [87.0, 4560.0], [84.0, 4559.0], [91.0, 19535.114583333325], [89.0, 4614.0], [88.0, 4517.6], [90.0, 5223.0], [95.0, 4324.666666666667], [94.0, 4616.5], [93.0, 4416.0], [92.0, 5223.0], [98.0, 4635.5], [97.0, 4267.0], [96.0, 4636.5], [99.0, 5268.0], [100.0, 4146.895833333334], [101.0, 4430.470588235294], [102.0, 4325.25], [103.0, 4641.0], [104.0, 4324.666666666667], [105.0, 4493.5], [106.0, 4113.166666666667], [107.0, 4075.846153846154], [108.0, 4041.4305555555566], [109.0, 4138.5], [110.0, 4116.0], [111.0, 4181.333333333333], [112.0, 4411.571428571428], [113.0, 4023.203125000001], [114.0, 4044.6296296296296], [115.0, 4053.761904761905], [116.0, 4167.833333333333], [117.0, 4198.8], [118.0, 4165.5], [119.0, 4198.6], [120.0, 4196.0], [123.0, 4878.0], [122.0, 4883.0], [121.0, 4216.0], [127.0, 4622.0], [126.0, 4621.0], [125.0, 4621.0], [124.0, 4621.0], [135.0, 4881.0], [134.0, 4626.0], [133.0, 4628.0], [132.0, 4620.0], [131.0, 4889.0], [130.0, 4622.0], [129.0, 4624.0], [128.0, 4622.0], [143.0, 5402.0], [142.0, 4606.0], [141.0, 5401.0], [140.0, 4881.0], [139.0, 4884.0], [138.0, 4883.0], [137.0, 4882.0], [136.0, 4620.0], [151.0, 5087.0], [150.0, 5085.0], [149.0, 5282.0], [148.0, 4599.0], [147.0, 4595.0], [146.0, 4596.0], [145.0, 5400.5], [144.0, 5403.0], [159.0, 5083.0], [158.0, 5079.0], [157.0, 5076.0], [156.0, 5075.0], [155.0, 5095.5], [154.0, 5091.0], [153.0, 5079.0], [152.0, 5096.0], [167.0, 5080.0], [166.0, 5091.0], [165.0, 5090.5], [164.0, 5090.0], [163.0, 5084.0], [162.0, 5080.0], [161.0, 5083.0], [160.0, 5080.0], [175.0, 5066.0], [174.0, 5070.0], [173.0, 5069.0], [172.0, 5065.0], [171.0, 5065.0], [170.0, 5063.0], [169.0, 5082.0], [168.0, 5081.0], [183.0, 4987.0], [182.0, 4987.0], [181.0, 5430.0], [180.0, 4799.0], [179.0, 5033.5], [178.0, 5075.0], [177.0, 5073.0], [176.0, 5069.0], [191.0, 5433.0], [190.0, 5430.0], [189.0, 5431.0], [188.0, 5433.0], [187.0, 5428.0], [186.0, 5431.0], [185.0, 5430.0], [184.0, 4988.0], [199.0, 5434.0], [198.0, 5433.0], [197.0, 5433.0], [196.0, 5432.0], [195.0, 5433.0], [194.0, 5431.0], [193.0, 5432.0], [192.0, 5432.0], [207.0, 4866.0], [206.0, 4510.0], [205.0, 5283.333333333333], [204.0, 5434.0], [203.0, 5436.0], [202.0, 5435.0], [201.0, 5436.0], [200.0, 5435.0], [215.0, 4963.0], [214.0, 4961.0], [213.0, 4964.0], [212.0, 4970.0], [211.0, 4961.0], [210.0, 4955.5], [209.0, 4953.0], [208.0, 4953.0], [223.0, 5241.0], [222.0, 5240.0], [221.0, 5239.0], [220.0, 5242.0], [219.0, 5085.5], [218.0, 5242.0], [217.0, 4969.0], [216.0, 4971.0], [231.0, 5800.0], [230.0, 5800.0], [229.0, 5801.0], [228.0, 5799.0], [227.0, 5801.0], [226.0, 5297.0], [225.0, 5243.0], [224.0, 5242.0], [239.0, 5390.0], [238.0, 5388.5], [237.0, 5388.0], [236.0, 5391.5], [235.0, 5393.0], [234.0, 5396.0], [233.0, 5388.0], [232.0, 5593.5], [242.0, 4410.0], [243.0, 4558.666666666667], [244.0, 4434.0], [245.0, 4433.5], [246.0, 4440.5], [247.0, 4439.5], [241.0, 5391.0], [240.0, 5390.0], [248.0, 4442.5], [249.0, 4439.0], [250.0, 4438.0], [251.0, 4296.666666666667], [252.0, 4292.333333333333], [253.0, 4301.666666666667], [254.0, 4298.333333333333], [255.0, 4284.666666666667], [257.0, 4509.6], [256.0, 4292.666666666667], [258.0, 4282.0], [259.0, 4282.333333333333], [260.0, 4483.8], [261.0, 4399.25], [262.0, 4168.25], [263.0, 4319.75], [264.0, 4369.5], [270.0, 4509.714285714285], [271.0, 4528.142857142858], [268.0, 4299.25], [269.0, 4245.2], [265.0, 4318.5], [266.0, 4397.25], [267.0, 4299.75], [273.0, 4251.2], [272.0, 4410.833333333333], [274.0, 4248.0], [275.0, 4414.333333333333], [276.0, 4311.727272727273], [277.0, 30905.494365859515], [278.0, 5325.546006944445], [279.0, 4770.7868852459], [280.0, 5819.528301886793], [286.0, 5652.666666666667], [285.0, 5123.0], [284.0, 5220.818181818182], [281.0, 5827.666666666667], [282.0, 6251.2266666666665], [283.0, 5535.092105263158], [1.0, 29.677330593975917]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}, {"data": [[47.69005999999975, 4006.395380000043]], "isOverall": false, "label": "Save API HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 286.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.57467678E12, "maxY": 2083730.1333333333, "series": [{"data": [[1.57467702E12, 3180.9166666666665], [1.57467924E12, 31563.0], [1.57468086E12, 3195.266666666667], [1.57467762E12, 3276.5833333333335], [1.57467984E12, 3180.9166666666665], [1.57467804E12, 3180.9166666666665], [1.57468026E12, 31515.75], [1.57467966E12, 3180.9166666666665], [1.57467864E12, 31421.25], [1.5746778E12, 3180.9166666666665], [1.57467942E12, 2320.9333333333334], [1.5746784E12, 23641.166666666668], [1.57467822E12, 3180.9166666666665], [1.57468104E12, 23242.1], [1.57467882E12, 31657.5], [1.57468044E12, 31610.25], [1.5746772E12, 3180.9166666666665], [1.57467828E12, 8384.3], [1.5746805E12, 41233.8], [1.5746799E12, 3195.266666666667], [1.57467888E12, 31421.25], [1.5746787E12, 31657.5], [1.57467708E12, 3180.9166666666665], [1.57468092E12, 3204.8333333333335], [1.57467768E12, 3180.9166666666665], [1.5746793E12, 31515.75], [1.57467684E12, 3195.266666666667], [1.57467846E12, 31421.25], [1.57468128E12, 1559.3666666666666], [1.57467906E12, 31515.75], [1.57468068E12, 3204.8333333333335], [1.57467744E12, 3166.5666666666666], [1.57467726E12, 3180.9166666666665], [1.57467948E12, 40927.9], [1.5746811E12, 31752.0], [1.57467786E12, 3180.9166666666665], [1.57468008E12, 4488.75], [1.57467894E12, 31563.0], [1.57467732E12, 3180.9166666666665], [1.57468116E12, 11191.95], [1.57467792E12, 3180.9166666666665], [1.57467954E12, 31563.0], [1.57467774E12, 3180.9166666666665], [1.57467996E12, 2917.8333333333335], [1.57468056E12, 19863.783333333333], [1.57467834E12, 20059.466666666667], [1.5746775E12, 10525.666666666666], [1.57467972E12, 3195.266666666667], [1.57468032E12, 31657.5], [1.5746781E12, 3180.9166666666665], [1.57467852E12, 31563.0], [1.57468074E12, 3204.8333333333335], [1.5746769E12, 3180.9166666666665], [1.57468014E12, 31657.5], [1.57467912E12, 31563.0], [1.57467798E12, 3180.9166666666665], [1.5746808E12, 3195.266666666667], [1.57467696E12, 3180.9166666666665], [1.57467858E12, 31515.75], [1.5746802E12, 31563.0], [1.57467678E12, 1683.7333333333333], [1.574679E12, 31515.75], [1.57468122E12, 3223.9666666666667], [1.57468062E12, 3180.9166666666665], [1.57467738E12, 3180.9166666666665], [1.5746796E12, 20907.833333333332], [1.57467876E12, 31421.25], [1.57468098E12, 7978.95], [1.57468038E12, 31468.5], [1.57467714E12, 3180.9166666666665], [1.57467936E12, 31563.0], [1.57467756E12, 18411.45], [1.57467918E12, 31515.75], [1.57467816E12, 3161.7833333333333], [1.57467978E12, 3190.483333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57467702E12, 951703.6666666666], [1.57467924E12, 0.0], [1.57468086E12, 955997.0666666667], [1.57467762E12, 980326.3333333334], [1.57467984E12, 951703.6666666666], [1.57467804E12, 951703.6666666666], [1.57468026E12, 0.0], [1.57467966E12, 951703.6666666666], [1.57467864E12, 0.0], [1.5746778E12, 951703.6666666666], [1.57467942E12, 628267.5333333333], [1.5746784E12, 54383.066666666666], [1.57467822E12, 951703.6666666666], [1.57468104E12, 40071.73333333333], [1.57467882E12, 0.0], [1.57468044E12, 0.0], [1.5746772E12, 951703.6666666666], [1.57467828E12, 754207.2666666667], [1.5746805E12, 0.0], [1.5746799E12, 955997.0666666667], [1.57467888E12, 0.0], [1.5746787E12, 0.0], [1.57467708E12, 951703.6666666666], [1.57468092E12, 958859.3333333334], [1.57467768E12, 951703.6666666666], [1.5746793E12, 0.0], [1.57467684E12, 955997.0666666667], [1.57467846E12, 0.0], [1.57468128E12, 466549.4666666667], [1.57467906E12, 0.0], [1.57468068E12, 958859.3333333334], [1.57467744E12, 947410.2666666667], [1.57467726E12, 951703.6666666666], [1.57467948E12, 4293.4], [1.5746811E12, 0.0], [1.57467786E12, 951703.6666666666], [1.57468008E12, 0.0], [1.57467894E12, 0.0], [1.57467732E12, 951703.6666666666], [1.57468116E12, 888733.8], [1.57467792E12, 951703.6666666666], [1.57467954E12, 0.0], [1.57467774E12, 951703.6666666666], [1.57467996E12, 872991.3333333334], [1.57468056E12, 2083730.1333333333], [1.57467834E12, 260466.26666666666], [1.5746775E12, 675494.9333333333], [1.57467972E12, 955997.0666666667], [1.57468032E12, 0.0], [1.5746781E12, 951703.6666666666], [1.57467852E12, 0.0], [1.57468074E12, 958859.3333333334], [1.5746769E12, 951703.6666666666], [1.57468014E12, 0.0], [1.57467912E12, 0.0], [1.57467798E12, 951703.6666666666], [1.5746808E12, 955997.0666666667], [1.57467696E12, 951703.6666666666], [1.57467858E12, 0.0], [1.5746802E12, 0.0], [1.57467678E12, 503758.93333333335], [1.574679E12, 0.0], [1.57468122E12, 964583.8666666667], [1.57468062E12, 951703.6666666666], [1.57467738E12, 951703.6666666666], [1.5746796E12, 572453.3333333334], [1.57467876E12, 0.0], [1.57468098E12, 745620.4666666667], [1.57468038E12, 0.0], [1.57467714E12, 951703.6666666666], [1.57467936E12, 0.0], [1.57467756E12, 344903.13333333336], [1.57467918E12, 0.0], [1.57467816E12, 945979.1333333333], [1.57467978E12, 954565.9333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57468128E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10.970059880239527, "minX": 1.57467678E12, "maxY": 129946.4174972315, "series": [{"data": [[1.57467702E12, 19.938345864661656], [1.57467924E12, 4007.357784431141], [1.57468086E12, 44.39371257485036], [1.57467762E12, 466.88029197080425], [1.57467984E12, 20.71729323308273], [1.57467804E12, 35.28421052631577], [1.57468026E12, 4006.8410794602682], [1.57467966E12, 12.822556390977457], [1.57467864E12, 4007.6375939849604], [1.5746778E12, 22.54135338345867], [1.57467942E12, 422.1779279279286], [1.5746784E12, 3103.6510791366914], [1.57467822E12, 42.99248120300753], [1.57468104E12, 2368.773381294964], [1.57467882E12, 4006.4358208955223], [1.57468044E12, 4005.6905829596453], [1.5746772E12, 32.34887218045112], [1.57467828E12, 34.18618618618626], [1.5746805E12, 129946.4174972315], [1.5746799E12, 24.100299401197606], [1.57467888E12, 4006.5924812030025], [1.5746787E12, 4007.950746268659], [1.57467708E12, 24.772932330827075], [1.57468092E12, 47.54328358208948], [1.57467768E12, 20.20300751879697], [1.5746793E12, 4006.3913043478256], [1.57467684E12, 10.970059880239527], [1.57467846E12, 4006.8556390977474], [1.57468128E12, 45.22699386503067], [1.57467906E12, 4006.299850074965], [1.57468068E12, 30.217910447761195], [1.57467744E12, 55.640483383685805], [1.57467726E12, 34.29323308270677], [1.57467948E12, 5728.279228149827], [1.5746811E12, 4005.1279761904752], [1.57467786E12, 31.23157894736847], [1.57468008E12, 4007.3789473684214], [1.57467894E12, 4006.5134730538903], [1.57467732E12, 39.05112781954892], [1.57468116E12, 1356.6503144654107], [1.57467792E12, 27.858646616541357], [1.57467954E12, 4006.9491017964083], [1.57467774E12, 23.187969924812055], [1.57467996E12, 26.80983606557378], [1.57468056E12, 3328.3233082706734], [1.57467834E12, 185.47310126582286], [1.5746775E12, 43.76197604790416], [1.57467972E12, 14.706586826347303], [1.57468032E12, 4006.2134328358225], [1.5746781E12, 37.153383458646644], [1.57467852E12, 4006.791916167665], [1.57468074E12, 33.95223880597016], [1.5746769E12, 13.754887218045111], [1.57468014E12, 4006.4223880596996], [1.57467912E12, 4005.9401197604766], [1.57467798E12, 28.574436090225547], [1.5746808E12, 38.75748502994015], [1.57467696E12, 17.37293233082705], [1.57467858E12, 4006.433283358318], [1.5746802E12, 4006.2245508982055], [1.57467678E12, 12.127840909090905], [1.574679E12, 4006.4332833583226], [1.57468122E12, 43.41543026706227], [1.57468062E12, 26.590977443609024], [1.57467738E12, 50.22255639097746], [1.5746796E12, 2152.947630922695], [1.57467876E12, 4007.442105263158], [1.57468098E12, 42.48694316436251], [1.57468038E12, 4006.2582582582572], [1.57467714E12, 32.436090225563945], [1.57467936E12, 4007.056886227543], [1.57467756E12, 529.451162790698], [1.57467918E12, 4006.173913043478], [1.57467816E12, 38.105900151285944], [1.57467978E12, 18.41379310344827]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57468128E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.57467678E12, "maxY": 2685.6923076923094, "series": [{"data": [[1.57467702E12, 19.933834586466162], [1.57467924E12, 0.0], [1.57468086E12, 44.38622754491018], [1.57467762E12, 466.87299270073083], [1.57467984E12, 20.706766917293244], [1.57467804E12, 35.27067669172928], [1.57468026E12, 0.0], [1.57467966E12, 12.812030075187971], [1.57467864E12, 0.0], [1.5746778E12, 22.529323308270673], [1.57467942E12, 404.0855855855858], [1.5746784E12, 288.41906474820155], [1.57467822E12, 42.98345864661655], [1.57468104E12, 232.99999999999986], [1.57467882E12, 0.0], [1.57468044E12, 0.0], [1.5746772E12, 32.33684210526311], [1.57467828E12, 34.024024024024015], [1.5746805E12, 0.0], [1.5746799E12, 24.092814371257475], [1.57467888E12, 0.0], [1.5746787E12, 0.0], [1.57467708E12, 24.76240601503758], [1.57468092E12, 47.53432835820898], [1.57467768E12, 20.19398496240602], [1.5746793E12, 0.0], [1.57467684E12, 10.968562874251505], [1.57467846E12, 0.0], [1.57468128E12, 45.22392638036811], [1.57467906E12, 0.0], [1.57468068E12, 30.201492537313417], [1.57467744E12, 55.62839879154072], [1.57467726E12, 34.28721804511279], [1.57467948E12, 8.916004540295136], [1.5746811E12, 0.0], [1.57467786E12, 31.222556390977413], [1.57468008E12, 0.0], [1.57467894E12, 0.0], [1.57467732E12, 39.03609022556385], [1.57468116E12, 479.813836477987], [1.57467792E12, 27.854135338345884], [1.57467954E12, 0.0], [1.57467774E12, 23.177443609022582], [1.57467996E12, 26.80491803278688], [1.57468056E12, 2685.6923076923094], [1.57467834E12, 185.00000000000009], [1.5746775E12, 43.56437125748501], [1.57467972E12, 14.699101796407192], [1.57468032E12, 0.0], [1.5746781E12, 37.141353383458615], [1.57467852E12, 0.0], [1.57468074E12, 33.94477611940301], [1.5746769E12, 13.748872180451123], [1.57468014E12, 0.0], [1.57467912E12, 0.0], [1.57467798E12, 28.565413533834615], [1.5746808E12, 38.74850299401198], [1.57467696E12, 17.3654135338346], [1.57467858E12, 0.0], [1.5746802E12, 0.0], [1.57467678E12, 12.122159090909085], [1.574679E12, 0.0], [1.57468122E12, 43.40949554896138], [1.57468062E12, 26.578947368421055], [1.57467738E12, 50.21804511278188], [1.5746796E12, 144.71197007481297], [1.57467876E12, 0.0], [1.57468098E12, 42.37019969278035], [1.57468038E12, 0.0], [1.57467714E12, 32.43308270676694], [1.57467936E12, 0.0], [1.57467756E12, 529.1379844961241], [1.57467918E12, 0.0], [1.57467816E12, 38.09531013615731], [1.57467978E12, 18.40629685157421]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57468128E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.11879699248120303, "minX": 1.57467678E12, "maxY": 4007.9179104477594, "series": [{"data": [[1.57467702E12, 0.13383458646616542], [1.57467924E12, 4007.335329341316], [1.57468086E12, 0.23353293413173676], [1.57467762E12, 0.19270072992700732], [1.57467984E12, 0.17894736842105263], [1.57467804E12, 0.15639097744360905], [1.57468026E12, 4006.817091454271], [1.57467966E12, 0.20451127819548878], [1.57467864E12, 4007.596992481202], [1.5746778E12, 0.19398496240601495], [1.57467942E12, 246.48873873873836], [1.5746784E12, 2167.696043165467], [1.57467822E12, 0.2090225563909774], [1.57468104E12, 925.1474820143885], [1.57467882E12, 4006.416417910451], [1.57468044E12, 4005.6666666666674], [1.5746772E12, 0.18947368421052652], [1.57467828E12, 0.3258258258258259], [1.5746805E12, 2972.428571428571], [1.5746799E12, 0.164670658682635], [1.57467888E12, 4006.5714285714294], [1.5746787E12, 4007.9179104477594], [1.57467708E12, 0.13834586466165422], [1.57468092E12, 0.1283582089552237], [1.57467768E12, 0.2045112781954887], [1.5746793E12, 4006.3673163418343], [1.57467684E12, 0.19461077844311367], [1.57467846E12, 4006.8165413533834], [1.57468128E12, 0.15950920245398764], [1.57467906E12, 4006.2743628185926], [1.57468068E12, 0.17014925373134338], [1.57467744E12, 0.18731117824773424], [1.57467726E12, 0.1969924812030075], [1.57467948E12, 3606.0045402951177], [1.5746811E12, 4005.1101190476165], [1.57467786E12, 0.2150375939849623], [1.57468008E12, 4007.368421052633], [1.57467894E12, 4006.4895209580836], [1.57467732E12, 0.13533834586466162], [1.57468116E12, 1000.5849056603789], [1.57467792E12, 0.13834586466165427], [1.57467954E12, 4006.916167664668], [1.57467774E12, 0.21203007518797007], [1.57467996E12, 0.19016393442622934], [1.57468056E12, 837.7241179872751], [1.57467834E12, 0.5174050632911393], [1.5746775E12, 0.31287425149700593], [1.57467972E12, 0.19311377245509], [1.57468032E12, 4006.191044776119], [1.5746781E12, 0.17894736842105252], [1.57467852E12, 4006.7514970059874], [1.57468074E12, 0.1283582089552238], [1.5746769E12, 0.16541353383458657], [1.57468014E12, 4006.3925373134307], [1.57467912E12, 4005.896706586825], [1.57467798E12, 0.24360902255639102], [1.5746808E12, 0.18263473053892215], [1.57467696E12, 0.11879699248120303], [1.57467858E12, 4006.4092953523223], [1.5746802E12, 4006.196107784432], [1.57467678E12, 0.18749999999999994], [1.574679E12, 4006.404797601201], [1.57468122E12, 0.24035608308605347], [1.57468062E12, 0.17443609022556408], [1.57467738E12, 0.20751879699248119], [1.5746796E12, 2130.1583541147143], [1.57467876E12, 4007.4150375939885], [1.57468098E12, 0.3056835637480801], [1.57468038E12, 4006.237237237238], [1.57467714E12, 0.20150375939849627], [1.57467936E12, 4007.0164670658705], [1.57467756E12, 0.4325581395348837], [1.57467918E12, 4006.148425787106], [1.57467816E12, 0.232980332829047], [1.57467978E12, 0.22188905547226395]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57468128E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.57467678E12, "maxY": 53237.0, "series": [{"data": [[1.57467702E12, 105.0], [1.57468086E12, 198.0], [1.57467762E12, 53237.0], [1.57467984E12, 146.0], [1.57467804E12, 737.0], [1.57467966E12, 51.0], [1.5746778E12, 551.0], [1.57467942E12, 4556.0], [1.5746784E12, 27194.0], [1.57467822E12, 745.0], [1.57468104E12, 26545.0], [1.5746772E12, 231.0], [1.57467828E12, 770.0], [1.5746799E12, 171.0], [1.57467708E12, 214.0], [1.57468092E12, 317.0], [1.57467768E12, 257.0], [1.57467684E12, 53.0], [1.57468128E12, 156.0], [1.57468068E12, 120.0], [1.57467744E12, 362.0], [1.57467726E12, 444.0], [1.57467948E12, 3947.0], [1.57467786E12, 969.0], [1.57467732E12, 287.0], [1.57468116E12, 6264.0], [1.57467792E12, 395.0], [1.57467774E12, 612.0], [1.57467996E12, 143.0], [1.57468056E12, 9386.0], [1.57467834E12, 11261.0], [1.5746775E12, 335.0], [1.57467972E12, 114.0], [1.5746781E12, 561.0], [1.57468074E12, 169.0], [1.5746769E12, 117.0], [1.57467798E12, 626.0], [1.5746808E12, 167.0], [1.57467696E12, 104.0], [1.57467678E12, 41.0], [1.57468122E12, 106.0], [1.57468062E12, 96.0], [1.57467738E12, 342.0], [1.5746796E12, 4178.0], [1.57468098E12, 1386.0], [1.57467714E12, 250.0], [1.57467756E12, 43927.0], [1.57467816E12, 604.0], [1.57467978E12, 102.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57467702E12, 11.0], [1.57468086E12, 20.0], [1.57467762E12, 13.0], [1.57467984E12, 11.0], [1.57467804E12, 20.0], [1.57467966E12, 6.0], [1.5746778E12, 16.0], [1.57467942E12, 7.0], [1.5746784E12, 26.0], [1.57467822E12, 22.0], [1.57468104E12, 26.0], [1.5746772E12, 15.0], [1.57467828E12, 24.0], [1.5746799E12, 12.0], [1.57467708E12, 13.0], [1.57468092E12, 23.0], [1.57467768E12, 14.0], [1.57467684E12, 7.0], [1.57468128E12, 22.0], [1.57468068E12, 16.0], [1.57467744E12, 22.0], [1.57467726E12, 16.0], [1.57467948E12, 18.0], [1.57467786E12, 17.0], [1.57467732E12, 19.0], [1.57468116E12, 19.0], [1.57467792E12, 18.0], [1.57467774E12, 14.0], [1.57467996E12, 14.0], [1.57468056E12, 15.0], [1.57467834E12, 24.0], [1.5746775E12, 25.0], [1.57467972E12, 7.0], [1.5746781E12, 23.0], [1.57468074E12, 17.0], [1.5746769E12, 8.0], [1.57467798E12, 20.0], [1.5746808E12, 18.0], [1.57467696E12, 10.0], [1.57467678E12, 7.0], [1.57468122E12, 20.0], [1.57468062E12, 14.0], [1.57467738E12, 21.0], [1.5746796E12, 5.0], [1.57468098E12, 25.0], [1.57467714E12, 16.0], [1.57467756E12, 13.0], [1.57467816E12, 24.0], [1.57467978E12, 9.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57467702E12, 24.0], [1.57468086E12, 60.0], [1.57467762E12, 26.0], [1.57467984E12, 26.0], [1.57467804E12, 49.0], [1.57467966E12, 21.0], [1.5746778E12, 27.0], [1.57467942E12, 764.0], [1.5746784E12, 21461.500000000004], [1.57467822E12, 68.0], [1.57468104E12, 20176.400000000005], [1.5746772E12, 40.0], [1.57467828E12, 70.0], [1.5746799E12, 31.0], [1.57467708E12, 31.0], [1.57468092E12, 61.0], [1.57467768E12, 26.0], [1.57467684E12, 14.0], [1.57468128E12, 59.0], [1.57468068E12, 35.0], [1.57467744E12, 82.70000000000005], [1.57467726E12, 41.0], [1.57467948E12, 3947.0], [1.57467786E12, 38.0], [1.57467732E12, 49.0], [1.57468116E12, 2128.8000000000015], [1.57467792E12, 34.0], [1.57467774E12, 32.0], [1.57467996E12, 32.0], [1.57468056E12, 5903.0], [1.57467834E12, 1542.9000000000005], [1.5746775E12, 99.69999999999999], [1.57467972E12, 21.0], [1.5746781E12, 55.0], [1.57468074E12, 39.0], [1.5746769E12, 18.0], [1.57467798E12, 34.0], [1.5746808E12, 46.0], [1.57467696E12, 21.0], [1.57467678E12, 19.0], [1.57468122E12, 60.0], [1.57468062E12, 31.0], [1.57467738E12, 76.0], [1.5746796E12, 659.0], [1.57468098E12, 67.0], [1.57467714E12, 43.0], [1.57467756E12, 1685.0000000000007], [1.57467816E12, 48.80000000000007], [1.57467978E12, 26.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57467702E12, 54.04000000000019], [1.57468086E12, 101.26999999999907], [1.57467762E12, 26754.03999999975], [1.57467984E12, 48.34000000000003], [1.57467804E12, 81.70000000000016], [1.57467966E12, 37.34000000000003], [1.5746778E12, 54.06000000000029], [1.57467942E12, 4287.4000000000015], [1.5746784E12, 27194.0], [1.57467822E12, 128.9800000000015], [1.57468104E12, 26545.0], [1.5746772E12, 66.36000000000013], [1.57467828E12, 100.44000000000005], [1.5746799E12, 61.509999999998854], [1.57467708E12, 45.70000000000016], [1.57468092E12, 103.28999999999996], [1.57467768E12, 50.0], [1.57467684E12, 41.309999999999945], [1.57468128E12, 94.84000000000015], [1.57468068E12, 66.02999999999975], [1.57467744E12, 134.85000000000002], [1.57467726E12, 65.36000000000013], [1.57467948E12, 3947.0], [1.57467786E12, 108.02000000000169], [1.57467732E12, 81.34000000000003], [1.57468116E12, 5746.0], [1.57467792E12, 63.020000000000095], [1.57467774E12, 62.06000000000029], [1.57467996E12, 57.66999999999996], [1.57468056E12, 6871.72], [1.57467834E12, 11168.869999999999], [1.5746775E12, 148.77999999999975], [1.57467972E12, 43.929999999999836], [1.5746781E12, 86.0200000000001], [1.57468074E12, 80.98999999999887], [1.5746769E12, 38.34000000000003], [1.57467798E12, 69.68000000000006], [1.5746808E12, 126.8199999999988], [1.57467696E12, 50.720000000000255], [1.57467678E12, 36.46999999999997], [1.57468122E12, 89.75], [1.57468062E12, 62.82000000000073], [1.57467738E12, 121.36000000000013], [1.5746796E12, 4117.97], [1.57468098E12, 91.11999999999989], [1.57467714E12, 90.08000000000038], [1.57467756E12, 37477.319999999905], [1.57467816E12, 115.65999999999997], [1.57467978E12, 39.96000000000015]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57467702E12, 26.0], [1.57468086E12, 66.54999999999995], [1.57467762E12, 33.0], [1.57467984E12, 30.0], [1.57467804E12, 57.69999999999993], [1.57467966E12, 25.0], [1.5746778E12, 31.0], [1.57467942E12, 2984.0], [1.5746784E12, 25369.999999999993], [1.57467822E12, 80.0], [1.57468104E12, 24988.89999999999], [1.5746772E12, 44.0], [1.57467828E12, 80.0], [1.5746799E12, 34.549999999999955], [1.57467708E12, 33.0], [1.57468092E12, 69.0], [1.57467768E12, 32.69999999999993], [1.57467684E12, 16.0], [1.57468128E12, 70.64999999999998], [1.57468068E12, 37.0], [1.57467744E12, 99.0], [1.57467726E12, 45.69999999999993], [1.57467948E12, 3947.0], [1.57467786E12, 47.69999999999993], [1.57467732E12, 54.0], [1.57468116E12, 3059.2], [1.57467792E12, 38.0], [1.57467774E12, 38.0], [1.57467996E12, 35.0], [1.57468056E12, 6331.0], [1.57467834E12, 4914.649999999999], [1.5746775E12, 112.34999999999997], [1.57467972E12, 25.0], [1.5746781E12, 65.0], [1.57468074E12, 41.0], [1.5746769E12, 20.699999999999932], [1.57467798E12, 40.0], [1.5746808E12, 52.0], [1.57467696E12, 24.0], [1.57467678E12, 23.0], [1.57468122E12, 68.25], [1.57468062E12, 32.0], [1.57467738E12, 91.69999999999993], [1.5746796E12, 2596.35], [1.57468098E12, 74.0], [1.57467714E12, 48.0], [1.57467756E12, 8461.899999999938], [1.57467816E12, 57.89999999999998], [1.57467978E12, 30.600000000000023]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57468128E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 486654.0, "series": [{"data": [[2.0, 27.5], [32.0, 5195.0], [33.0, 2900.0], [34.0, 3765.0], [38.0, 2812.0], [40.0, 2946.5], [42.0, 109.5], [45.0, 826.0], [47.0, 4979.0], [49.0, 5411.0], [54.0, 690.5], [59.0, 853.0], [62.0, 412.0], [63.0, 5091.0], [4.0, 35.0], [65.0, 3823.0], [76.0, 6560.5], [5.0, 26.5], [81.0, 539.0], [84.0, 5223.0], [93.0, 5226.0], [6.0, 45.0], [110.0, 4613.0], [7.0, 37.0], [8.0, 46.0], [9.0, 41.0], [146.0, 128.0], [10.0, 24.0], [11.0, 32.0], [12.0, 33.0], [13.0, 28.0], [14.0, 21.0], [15.0, 16.0], [16.0, 45.0], [1.0, 638.0], [17.0, 40.0], [19.0, 59.0], [20.0, 26.5], [21.0, 6865.0], [28.0, 4265.5], [31.0, 2071.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 4129.0], [3.0, 4012.5], [4.0, 4007.0], [5.0, 1.0], [93.0, 4113.0], [92.0, 4360.0], [94.0, 4008.0], [95.0, 486654.0], [6.0, 1.0], [7.0, 4003.0], [8.0, 1.0], [9.0, 4004.0], [146.0, 4005.0], [10.0, 4005.0], [163.0, 485800.0], [11.0, 4006.0], [12.0, 4006.0], [13.0, 4006.0], [223.0, 4102.0], [14.0, 4005.0], [15.0, 1.0], [16.0, 1.0], [1.0, 4098.5], [17.0, 0.0], [19.0, 4004.0], [21.0, 4005.0], [23.0, 31165.0], [24.0, 4298.0], [30.0, 4007.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 223.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 6865.0, "series": [{"data": [[2.0, 27.5], [32.0, 5195.0], [33.0, 2900.0], [34.0, 3765.0], [38.0, 2812.0], [40.0, 2946.5], [42.0, 109.5], [45.0, 826.0], [47.0, 4979.0], [49.0, 5411.0], [54.0, 690.5], [59.0, 853.0], [62.0, 412.0], [63.0, 5091.0], [4.0, 35.0], [65.0, 3823.0], [76.0, 6560.5], [5.0, 26.5], [81.0, 539.0], [84.0, 5223.0], [93.0, 5226.0], [6.0, 45.0], [110.0, 4613.0], [7.0, 37.0], [8.0, 46.0], [9.0, 41.0], [146.0, 128.0], [10.0, 24.0], [11.0, 32.0], [12.0, 33.0], [13.0, 28.0], [14.0, 21.0], [15.0, 16.0], [16.0, 45.0], [1.0, 638.0], [17.0, 40.0], [19.0, 59.0], [20.0, 26.5], [21.0, 6865.0], [28.0, 4265.5], [31.0, 2071.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [93.0, 0.0], [92.0, 0.0], [94.0, 0.0], [95.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [146.0, 0.0], [10.0, 0.0], [163.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [223.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [1.0, 0.0], [17.0, 0.0], [19.0, 0.0], [21.0, 0.0], [23.0, 0.0], [24.0, 0.0], [30.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 223.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.2333333333333334, "minX": 1.57467678E12, "maxY": 24.183333333333334, "series": [{"data": [[1.57467702E12, 11.083333333333334], [1.57467924E12, 11.15], [1.57468086E12, 11.133333333333333], [1.57467762E12, 11.3], [1.57467984E12, 11.083333333333334], [1.57467804E12, 11.083333333333334], [1.57468026E12, 11.133333333333333], [1.57467966E12, 11.083333333333334], [1.57467864E12, 11.083333333333334], [1.5746778E12, 11.083333333333334], [1.57467942E12, 7.85], [1.5746784E12, 9.85], [1.57468002E12, 2.2333333333333334], [1.57467822E12, 11.083333333333334], [1.57468104E12, 9.916666666666666], [1.57467882E12, 11.15], [1.57468044E12, 11.166666666666666], [1.5746772E12, 11.083333333333334], [1.57467828E12, 11.1], [1.5746805E12, 15.05], [1.5746799E12, 11.15], [1.57467888E12, 11.1], [1.5746787E12, 11.166666666666666], [1.57467708E12, 11.083333333333334], [1.57468092E12, 11.166666666666666], [1.57467768E12, 11.083333333333334], [1.5746793E12, 11.1], [1.57467684E12, 11.116666666666667], [1.57467846E12, 11.083333333333334], [1.57468128E12, 5.416666666666667], [1.57467906E12, 11.1], [1.57468068E12, 11.15], [1.57467744E12, 11.05], [1.57467726E12, 11.083333333333334], [1.57467948E12, 14.25], [1.5746811E12, 11.183333333333334], [1.57467786E12, 11.083333333333334], [1.57468008E12, 3.783333333333333], [1.57467894E12, 11.116666666666667], [1.57467732E12, 11.083333333333334], [1.57468116E12, 12.5], [1.57467792E12, 11.083333333333334], [1.57467954E12, 11.116666666666667], [1.57467774E12, 11.083333333333334], [1.57467996E12, 10.35], [1.57468056E12, 24.183333333333334], [1.57467834E12, 10.683333333333334], [1.5746775E12, 11.116666666666667], [1.57467972E12, 11.15], [1.57468032E12, 11.166666666666666], [1.5746781E12, 11.083333333333334], [1.57467852E12, 11.116666666666667], [1.57468074E12, 11.166666666666666], [1.5746769E12, 11.083333333333334], [1.57468014E12, 11.166666666666666], [1.57467912E12, 11.15], [1.57467798E12, 11.083333333333334], [1.5746808E12, 11.15], [1.57467696E12, 11.083333333333334], [1.57467858E12, 11.133333333333333], [1.5746802E12, 11.116666666666667], [1.57467678E12, 5.883333333333334], [1.574679E12, 11.133333333333333], [1.57468122E12, 11.25], [1.57468062E12, 11.1], [1.57467738E12, 11.083333333333334], [1.5746796E12, 12.633333333333333], [1.57467876E12, 11.083333333333334], [1.57468098E12, 10.95], [1.57468038E12, 11.083333333333334], [1.57467714E12, 11.083333333333334], [1.57467936E12, 11.133333333333333], [1.57467756E12, 10.866666666666667], [1.57467918E12, 11.1], [1.57467816E12, 11.033333333333333], [1.57467978E12, 11.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57468128E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.57467678E12, "maxY": 24.266666666666666, "series": [{"data": [[1.57467702E12, 11.083333333333334], [1.57468086E12, 11.133333333333333], [1.57467762E12, 11.416666666666666], [1.57467984E12, 11.083333333333334], [1.57467804E12, 11.083333333333334], [1.57467966E12, 11.083333333333334], [1.5746778E12, 11.083333333333334], [1.57467942E12, 7.316666666666666], [1.5746784E12, 0.6333333333333333], [1.57467822E12, 11.083333333333334], [1.57468104E12, 0.4666666666666667], [1.5746772E12, 11.083333333333334], [1.57467828E12, 8.783333333333333], [1.5746799E12, 11.133333333333333], [1.57467708E12, 11.083333333333334], [1.57468092E12, 11.166666666666666], [1.57467768E12, 11.083333333333334], [1.57467684E12, 11.133333333333333], [1.57468128E12, 5.433333333333334], [1.57468068E12, 11.166666666666666], [1.57467744E12, 11.033333333333333], [1.57467726E12, 11.083333333333334], [1.57467948E12, 0.05], [1.57467786E12, 11.083333333333334], [1.57467732E12, 11.083333333333334], [1.57468116E12, 10.35], [1.57467792E12, 11.083333333333334], [1.57467774E12, 11.083333333333334], [1.57467996E12, 10.166666666666666], [1.57468056E12, 24.266666666666666], [1.57467834E12, 3.033333333333333], [1.5746775E12, 7.866666666666666], [1.57467972E12, 11.133333333333333], [1.5746781E12, 11.083333333333334], [1.57468074E12, 11.166666666666666], [1.5746769E12, 11.083333333333334], [1.57467798E12, 11.083333333333334], [1.5746808E12, 11.133333333333333], [1.57467696E12, 11.083333333333334], [1.57467678E12, 5.866666666666666], [1.57468122E12, 11.233333333333333], [1.57468062E12, 11.083333333333334], [1.57467738E12, 11.083333333333334], [1.5746796E12, 6.666666666666667], [1.57468098E12, 8.683333333333334], [1.57467714E12, 11.083333333333334], [1.57467756E12, 4.016666666666667], [1.57467816E12, 11.016666666666667], [1.57467978E12, 11.116666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57467924E12, 11.133333333333333], [1.57467894E12, 11.133333333333333], [1.57468116E12, 2.9], [1.57467954E12, 11.133333333333333], [1.57468026E12, 11.116666666666667], [1.57468056E12, 4.55], [1.57467864E12, 11.083333333333334], [1.57468032E12, 11.166666666666666], [1.57467942E12, 0.03333333333333333], [1.5746784E12, 4.95], [1.57467852E12, 11.133333333333333], [1.57468104E12, 2.1], [1.57468014E12, 11.166666666666666], [1.57467912E12, 11.133333333333333], [1.57467882E12, 11.166666666666666], [1.57468044E12, 11.15], [1.5746805E12, 11.166666666666666], [1.57467888E12, 11.083333333333334], [1.57467858E12, 11.116666666666667], [1.5746802E12, 11.133333333333333], [1.574679E12, 11.116666666666667], [1.5746787E12, 11.166666666666666], [1.5746796E12, 6.7], [1.5746793E12, 11.116666666666667], [1.57467876E12, 11.083333333333334], [1.57467846E12, 11.083333333333334], [1.57468038E12, 11.1], [1.57467936E12, 11.133333333333333], [1.57467906E12, 11.116666666666667], [1.57467948E12, 13.083333333333334], [1.57467918E12, 11.116666666666667], [1.5746811E12, 11.2], [1.57468008E12, 1.5833333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.57467828E12, 2.316666666666667], [1.57468098E12, 2.0833333333333335], [1.5746775E12, 3.2666666666666666], [1.57467942E12, 0.05], [1.5746784E12, 0.15], [1.57468104E12, 0.2], [1.57467756E12, 0.7166666666666667], [1.57467834E12, 1.7666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}, {"data": [[1.5746805E12, 3.8833333333333333], [1.57468098E12, 0.08333333333333333], [1.5746784E12, 3.533333333333333], [1.57467948E12, 1.55], [1.57468104E12, 6.5], [1.57467756E12, 6.016666666666667], [1.57467834E12, 5.733333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57468128E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.57467678E12, "maxY": 24.266666666666666, "series": [{"data": [[1.57467924E12, 11.133333333333333], [1.57467894E12, 11.133333333333333], [1.57468116E12, 2.9], [1.57467954E12, 11.133333333333333], [1.57468026E12, 11.116666666666667], [1.57468056E12, 4.55], [1.57467864E12, 11.083333333333334], [1.57467834E12, 7.5], [1.5746775E12, 3.2666666666666666], [1.57468032E12, 11.166666666666666], [1.57467942E12, 0.08333333333333333], [1.5746784E12, 8.633333333333333], [1.57467852E12, 11.133333333333333], [1.57468104E12, 8.8], [1.57468014E12, 11.166666666666666], [1.57467912E12, 11.133333333333333], [1.57467882E12, 11.166666666666666], [1.57468044E12, 11.15], [1.57467828E12, 2.316666666666667], [1.5746805E12, 15.05], [1.57467888E12, 11.083333333333334], [1.57467858E12, 11.116666666666667], [1.5746802E12, 11.133333333333333], [1.574679E12, 11.116666666666667], [1.5746787E12, 11.166666666666666], [1.5746796E12, 6.7], [1.5746793E12, 11.116666666666667], [1.57467876E12, 11.083333333333334], [1.57468098E12, 2.1666666666666665], [1.57467846E12, 11.083333333333334], [1.57468038E12, 11.1], [1.57467936E12, 11.133333333333333], [1.57467906E12, 11.116666666666667], [1.57467948E12, 14.633333333333333], [1.57467756E12, 6.733333333333333], [1.57467918E12, 11.116666666666667], [1.5746811E12, 11.2], [1.57468008E12, 1.5833333333333333]], "isOverall": false, "label": "Save API HTTP Request-failure", "isController": false}, {"data": [[1.57467702E12, 11.083333333333334], [1.57468086E12, 11.133333333333333], [1.57467762E12, 11.416666666666666], [1.57467984E12, 11.083333333333334], [1.57467804E12, 11.083333333333334], [1.57467966E12, 11.083333333333334], [1.5746778E12, 11.083333333333334], [1.57467942E12, 7.316666666666666], [1.5746784E12, 0.6333333333333333], [1.57467822E12, 11.083333333333334], [1.57468104E12, 0.4666666666666667], [1.5746772E12, 11.083333333333334], [1.57467828E12, 8.783333333333333], [1.5746799E12, 11.133333333333333], [1.57467708E12, 11.083333333333334], [1.57468092E12, 11.166666666666666], [1.57467768E12, 11.083333333333334], [1.57467684E12, 11.133333333333333], [1.57468128E12, 5.433333333333334], [1.57468068E12, 11.166666666666666], [1.57467744E12, 11.033333333333333], [1.57467726E12, 11.083333333333334], [1.57467948E12, 0.05], [1.57467786E12, 11.083333333333334], [1.57467732E12, 11.083333333333334], [1.57468116E12, 10.35], [1.57467792E12, 11.083333333333334], [1.57467774E12, 11.083333333333334], [1.57467996E12, 10.166666666666666], [1.57468056E12, 24.266666666666666], [1.57467834E12, 3.033333333333333], [1.5746775E12, 7.866666666666666], [1.57467972E12, 11.133333333333333], [1.5746781E12, 11.083333333333334], [1.57468074E12, 11.166666666666666], [1.5746769E12, 11.083333333333334], [1.57467798E12, 11.083333333333334], [1.5746808E12, 11.133333333333333], [1.57467696E12, 11.083333333333334], [1.57467678E12, 5.866666666666666], [1.57468122E12, 11.233333333333333], [1.57468062E12, 11.083333333333334], [1.57467738E12, 11.083333333333334], [1.5746796E12, 6.666666666666667], [1.57468098E12, 8.683333333333334], [1.57467714E12, 11.083333333333334], [1.57467756E12, 4.016666666666667], [1.57467816E12, 11.016666666666667], [1.57467978E12, 11.116666666666667]], "isOverall": false, "label": "Save API HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57468128E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.57467678E12, "maxY": 24.266666666666666, "series": [{"data": [[1.57467702E12, 11.083333333333334], [1.57468086E12, 11.133333333333333], [1.57467762E12, 11.416666666666666], [1.57467984E12, 11.083333333333334], [1.57467804E12, 11.083333333333334], [1.57467966E12, 11.083333333333334], [1.5746778E12, 11.083333333333334], [1.57467942E12, 7.316666666666666], [1.5746784E12, 0.6333333333333333], [1.57467822E12, 11.083333333333334], [1.57468104E12, 0.4666666666666667], [1.5746772E12, 11.083333333333334], [1.57467828E12, 8.783333333333333], [1.5746799E12, 11.133333333333333], [1.57467708E12, 11.083333333333334], [1.57468092E12, 11.166666666666666], [1.57467768E12, 11.083333333333334], [1.57467684E12, 11.133333333333333], [1.57468128E12, 5.433333333333334], [1.57468068E12, 11.166666666666666], [1.57467744E12, 11.033333333333333], [1.57467726E12, 11.083333333333334], [1.57467948E12, 0.05], [1.57467786E12, 11.083333333333334], [1.57467732E12, 11.083333333333334], [1.57468116E12, 10.35], [1.57467792E12, 11.083333333333334], [1.57467774E12, 11.083333333333334], [1.57467996E12, 10.166666666666666], [1.57468056E12, 24.266666666666666], [1.57467834E12, 3.033333333333333], [1.5746775E12, 7.866666666666666], [1.57467972E12, 11.133333333333333], [1.5746781E12, 11.083333333333334], [1.57468074E12, 11.166666666666666], [1.5746769E12, 11.083333333333334], [1.57467798E12, 11.083333333333334], [1.5746808E12, 11.133333333333333], [1.57467696E12, 11.083333333333334], [1.57467678E12, 5.866666666666666], [1.57468122E12, 11.233333333333333], [1.57468062E12, 11.083333333333334], [1.57467738E12, 11.083333333333334], [1.5746796E12, 6.666666666666667], [1.57468098E12, 8.683333333333334], [1.57467714E12, 11.083333333333334], [1.57467756E12, 4.016666666666667], [1.57467816E12, 11.016666666666667], [1.57467978E12, 11.116666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57467924E12, 11.133333333333333], [1.57467894E12, 11.133333333333333], [1.57468116E12, 2.9], [1.57467954E12, 11.133333333333333], [1.57468026E12, 11.116666666666667], [1.57468056E12, 4.55], [1.57467864E12, 11.083333333333334], [1.57467834E12, 7.5], [1.5746775E12, 3.2666666666666666], [1.57468032E12, 11.166666666666666], [1.57467942E12, 0.08333333333333333], [1.5746784E12, 8.633333333333333], [1.57467852E12, 11.133333333333333], [1.57468104E12, 8.8], [1.57468014E12, 11.166666666666666], [1.57467912E12, 11.133333333333333], [1.57467882E12, 11.166666666666666], [1.57468044E12, 11.15], [1.57467828E12, 2.316666666666667], [1.5746805E12, 15.05], [1.57467888E12, 11.083333333333334], [1.57467858E12, 11.116666666666667], [1.5746802E12, 11.133333333333333], [1.574679E12, 11.116666666666667], [1.5746787E12, 11.166666666666666], [1.5746796E12, 6.7], [1.5746793E12, 11.116666666666667], [1.57467876E12, 11.083333333333334], [1.57468098E12, 2.1666666666666665], [1.57467846E12, 11.083333333333334], [1.57468038E12, 11.1], [1.57467936E12, 11.133333333333333], [1.57467906E12, 11.116666666666667], [1.57467948E12, 14.633333333333333], [1.57467756E12, 6.733333333333333], [1.57467918E12, 11.116666666666667], [1.5746811E12, 11.2], [1.57468008E12, 1.5833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57468128E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

