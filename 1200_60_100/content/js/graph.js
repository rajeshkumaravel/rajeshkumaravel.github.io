/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 49683.0, "series": [{"data": [[0.0, 10.0], [0.1, 17.0], [0.2, 21.0], [0.3, 25.0], [0.4, 30.0], [0.5, 32.0], [0.6, 35.0], [0.7, 39.0], [0.8, 42.0], [0.9, 47.0], [1.0, 54.0], [1.1, 58.0], [1.2, 61.0], [1.3, 64.0], [1.4, 66.0], [1.5, 70.0], [1.6, 73.0], [1.7, 77.0], [1.8, 79.0], [1.9, 81.0], [2.0, 82.0], [2.1, 84.0], [2.2, 85.0], [2.3, 88.0], [2.4, 94.0], [2.5, 96.0], [2.6, 98.0], [2.7, 99.0], [2.8, 103.0], [2.9, 105.0], [3.0, 106.0], [3.1, 109.0], [3.2, 111.0], [3.3, 112.0], [3.4, 114.0], [3.5, 115.0], [3.6, 116.0], [3.7, 118.0], [3.8, 124.0], [3.9, 127.0], [4.0, 130.0], [4.1, 132.0], [4.2, 133.0], [4.3, 134.0], [4.4, 135.0], [4.5, 136.0], [4.6, 136.0], [4.7, 138.0], [4.8, 139.0], [4.9, 142.0], [5.0, 143.0], [5.1, 145.0], [5.2, 146.0], [5.3, 147.0], [5.4, 149.0], [5.5, 150.0], [5.6, 151.0], [5.7, 152.0], [5.8, 153.0], [5.9, 154.0], [6.0, 155.0], [6.1, 156.0], [6.2, 157.0], [6.3, 157.0], [6.4, 158.0], [6.5, 158.0], [6.6, 159.0], [6.7, 159.0], [6.8, 160.0], [6.9, 161.0], [7.0, 161.0], [7.1, 162.0], [7.2, 162.0], [7.3, 163.0], [7.4, 163.0], [7.5, 164.0], [7.6, 165.0], [7.7, 166.0], [7.8, 166.0], [7.9, 167.0], [8.0, 168.0], [8.1, 169.0], [8.2, 170.0], [8.3, 171.0], [8.4, 172.0], [8.5, 172.0], [8.6, 172.0], [8.7, 173.0], [8.8, 173.0], [8.9, 174.0], [9.0, 174.0], [9.1, 175.0], [9.2, 176.0], [9.3, 176.0], [9.4, 177.0], [9.5, 177.0], [9.6, 178.0], [9.7, 178.0], [9.8, 178.0], [9.9, 179.0], [10.0, 179.0], [10.1, 180.0], [10.2, 180.0], [10.3, 181.0], [10.4, 181.0], [10.5, 182.0], [10.6, 182.0], [10.7, 182.0], [10.8, 184.0], [10.9, 185.0], [11.0, 186.0], [11.1, 187.0], [11.2, 188.0], [11.3, 188.0], [11.4, 189.0], [11.5, 190.0], [11.6, 190.0], [11.7, 191.0], [11.8, 192.0], [11.9, 192.0], [12.0, 192.0], [12.1, 193.0], [12.2, 194.0], [12.3, 196.0], [12.4, 197.0], [12.5, 199.0], [12.6, 200.0], [12.7, 201.0], [12.8, 202.0], [12.9, 203.0], [13.0, 203.0], [13.1, 204.0], [13.2, 205.0], [13.3, 206.0], [13.4, 207.0], [13.5, 208.0], [13.6, 209.0], [13.7, 210.0], [13.8, 211.0], [13.9, 212.0], [14.0, 213.0], [14.1, 214.0], [14.2, 215.0], [14.3, 215.0], [14.4, 216.0], [14.5, 216.0], [14.6, 216.0], [14.7, 217.0], [14.8, 218.0], [14.9, 218.0], [15.0, 218.0], [15.1, 219.0], [15.2, 219.0], [15.3, 220.0], [15.4, 220.0], [15.5, 221.0], [15.6, 221.0], [15.7, 222.0], [15.8, 223.0], [15.9, 223.0], [16.0, 224.0], [16.1, 224.0], [16.2, 225.0], [16.3, 225.0], [16.4, 226.0], [16.5, 226.0], [16.6, 226.0], [16.7, 226.0], [16.8, 227.0], [16.9, 227.0], [17.0, 227.0], [17.1, 227.0], [17.2, 228.0], [17.3, 228.0], [17.4, 228.0], [17.5, 229.0], [17.6, 229.0], [17.7, 229.0], [17.8, 229.0], [17.9, 230.0], [18.0, 230.0], [18.1, 230.0], [18.2, 231.0], [18.3, 231.0], [18.4, 232.0], [18.5, 232.0], [18.6, 233.0], [18.7, 234.0], [18.8, 234.0], [18.9, 235.0], [19.0, 235.0], [19.1, 235.0], [19.2, 235.0], [19.3, 236.0], [19.4, 236.0], [19.5, 236.0], [19.6, 236.0], [19.7, 236.0], [19.8, 237.0], [19.9, 237.0], [20.0, 237.0], [20.1, 238.0], [20.2, 238.0], [20.3, 238.0], [20.4, 239.0], [20.5, 239.0], [20.6, 240.0], [20.7, 241.0], [20.8, 241.0], [20.9, 242.0], [21.0, 243.0], [21.1, 243.0], [21.2, 244.0], [21.3, 244.0], [21.4, 244.0], [21.5, 245.0], [21.6, 245.0], [21.7, 246.0], [21.8, 247.0], [21.9, 248.0], [22.0, 249.0], [22.1, 249.0], [22.2, 250.0], [22.3, 251.0], [22.4, 252.0], [22.5, 253.0], [22.6, 254.0], [22.7, 255.0], [22.8, 256.0], [22.9, 257.0], [23.0, 257.0], [23.1, 258.0], [23.2, 258.0], [23.3, 259.0], [23.4, 260.0], [23.5, 261.0], [23.6, 261.0], [23.7, 262.0], [23.8, 263.0], [23.9, 264.0], [24.0, 265.0], [24.1, 265.0], [24.2, 265.0], [24.3, 266.0], [24.4, 266.0], [24.5, 267.0], [24.6, 267.0], [24.7, 268.0], [24.8, 269.0], [24.9, 269.0], [25.0, 270.0], [25.1, 271.0], [25.2, 271.0], [25.3, 271.0], [25.4, 272.0], [25.5, 272.0], [25.6, 273.0], [25.7, 274.0], [25.8, 274.0], [25.9, 275.0], [26.0, 275.0], [26.1, 276.0], [26.2, 276.0], [26.3, 277.0], [26.4, 277.0], [26.5, 278.0], [26.6, 278.0], [26.7, 279.0], [26.8, 279.0], [26.9, 280.0], [27.0, 280.0], [27.1, 281.0], [27.2, 281.0], [27.3, 281.0], [27.4, 282.0], [27.5, 283.0], [27.6, 284.0], [27.7, 285.0], [27.8, 285.0], [27.9, 286.0], [28.0, 286.0], [28.1, 286.0], [28.2, 287.0], [28.3, 287.0], [28.4, 287.0], [28.5, 288.0], [28.6, 288.0], [28.7, 288.0], [28.8, 289.0], [28.9, 289.0], [29.0, 289.0], [29.1, 289.0], [29.2, 290.0], [29.3, 290.0], [29.4, 290.0], [29.5, 291.0], [29.6, 291.0], [29.7, 292.0], [29.8, 292.0], [29.9, 293.0], [30.0, 294.0], [30.1, 294.0], [30.2, 295.0], [30.3, 295.0], [30.4, 296.0], [30.5, 296.0], [30.6, 297.0], [30.7, 297.0], [30.8, 297.0], [30.9, 298.0], [31.0, 298.0], [31.1, 298.0], [31.2, 298.0], [31.3, 299.0], [31.4, 299.0], [31.5, 299.0], [31.6, 300.0], [31.7, 300.0], [31.8, 301.0], [31.9, 301.0], [32.0, 302.0], [32.1, 303.0], [32.2, 303.0], [32.3, 304.0], [32.4, 304.0], [32.5, 304.0], [32.6, 305.0], [32.7, 305.0], [32.8, 305.0], [32.9, 305.0], [33.0, 306.0], [33.1, 306.0], [33.2, 306.0], [33.3, 307.0], [33.4, 307.0], [33.5, 307.0], [33.6, 308.0], [33.7, 308.0], [33.8, 308.0], [33.9, 309.0], [34.0, 309.0], [34.1, 309.0], [34.2, 310.0], [34.3, 311.0], [34.4, 312.0], [34.5, 312.0], [34.6, 313.0], [34.7, 313.0], [34.8, 314.0], [34.9, 314.0], [35.0, 315.0], [35.1, 316.0], [35.2, 317.0], [35.3, 318.0], [35.4, 319.0], [35.5, 319.0], [35.6, 320.0], [35.7, 320.0], [35.8, 320.0], [35.9, 320.0], [36.0, 321.0], [36.1, 321.0], [36.2, 321.0], [36.3, 322.0], [36.4, 322.0], [36.5, 323.0], [36.6, 324.0], [36.7, 324.0], [36.8, 324.0], [36.9, 325.0], [37.0, 325.0], [37.1, 326.0], [37.2, 327.0], [37.3, 327.0], [37.4, 328.0], [37.5, 329.0], [37.6, 331.0], [37.7, 332.0], [37.8, 333.0], [37.9, 335.0], [38.0, 336.0], [38.1, 336.0], [38.2, 337.0], [38.3, 338.0], [38.4, 339.0], [38.5, 339.0], [38.6, 341.0], [38.7, 342.0], [38.8, 343.0], [38.9, 345.0], [39.0, 346.0], [39.1, 347.0], [39.2, 348.0], [39.3, 348.0], [39.4, 349.0], [39.5, 350.0], [39.6, 352.0], [39.7, 353.0], [39.8, 354.0], [39.9, 356.0], [40.0, 357.0], [40.1, 357.0], [40.2, 359.0], [40.3, 361.0], [40.4, 362.0], [40.5, 363.0], [40.6, 366.0], [40.7, 367.0], [40.8, 369.0], [40.9, 371.0], [41.0, 373.0], [41.1, 374.0], [41.2, 375.0], [41.3, 376.0], [41.4, 377.0], [41.5, 379.0], [41.6, 380.0], [41.7, 381.0], [41.8, 382.0], [41.9, 382.0], [42.0, 383.0], [42.1, 384.0], [42.2, 385.0], [42.3, 386.0], [42.4, 388.0], [42.5, 389.0], [42.6, 390.0], [42.7, 392.0], [42.8, 393.0], [42.9, 396.0], [43.0, 398.0], [43.1, 400.0], [43.2, 403.0], [43.3, 405.0], [43.4, 408.0], [43.5, 410.0], [43.6, 412.0], [43.7, 416.0], [43.8, 420.0], [43.9, 426.0], [44.0, 429.0], [44.1, 433.0], [44.2, 436.0], [44.3, 440.0], [44.4, 447.0], [44.5, 455.0], [44.6, 468.0], [44.7, 491.0], [44.8, 526.0], [44.9, 529.0], [45.0, 558.0], [45.1, 561.0], [45.2, 577.0], [45.3, 613.0], [45.4, 643.0], [45.5, 707.0], [45.6, 712.0], [45.7, 714.0], [45.8, 722.0], [45.9, 723.0], [46.0, 910.0], [46.1, 911.0], [46.2, 925.0], [46.3, 950.0], [46.4, 978.0], [46.5, 979.0], [46.6, 985.0], [46.7, 987.0], [46.8, 995.0], [46.9, 1038.0], [47.0, 1052.0], [47.1, 1088.0], [47.2, 1091.0], [47.3, 1107.0], [47.4, 1120.0], [47.5, 1136.0], [47.6, 1168.0], [47.7, 1179.0], [47.8, 1191.0], [47.9, 1193.0], [48.0, 1196.0], [48.1, 1197.0], [48.2, 1198.0], [48.3, 1199.0], [48.4, 1204.0], [48.5, 1214.0], [48.6, 1218.0], [48.7, 1226.0], [48.8, 1236.0], [48.9, 1242.0], [49.0, 1256.0], [49.1, 1266.0], [49.2, 1277.0], [49.3, 1286.0], [49.4, 1296.0], [49.5, 1315.0], [49.6, 1318.0], [49.7, 1320.0], [49.8, 1327.0], [49.9, 1340.0], [50.0, 1343.0], [50.1, 1351.0], [50.2, 1352.0], [50.3, 1352.0], [50.4, 1367.0], [50.5, 1368.0], [50.6, 1394.0], [50.7, 1395.0], [50.8, 1399.0], [50.9, 1399.0], [51.0, 1407.0], [51.1, 1416.0], [51.2, 1427.0], [51.3, 1437.0], [51.4, 1440.0], [51.5, 1442.0], [51.6, 1447.0], [51.7, 1448.0], [51.8, 1453.0], [51.9, 1460.0], [52.0, 1473.0], [52.1, 1494.0], [52.2, 1498.0], [52.3, 1509.0], [52.4, 1510.0], [52.5, 1511.0], [52.6, 1511.0], [52.7, 1517.0], [52.8, 1518.0], [52.9, 1531.0], [53.0, 1538.0], [53.1, 1539.0], [53.2, 1540.0], [53.3, 1562.0], [53.4, 1574.0], [53.5, 1584.0], [53.6, 1584.0], [53.7, 1585.0], [53.8, 1588.0], [53.9, 1589.0], [54.0, 1590.0], [54.1, 1603.0], [54.2, 1605.0], [54.3, 1606.0], [54.4, 1607.0], [54.5, 1607.0], [54.6, 1610.0], [54.7, 1616.0], [54.8, 1617.0], [54.9, 1619.0], [55.0, 1621.0], [55.1, 1622.0], [55.2, 1624.0], [55.3, 1631.0], [55.4, 1636.0], [55.5, 1645.0], [55.6, 1658.0], [55.7, 1665.0], [55.8, 1680.0], [55.9, 1681.0], [56.0, 1688.0], [56.1, 1696.0], [56.2, 1698.0], [56.3, 1704.0], [56.4, 1706.0], [56.5, 1708.0], [56.6, 1709.0], [56.7, 1717.0], [56.8, 1726.0], [56.9, 1727.0], [57.0, 1732.0], [57.1, 1732.0], [57.2, 1733.0], [57.3, 1734.0], [57.4, 1740.0], [57.5, 1758.0], [57.6, 1768.0], [57.7, 1773.0], [57.8, 1785.0], [57.9, 1791.0], [58.0, 1795.0], [58.1, 1797.0], [58.2, 1799.0], [58.3, 1805.0], [58.4, 1811.0], [58.5, 1812.0], [58.6, 1813.0], [58.7, 1814.0], [58.8, 1825.0], [58.9, 1831.0], [59.0, 1834.0], [59.1, 1836.0], [59.2, 1842.0], [59.3, 1854.0], [59.4, 1866.0], [59.5, 1867.0], [59.6, 1878.0], [59.7, 1902.0], [59.8, 1911.0], [59.9, 1931.0], [60.0, 1941.0], [60.1, 1945.0], [60.2, 1946.0], [60.3, 1947.0], [60.4, 1960.0], [60.5, 1961.0], [60.6, 1962.0], [60.7, 1963.0], [60.8, 1964.0], [60.9, 1964.0], [61.0, 1965.0], [61.1, 1965.0], [61.2, 1966.0], [61.3, 1975.0], [61.4, 1983.0], [61.5, 1999.0], [61.6, 2020.0], [61.7, 2033.0], [61.8, 2038.0], [61.9, 2039.0], [62.0, 2040.0], [62.1, 2048.0], [62.2, 2060.0], [62.3, 2071.0], [62.4, 2073.0], [62.5, 2075.0], [62.6, 2078.0], [62.7, 2082.0], [62.8, 2088.0], [62.9, 2089.0], [63.0, 2091.0], [63.1, 2107.0], [63.2, 2109.0], [63.3, 2110.0], [63.4, 2111.0], [63.5, 2112.0], [63.6, 2118.0], [63.7, 2130.0], [63.8, 2137.0], [63.9, 2141.0], [64.0, 2154.0], [64.1, 2156.0], [64.2, 2157.0], [64.3, 2158.0], [64.4, 2158.0], [64.5, 2159.0], [64.6, 2159.0], [64.7, 2159.0], [64.8, 2172.0], [64.9, 2173.0], [65.0, 2174.0], [65.1, 2187.0], [65.2, 2192.0], [65.3, 2196.0], [65.4, 2196.0], [65.5, 2196.0], [65.6, 2197.0], [65.7, 2200.0], [65.8, 2202.0], [65.9, 2203.0], [66.0, 2214.0], [66.1, 2215.0], [66.2, 2216.0], [66.3, 2219.0], [66.4, 2220.0], [66.5, 2221.0], [66.6, 2223.0], [66.7, 2224.0], [66.8, 2224.0], [66.9, 2224.0], [67.0, 2225.0], [67.1, 2226.0], [67.2, 2226.0], [67.3, 2226.0], [67.4, 2227.0], [67.5, 2233.0], [67.6, 2236.0], [67.7, 2237.0], [67.8, 2237.0], [67.9, 2238.0], [68.0, 2239.0], [68.1, 2241.0], [68.2, 2246.0], [68.3, 2266.0], [68.4, 2273.0], [68.5, 2274.0], [68.6, 2276.0], [68.7, 2277.0], [68.8, 2280.0], [68.9, 2282.0], [69.0, 2286.0], [69.1, 2287.0], [69.2, 2291.0], [69.3, 2292.0], [69.4, 2293.0], [69.5, 2293.0], [69.6, 2294.0], [69.7, 2295.0], [69.8, 2295.0], [69.9, 2316.0], [70.0, 2370.0], [70.1, 2376.0], [70.2, 2387.0], [70.3, 2412.0], [70.4, 2413.0], [70.5, 2414.0], [70.6, 2415.0], [70.7, 2416.0], [70.8, 2420.0], [70.9, 2421.0], [71.0, 2423.0], [71.1, 2427.0], [71.2, 2430.0], [71.3, 2438.0], [71.4, 2442.0], [71.5, 2447.0], [71.6, 2462.0], [71.7, 2463.0], [71.8, 2464.0], [71.9, 2464.0], [72.0, 2475.0], [72.1, 2477.0], [72.2, 2478.0], [72.3, 2478.0], [72.4, 2478.0], [72.5, 2478.0], [72.6, 2480.0], [72.7, 2484.0], [72.8, 2484.0], [72.9, 2489.0], [73.0, 2505.0], [73.1, 2510.0], [73.2, 2513.0], [73.3, 2515.0], [73.4, 2516.0], [73.5, 2516.0], [73.6, 2517.0], [73.7, 2530.0], [73.8, 2541.0], [73.9, 2542.0], [74.0, 2558.0], [74.1, 2578.0], [74.2, 2579.0], [74.3, 2580.0], [74.4, 2580.0], [74.5, 2588.0], [74.6, 2597.0], [74.7, 2598.0], [74.8, 2599.0], [74.9, 2599.0], [75.0, 2612.0], [75.1, 2617.0], [75.2, 2677.0], [75.3, 2682.0], [75.4, 2688.0], [75.5, 2690.0], [75.6, 2713.0], [75.7, 2714.0], [75.8, 2714.0], [75.9, 2714.0], [76.0, 2715.0], [76.1, 2715.0], [76.2, 2716.0], [76.3, 2716.0], [76.4, 2716.0], [76.5, 2716.0], [76.6, 2717.0], [76.7, 2717.0], [76.8, 2718.0], [76.9, 2718.0], [77.0, 2721.0], [77.1, 2737.0], [77.2, 2743.0], [77.3, 2745.0], [77.4, 2747.0], [77.5, 2747.0], [77.6, 2748.0], [77.7, 2748.0], [77.8, 2749.0], [77.9, 2749.0], [78.0, 2763.0], [78.1, 2764.0], [78.2, 2790.0], [78.3, 2862.0], [78.4, 2892.0], [78.5, 2893.0], [78.6, 2893.0], [78.7, 2939.0], [78.8, 2958.0], [78.9, 2988.0], [79.0, 2996.0], [79.1, 3023.0], [79.2, 3024.0], [79.3, 3024.0], [79.4, 3030.0], [79.5, 3053.0], [79.6, 3054.0], [79.7, 3054.0], [79.8, 3056.0], [79.9, 3062.0], [80.0, 3064.0], [80.1, 3064.0], [80.2, 3065.0], [80.3, 3065.0], [80.4, 3067.0], [80.5, 3089.0], [80.6, 3109.0], [80.7, 3110.0], [80.8, 3113.0], [80.9, 3114.0], [81.0, 3115.0], [81.1, 3117.0], [81.2, 3117.0], [81.3, 3129.0], [81.4, 3133.0], [81.5, 3135.0], [81.6, 3137.0], [81.7, 3139.0], [81.8, 3147.0], [81.9, 3147.0], [82.0, 3148.0], [82.1, 3151.0], [82.2, 3152.0], [82.3, 3152.0], [82.4, 3153.0], [82.5, 3154.0], [82.6, 3210.0], [82.7, 3218.0], [82.8, 3219.0], [82.9, 3219.0], [83.0, 3219.0], [83.1, 3223.0], [83.2, 3226.0], [83.3, 3228.0], [83.4, 3231.0], [83.5, 3233.0], [83.6, 3233.0], [83.7, 3234.0], [83.8, 3238.0], [83.9, 3296.0], [84.0, 3299.0], [84.1, 3312.0], [84.2, 3363.0], [84.3, 3365.0], [84.4, 3368.0], [84.5, 3405.0], [84.6, 3405.0], [84.7, 3406.0], [84.8, 3407.0], [84.9, 3407.0], [85.0, 3409.0], [85.1, 3461.0], [85.2, 3463.0], [85.3, 3465.0], [85.4, 3467.0], [85.5, 3468.0], [85.6, 3469.0], [85.7, 3542.0], [85.8, 3563.0], [85.9, 3570.0], [86.0, 3579.0], [86.1, 3584.0], [86.2, 3587.0], [86.3, 3595.0], [86.4, 3599.0], [86.5, 3606.0], [86.6, 3614.0], [86.7, 3680.0], [86.8, 3735.0], [86.9, 3742.0], [87.0, 3758.0], [87.1, 3769.0], [87.2, 3796.0], [87.3, 3806.0], [87.4, 3859.0], [87.5, 3947.0], [87.6, 3949.0], [87.7, 3950.0], [87.8, 3952.0], [87.9, 3994.0], [88.0, 3998.0], [88.1, 4029.0], [88.2, 4103.0], [88.3, 4105.0], [88.4, 4127.0], [88.5, 4131.0], [88.6, 4137.0], [88.7, 4142.0], [88.8, 4394.0], [88.9, 4494.0], [89.0, 4495.0], [89.1, 4495.0], [89.2, 4496.0], [89.3, 4496.0], [89.4, 4509.0], [89.5, 5129.0], [89.6, 5147.0], [89.7, 5696.0], [89.8, 5697.0], [89.9, 5697.0], [90.0, 5697.0], [90.1, 5698.0], [90.2, 5706.0], [90.3, 5707.0], [90.4, 5943.0], [90.5, 5944.0], [90.6, 6583.0], [90.7, 7088.0], [90.8, 7091.0], [90.9, 7137.0], [91.0, 7160.0], [91.1, 7350.0], [91.2, 7352.0], [91.3, 8103.0], [91.4, 8155.0], [91.5, 8166.0], [91.6, 9792.0], [91.7, 9807.0], [91.8, 9812.0], [91.9, 9818.0], [92.0, 9826.0], [92.1, 10523.0], [92.2, 10845.0], [92.3, 27965.0], [92.4, 28692.0], [92.5, 29673.0], [92.6, 30307.0], [92.7, 31074.0], [92.8, 31744.0], [92.9, 32573.0], [93.0, 33148.0], [93.1, 33881.0], [93.2, 34621.0], [93.3, 35362.0], [93.4, 36090.0], [93.5, 36926.0], [93.6, 37167.0], [93.7, 37214.0], [93.8, 37220.0], [93.9, 37224.0], [94.0, 38012.0], [94.1, 38759.0], [94.2, 38928.0], [94.3, 38935.0], [94.4, 39050.0], [94.5, 39133.0], [94.6, 39135.0], [94.7, 39183.0], [94.8, 39188.0], [94.9, 39194.0], [95.0, 39795.0], [95.1, 40490.0], [95.2, 40525.0], [95.3, 40593.0], [95.4, 40597.0], [95.5, 40600.0], [95.6, 40606.0], [95.7, 40641.0], [95.8, 40649.0], [95.9, 40658.0], [96.0, 40663.0], [96.1, 40718.0], [96.2, 40735.0], [96.3, 40759.0], [96.4, 41344.0], [96.5, 41508.0], [96.6, 41512.0], [96.7, 41578.0], [96.8, 41694.0], [96.9, 41708.0], [97.0, 42327.0], [97.1, 42336.0], [97.2, 42373.0], [97.3, 42378.0], [97.4, 42460.0], [97.5, 42560.0], [97.6, 42850.0], [97.7, 42857.0], [97.8, 42861.0], [97.9, 42911.0], [98.0, 42919.0], [98.1, 42929.0], [98.2, 42976.0], [98.3, 43158.0], [98.4, 43167.0], [98.5, 43174.0], [98.6, 43194.0], [98.7, 43269.0], [98.8, 43452.0], [98.9, 43595.0], [99.0, 43608.0], [99.1, 43685.0], [99.2, 43712.0], [99.3, 43719.0], [99.4, 44251.0], [99.5, 45494.0], [99.6, 45526.0], [99.7, 45633.0], [99.8, 45652.0], [99.9, 46448.0], [100.0, 49683.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2938.0, "series": [{"data": [[0.0, 421.0], [100.0, 1524.0], [34500.0, 4.0], [32900.0, 3.0], [34100.0, 2.0], [33300.0, 2.0], [33700.0, 1.0], [36500.0, 2.0], [35700.0, 2.0], [35300.0, 4.0], [34900.0, 3.0], [36100.0, 1.0], [38900.0, 38.0], [37300.0, 1.0], [38100.0, 3.0], [36900.0, 2.0], [37700.0, 2.0], [38500.0, 3.0], [39700.0, 4.0], [39300.0, 1.0], [40900.0, 1.0], [40500.0, 46.0], [42500.0, 12.0], [42900.0, 62.0], [42100.0, 2.0], [41700.0, 8.0], [41300.0, 2.0], [44500.0, 2.0], [44100.0, 4.0], [43700.0, 31.0], [43300.0, 3.0], [46500.0, 3.0], [45700.0, 5.0], [45300.0, 2.0], [200.0, 2938.0], [300.0, 1786.0], [400.0, 262.0], [500.0, 84.0], [600.0, 29.0], [700.0, 78.0], [800.0, 2.0], [900.0, 139.0], [1000.0, 63.0], [1100.0, 158.0], [1200.0, 170.0], [1300.0, 235.0], [1400.0, 204.0], [1500.0, 282.0], [1600.0, 334.0], [1700.0, 307.0], [1800.0, 228.0], [1900.0, 283.0], [2000.0, 241.0], [2100.0, 406.0], [2200.0, 651.0], [2300.0, 54.0], [2400.0, 427.0], [2500.0, 298.0], [2600.0, 96.0], [2700.0, 417.0], [2800.0, 59.0], [2900.0, 67.0], [3000.0, 234.0], [3100.0, 314.0], [3200.0, 221.0], [3300.0, 64.0], [3400.0, 193.0], [3500.0, 115.0], [3600.0, 54.0], [3700.0, 74.0], [3800.0, 32.0], [3900.0, 95.0], [4000.0, 22.0], [4100.0, 84.0], [4300.0, 7.0], [4200.0, 4.0], [4500.0, 15.0], [4400.0, 86.0], [5000.0, 1.0], [5100.0, 25.0], [5600.0, 75.0], [5500.0, 7.0], [5700.0, 28.0], [5800.0, 1.0], [6000.0, 7.0], [5900.0, 25.0], [6100.0, 1.0], [6400.0, 1.0], [6500.0, 15.0], [7100.0, 32.0], [7000.0, 27.0], [7300.0, 27.0], [8000.0, 10.0], [8100.0, 43.0], [8700.0, 1.0], [8600.0, 2.0], [8500.0, 1.0], [9600.0, 1.0], [9700.0, 6.0], [9800.0, 71.0], [10500.0, 6.0], [10400.0, 1.0], [10800.0, 11.0], [11500.0, 9.0], [28000.0, 2.0], [28200.0, 2.0], [27800.0, 2.0], [28400.0, 3.0], [28600.0, 2.0], [28800.0, 2.0], [29000.0, 2.0], [29400.0, 2.0], [29600.0, 2.0], [30000.0, 5.0], [30400.0, 3.0], [29800.0, 2.0], [30200.0, 1.0], [30600.0, 2.0], [30800.0, 2.0], [31000.0, 2.0], [31200.0, 2.0], [31400.0, 2.0], [31600.0, 3.0], [32200.0, 1.0], [32400.0, 3.0], [32600.0, 3.0], [31800.0, 2.0], [32000.0, 1.0], [33600.0, 4.0], [34800.0, 4.0], [32800.0, 2.0], [33200.0, 2.0], [34000.0, 1.0], [36000.0, 4.0], [36400.0, 2.0], [36800.0, 2.0], [35200.0, 1.0], [35600.0, 1.0], [38800.0, 3.0], [37200.0, 42.0], [38000.0, 2.0], [37600.0, 2.0], [38400.0, 2.0], [39200.0, 2.0], [39600.0, 2.0], [40800.0, 3.0], [40400.0, 15.0], [42800.0, 44.0], [42400.0, 11.0], [41600.0, 23.0], [42000.0, 3.0], [41200.0, 2.0], [43600.0, 30.0], [44000.0, 2.0], [44400.0, 2.0], [43200.0, 2.0], [45600.0, 21.0], [45200.0, 1.0], [46400.0, 7.0], [48400.0, 1.0], [49600.0, 1.0], [34700.0, 1.0], [33100.0, 2.0], [34300.0, 1.0], [33500.0, 2.0], [33900.0, 2.0], [36300.0, 2.0], [36700.0, 2.0], [35500.0, 2.0], [38700.0, 3.0], [37500.0, 2.0], [38300.0, 2.0], [37900.0, 2.0], [37100.0, 18.0], [39900.0, 2.0], [39500.0, 3.0], [39100.0, 77.0], [40700.0, 44.0], [40300.0, 1.0], [41100.0, 3.0], [41900.0, 3.0], [41500.0, 43.0], [42700.0, 1.0], [42300.0, 56.0], [43500.0, 13.0], [43900.0, 2.0], [43100.0, 72.0], [44700.0, 1.0], [44300.0, 1.0], [45500.0, 29.0], [48700.0, 2.0], [27900.0, 2.0], [27700.0, 3.0], [28100.0, 2.0], [28300.0, 2.0], [28500.0, 2.0], [29100.0, 3.0], [28700.0, 2.0], [28900.0, 1.0], [29500.0, 2.0], [30500.0, 2.0], [30300.0, 2.0], [29700.0, 3.0], [30700.0, 2.0], [29900.0, 3.0], [30900.0, 2.0], [31100.0, 2.0], [31300.0, 2.0], [31500.0, 3.0], [31700.0, 2.0], [32100.0, 2.0], [32300.0, 2.0], [32500.0, 1.0], [32700.0, 3.0], [31900.0, 3.0], [33000.0, 3.0], [34600.0, 3.0], [33800.0, 3.0], [34200.0, 3.0], [33400.0, 1.0], [36200.0, 2.0], [35800.0, 3.0], [36600.0, 2.0], [35400.0, 2.0], [35000.0, 3.0], [37000.0, 3.0], [37800.0, 2.0], [37400.0, 1.0], [38200.0, 1.0], [38600.0, 2.0], [39800.0, 4.0], [39400.0, 2.0], [40600.0, 89.0], [40200.0, 4.0], [39000.0, 6.0], [42600.0, 3.0], [41800.0, 2.0], [43000.0, 2.0], [41000.0, 2.0], [41400.0, 3.0], [42200.0, 3.0], [44200.0, 4.0], [43800.0, 2.0], [43400.0, 18.0], [46600.0, 2.0], [45400.0, 6.0], [46200.0, 3.0], [48600.0, 2.0], [47800.0, 1.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 49600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1166.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6931.0, "series": [{"data": [[0.0, 6931.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1166.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6198.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1195.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 53.76981132075461, "minX": 1.57676472E12, "maxY": 1125.8523769808166, "series": [{"data": [[1.57676478E12, 422.7891504605936], [1.57676472E12, 53.76981132075461], [1.57676484E12, 1125.8523769808166]], "isOverall": false, "label": "1. Save API", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676484E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 12.428571428571429, "minX": 1.0, "maxY": 48698.0, "series": [{"data": [[2.0, 12.428571428571429], [3.0, 17.125], [4.0, 19.099999999999998], [5.0, 19.846153846153847], [6.0, 23.1], [7.0, 30.583333333333332], [8.0, 31.166666666666668], [9.0, 33.99999999999999], [10.0, 34.5], [11.0, 48.07692307692307], [12.0, 37.49999999999999], [13.0, 45.727272727272734], [14.0, 51.07142857142858], [15.0, 69.28571428571428], [16.0, 62.86666666666666], [17.0, 53.125], [18.0, 57.93333333333334], [19.0, 84.28571428571428], [20.0, 92.33333333333333], [21.0, 70.43750000000001], [22.0, 68.63157894736842], [23.0, 69.18181818181817], [24.0, 69.65000000000002], [25.0, 78.5], [26.0, 85.0909090909091], [27.0, 89.47058823529412], [28.0, 83.36842105263158], [29.0, 93.30000000000001], [30.0, 92.1], [31.0, 96.5], [32.0, 103.14285714285715], [33.0, 98.8], [34.0, 87.09523809523809], [35.0, 115.0], [36.0, 114.26086956521738], [37.0, 103.875], [38.0, 105.85185185185183], [39.0, 117.22222222222223], [40.0, 111.71428571428572], [41.0, 121.5], [42.0, 115.88888888888887], [43.0, 131.85714285714286], [44.0, 126.13333333333334], [45.0, 121.18518518518518], [46.0, 129.375], [47.0, 147.85714285714283], [48.0, 154.84999999999997], [49.0, 176.375], [50.0, 157.6923076923077], [51.0, 153.60000000000002], [52.0, 153.83333333333331], [53.0, 134.66666666666669], [54.0, 145.0909090909091], [55.0, 157.66666666666666], [56.0, 157.0], [57.0, 170.21428571428572], [58.0, 171.9090909090909], [59.0, 160.95238095238093], [60.0, 145.59090909090907], [61.0, 182.5], [62.0, 166.66666666666669], [63.0, 168.08333333333331], [64.0, 164.9090909090909], [65.0, 168.11111111111111], [66.0, 172.05555555555551], [67.0, 187.83333333333334], [68.0, 178.29411764705878], [69.0, 188.3684210526316], [70.0, 182.03448275862073], [71.0, 191.85714285714286], [72.0, 198.61538461538458], [73.0, 181.21621621621622], [74.0, 209.8181818181818], [75.0, 178.59090909090912], [76.0, 159.48780487804876], [77.0, 161.27272727272728], [78.0, 147.45833333333331], [79.0, 145.0714285714286], [80.0, 181.5], [81.0, 175.2941176470588], [82.0, 173.4545454545455], [83.0, 196.13888888888889], [84.0, 133.75000000000003], [85.0, 171.11428571428567], [86.0, 170.0], [87.0, 184.2972972972973], [88.0, 204.125], [89.0, 173.61764705882354], [90.0, 170.35999999999999], [91.0, 180.95000000000002], [92.0, 168.5357142857143], [93.0, 182.38709677419357], [94.0, 185.3157894736842], [95.0, 179.15789473684208], [96.0, 196.94117647058823], [97.0, 177.67741935483872], [98.0, 168.86363636363635], [99.0, 178.68181818181822], [100.0, 179.82978723404256], [101.0, 207.16666666666669], [102.0, 190.66666666666666], [103.0, 186.25806451612905], [104.0, 215.375], [105.0, 216.39393939393943], [106.0, 188.86666666666667], [107.0, 192.37037037037035], [108.0, 170.9], [109.0, 199.44444444444446], [110.0, 199.4], [111.0, 197.0816326530612], [112.0, 207.36666666666665], [113.0, 191.69230769230768], [114.0, 206.125], [115.0, 195.46808510638297], [116.0, 204.14705882352945], [117.0, 209.55555555555557], [118.0, 184.42857142857142], [119.0, 211.62962962962962], [120.0, 206.68085106382983], [121.0, 223.73684210526315], [122.0, 231.0], [123.0, 229.88], [124.0, 244.5], [125.0, 262.55813953488376], [126.0, 285.0], [127.0, 253.4912280701754], [128.0, 279.42857142857144], [129.0, 221.6428571428571], [130.0, 268.97727272727263], [131.0, 212.60000000000005], [132.0, 254.69565217391306], [133.0, 294.6666666666667], [134.0, 275.50000000000006], [135.0, 244.26923076923075], [136.0, 299.0632911392406], [137.0, 249.0], [138.0, 267.04166666666663], [139.0, 236.6585365853659], [140.0, 206.49999999999997], [141.0, 231.29411764705887], [142.0, 229.50000000000003], [143.0, 263.98275862068965], [144.0, 262.0588235294117], [145.0, 228.33333333333337], [146.0, 271.0689655172415], [147.0, 224.40540540540542], [148.0, 233.64999999999998], [149.0, 255.88], [150.0, 273.72727272727263], [151.0, 244.77142857142857], [152.0, 237.45833333333331], [153.0, 266.1818181818182], [154.0, 235.95652173913044], [155.0, 240.25], [156.0, 241.53999999999994], [157.0, 230.25], [158.0, 244.61290322580643], [159.0, 244.91428571428574], [160.0, 242.29999999999998], [161.0, 237.60416666666666], [162.0, 267.55172413793105], [163.0, 248.8095238095238], [164.0, 257.74999999999994], [165.0, 293.08333333333337], [166.0, 323.84615384615387], [167.0, 312.6190476190476], [168.0, 325.23913043478274], [169.0, 327.65217391304344], [170.0, 260.7435897435897], [171.0, 256.21428571428567], [172.0, 250.0270270270271], [173.0, 274.27586206896547], [174.0, 246.62500000000003], [175.0, 250.4137931034483], [176.0, 287.67999999999995], [177.0, 239.86363636363637], [178.0, 262.14473684210526], [179.0, 259.1], [180.0, 255.45454545454547], [181.0, 282.90476190476187], [182.0, 258.93877551020404], [183.0, 264.0615384615385], [184.0, 254.75], [185.0, 300.7692307692307], [186.0, 267.77777777777777], [187.0, 262.6842105263158], [188.0, 267.4137931034483], [189.0, 289.43181818181813], [190.0, 269.1666666666667], [191.0, 279.50000000000006], [192.0, 281.06666666666666], [193.0, 298.4375], [194.0, 291.09090909090907], [195.0, 301.6024096385544], [196.0, 293.17647058823536], [197.0, 288.29411764705884], [198.0, 244.0689655172414], [199.0, 290.054054054054], [200.0, 286.61538461538464], [201.0, 310.26000000000005], [202.0, 344.92156862745105], [203.0, 271.82608695652175], [204.0, 298.08], [205.0, 352.0], [206.0, 268.6], [207.0, 284.9767441860465], [208.0, 289.2758620689655], [209.0, 324.7714285714287], [210.0, 299.0192307692308], [211.0, 362.75], [212.0, 336.02702702702715], [213.0, 315.36842105263156], [214.0, 303.93750000000006], [215.0, 300.258064516129], [216.0, 330.0652173913044], [217.0, 294.5], [218.0, 323.67857142857144], [219.0, 311.45000000000005], [220.0, 379.6250000000001], [221.0, 338.1509433962264], [222.0, 345.69491525423734], [223.0, 333.0], [224.0, 332.5599999999999], [225.0, 295.7941176470588], [226.0, 296.47058823529414], [227.0, 299.22972972972985], [228.0, 314.2608695652174], [229.0, 345.8095238095238], [230.0, 341.32000000000005], [231.0, 330.05555555555554], [232.0, 292.79411764705884], [233.0, 316.26530612244886], [234.0, 319.36734693877554], [235.0, 380.6666666666667], [236.0, 336.5862068965518], [237.0, 352.2], [238.0, 341.5714285714285], [239.0, 345.921875], [240.0, 356.80952380952374], [241.0, 320.142857142857], [242.0, 369.03448275862064], [243.0, 357.4090909090909], [244.0, 319.6721311475411], [245.0, 305.258064516129], [246.0, 348.6785714285714], [247.0, 325.9583333333333], [248.0, 416.75], [249.0, 350.16666666666663], [250.0, 350.0], [251.0, 353.18032786885243], [252.0, 320.2758620689654], [253.0, 352.74137931034477], [254.0, 372.1702127659574], [255.0, 334.5882352941177], [257.0, 389.6363636363636], [256.0, 352.5833333333333], [258.0, 343.7916666666667], [259.0, 385.74074074074076], [260.0, 374.1666666666667], [261.0, 376.4819277108433], [262.0, 368.58823529411757], [264.0, 416.25], [271.0, 583.3461538461538], [268.0, 581.3333333333333], [270.0, 556.6610169491524], [265.0, 428.1111111111111], [267.0, 504.1111111111111], [272.0, 630.8947368421052], [275.0, 719.7974683544301], [276.0, 709.0], [280.0, 926.3947368421051], [285.0, 1062.2916666666665], [288.0, 1074.6666666666667], [289.0, 1306.3333333333333], [291.0, 1088.8], [292.0, 1269.0], [293.0, 1132.5454545454547], [294.0, 1247.5128205128206], [295.0, 1044.636363636364], [300.0, 1162.7142857142858], [304.0, 1180.1], [310.0, 1178.9499999999998], [314.0, 1237.3333333333333], [317.0, 1189.3636363636365], [318.0, 1368.0], [319.0, 1265.2407407407404], [320.0, 1364.7826086956522], [322.0, 1298.070175438596], [323.0, 1416.3548387096778], [328.0, 1239.4285714285713], [329.0, 1482.9999999999998], [336.0, 1426.8333333333333], [339.0, 1624.3571428571431], [343.0, 1382.2], [344.0, 1657.6363636363635], [346.0, 1402.0425531914896], [347.0, 1490.0], [349.0, 1339.8999999999996], [350.0, 1533.328358208955], [352.0, 1354.3260869565215], [358.0, 1435.9795918367352], [367.0, 1501.5749999999998], [372.0, 1467.4210526315792], [375.0, 1426.0833333333335], [376.0, 1800.8333333333333], [378.0, 1441.2727272727273], [379.0, 1671.0], [381.0, 1562.104761904762], [382.0, 1706.1466666666668], [384.0, 1708.5], [394.0, 1763.7628865979382], [395.0, 1904.25], [402.0, 1603.5660377358488], [403.0, 1689.0], [409.0, 1624.0], [412.0, 1584.1999999999998], [413.0, 1883.5], [415.0, 1686.5774647887322], [416.0, 1761.8651685393256], [417.0, 1229.4615384615386], [418.0, 1822.142857142857], [426.0, 1622.3103448275863], [427.0, 1954.2], [433.0, 1588.6511627906978], [434.0, 1940.5517241379314], [440.0, 1807.2857142857142], [441.0, 2038.0], [443.0, 1561.6666666666665], [449.0, 1758.5855855855852], [450.0, 2016.5], [452.0, 1820.8550724637682], [456.0, 1538.7058823529412], [457.0, 2078.5121951219508], [466.0, 1940.9333333333332], [467.0, 2247.551724137931], [469.0, 1715.178082191781], [478.0, 1845.6153846153845], [488.0, 1968.9999999999998], [492.0, 2100.5211267605623], [493.0, 2259.217948717949], [494.0, 2167.5666666666675], [495.0, 2353.894736842106], [496.0, 1605.5], [497.0, 2051.7558139534885], [507.0, 2046.608695652173], [508.0, 2116.0], [511.0, 1757.6666666666667], [539.0, 2182.5599999999995], [512.0, 2047.484848484848], [519.0, 1924.1538461538462], [529.0, 2082.1666666666665], [535.0, 2201.3181818181815], [538.0, 2189.363636363636], [540.0, 2421.1401869158885], [542.0, 2280.2272727272725], [543.0, 2197.0], [546.0, 1951.1176470588236], [547.0, 1961.363636363636], [556.0, 2449.8115942028985], [572.0, 2770.5555555555557], [574.0, 2311.117647058823], [589.0, 2415.1025641025644], [584.0, 2415.0909090909095], [585.0, 2592.0], [588.0, 2437.2553191489374], [590.0, 2674.0], [606.0, 2684.8455284552833], [607.0, 3292.0], [592.0, 2292.93023255814], [593.0, 2408.681081081079], [596.0, 2309.125], [597.0, 2300.166666666667], [615.0, 2167.1666666666674], [618.0, 2134.0384615384614], [628.0, 2226.392857142857], [632.0, 2238.63829787234], [633.0, 2236.4318181818176], [636.0, 2222.647727272727], [637.0, 2266.4193548387093], [638.0, 2482.28125], [640.0, 2041.25], [641.0, 2271.433333333333], [648.0, 2158.583333333334], [649.0, 2172.0291262135925], [661.0, 2243.423076923077], [662.0, 3037.714285714286], [668.0, 2500.7272727272725], [669.0, 2667.6666666666665], [679.0, 2584.970588235294], [684.0, 2643.636363636364], [685.0, 2598.642857142856], [691.0, 2705.081967213115], [692.0, 2678.416666666667], [693.0, 3062.7714285714283], [696.0, 2726.979591836734], [703.0, 2716.679245283019], [704.0, 3826.9130434782605], [713.0, 3253.5675675675675], [720.0, 2578.1475409836066], [721.0, 3090.5555555555557], [731.0, 2636.571428571429], [738.0, 2688.4615384615386], [746.0, 2747.139344262294], [747.0, 3110.155555555556], [757.0, 3934.7804878048773], [758.0, 3313.428571428571], [762.0, 2938.8888888888887], [774.0, 3860.166666666667], [775.0, 3511.8629032258063], [776.0, 3601.5151515151497], [783.0, 3144.138888888889], [789.0, 6401.8155339805835], [790.0, 9825.076923076924], [791.0, 3546.5200000000004], [800.0, 3086.0], [808.0, 3109.4347826086955], [809.0, 3114.866666666667], [810.0, 5431.714285714286], [820.0, 3152.235294117647], [821.0, 3165.695652173913], [822.0, 3726.9574468085098], [823.0, 3447.2888888888883], [824.0, 3164.6], [836.0, 3149.842105263158], [837.0, 3069.770642201834], [838.0, 4303.400000000001], [848.0, 3217.7125], [854.0, 3225.923076923077], [855.0, 3232.7183098591545], [866.0, 3807.1500000000005], [865.0, 3308.285714285714], [867.0, 3833.555555555555], [868.0, 3861.3333333333335], [878.0, 3467.758620689655], [879.0, 3461.2592592592596], [889.0, 3400.0654205607475], [890.0, 3364.9545454545455], [891.0, 4021.608695652173], [903.0, 4557.945945945945], [920.0, 4834.942028985506], [921.0, 4258.0], [939.0, 5534.031007751938], [940.0, 6865.016666666666], [959.0, 41701.0], [958.0, 42052.28571428571], [957.0, 40746.142857142855], [956.0, 43597.0], [955.0, 41624.0], [986.0, 41694.0], [970.0, 6219.8547008547], [969.0, 5706.0], [968.0, 41695.0], [991.0, 41693.0], [989.0, 41694.0], [987.0, 41692.0], [982.0, 41699.0], [976.0, 41690.0], [972.0, 41693.0], [961.0, 41703.0], [964.0, 41692.0], [963.0, 41374.0], [967.0, 41690.0], [966.0, 41696.0], [1007.0, 8690.88888888889], [1008.0, 17220.756097560974], [1006.0, 40964.4318181818], [1005.0, 34608.0], [1004.0, 41717.0], [1002.0, 34657.0], [1001.0, 34802.0], [999.0, 41682.0], [997.0, 41693.0], [995.0, 41668.0], [994.0, 48698.0], [993.0, 42609.0], [1072.0, 43541.666666666664], [1079.0, 43718.0], [1086.0, 43458.5], [1061.0, 43269.0], [1060.0, 43712.0], [1066.0, 43367.666666666664], [1064.0, 43453.0], [1083.0, 43718.0], [1082.0, 43197.0], [1077.0, 43196.0], [1076.0, 43543.666666666664], [1075.0, 43196.0], [1053.0, 45652.0], [1028.0, 43450.0], [1032.0, 43450.5], [1031.0, 45782.0], [1035.0, 43364.0], [1034.0, 43709.0], [1038.0, 43710.0], [1037.0, 43451.0], [1051.0, 43194.0], [1046.0, 43712.0], [1045.0, 43453.0], [1043.0, 43451.75], [1042.0, 29491.0], [1040.0, 43193.0], [1071.0, 44450.0], [1067.0, 43369.0], [1143.0, 39873.5], [1149.0, 28744.0], [1151.0, 35747.0], [1123.0, 44251.0], [1148.0, 41335.25], [1147.0, 40177.543721973096], [1145.0, 37843.63636363636], [1146.0, 38325.0], [1137.0, 45594.0], [1100.0, 43759.0], [1099.0, 43516.5], [1096.0, 43719.0], [1094.0, 43718.0], [1091.0, 45455.0], [1119.0, 30307.0], [1116.0, 45094.666666666664], [1115.0, 44153.0], [1114.0, 45288.5], [1110.0, 45395.0], [1109.0, 44461.0], [1107.0, 43857.0], [1105.0, 43414.0], [1132.0, 44250.0], [1127.0, 43510.0], [1190.0, 28496.0], [1196.0, 34558.5], [1199.0, 30029.0], [1198.0, 30028.0], [1197.0, 30030.0], [1194.0, 33059.0], [1193.0, 36351.0], [1192.0, 38824.75], [1189.0, 42850.0], [1188.0, 42560.0], [1187.0, 28884.0], [1186.0, 28205.0], [1184.0, 42754.5], [1167.0, 35431.0], [1164.0, 31903.333333333332], [1163.0, 42849.0], [1162.0, 28936.0], [1160.0, 33516.5], [1159.0, 42848.0], [1158.0, 39940.0], [1157.0, 33665.0], [1155.0, 33690.5], [1153.0, 35726.5], [1183.0, 28642.0], [1180.0, 31173.2], [1176.0, 32061.0], [1174.0, 31724.333333333332], [1172.0, 35697.5], [1171.0, 33877.5], [1168.0, 33750.0], [1.0, 26.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}, {"data": [[439.3309231762429, 4455.1080051646195]], "isOverall": false, "label": "Save API HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1199.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1122.8666666666666, "minX": 1.57676472E12, "maxY": 3565382.3833333333, "series": [{"data": [[1.57676478E12, 60753.11666666667], [1.57676472E12, 7605.5], [1.57676484E12, 41217.38333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57676478E12, 3565382.3833333333], [1.57676472E12, 446339.5], [1.57676484E12, 1122.8666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676484E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 133.91635220125792, "minX": 1.57676472E12, "maxY": 40116.44703919928, "series": [{"data": [[1.57676478E12, 1629.5627115975103], [1.57676472E12, 133.91635220125792], [1.57676484E12, 40116.44703919928]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676484E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 115.5354462051711, "minX": 1.57676472E12, "maxY": 1629.5590898354446, "series": [{"data": [[1.57676478E12, 1629.5590898354446], [1.57676472E12, 133.90754716981132], [1.57676484E12, 115.5354462051711]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676484E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.012578616352201269, "minX": 1.57676472E12, "maxY": 1220.9599666388658, "series": [{"data": [[1.57676478E12, 107.77482088024583], [1.57676472E12, 0.012578616352201269], [1.57676484E12, 1220.9599666388658]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676484E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.57676472E12, "maxY": 36351.0, "series": [{"data": [[1.57676478E12, 11573.0], [1.57676472E12, 249.0], [1.57676484E12, 36351.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57676478E12, 138.0], [1.57676472E12, 10.0], [1.57676484E12, 33059.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57676478E12, 3302.0], [1.57676472E12, 193.0], [1.57676484E12, 36351.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57676478E12, 8159.0], [1.57676472E12, 230.0], [1.57676484E12, 36351.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57676478E12, 4046.0], [1.57676472E12, 209.44999999999982], [1.57676484E12, 36351.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676484E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 81.0, "minX": 3.0, "maxY": 42858.0, "series": [{"data": [[524.0, 188.0], [517.0, 224.0], [555.0, 238.0], [567.0, 257.0], [569.0, 379.0], [651.0, 297.0], [664.0, 304.0], [676.0, 262.0], [682.0, 320.0], [4.0, 34558.5], [15.0, 11570.0], [40.0, 7090.5], [56.0, 2172.0], [69.0, 2220.0], [68.0, 2421.0], [70.0, 4136.0], [83.0, 3465.0], [86.0, 1812.0], [108.0, 1593.0], [116.0, 2584.5], [120.0, 5697.5], [143.0, 2884.5], [148.0, 1559.0], [153.0, 2110.0], [155.0, 2159.0], [157.0, 4329.0], [163.0, 1773.0], [173.0, 1368.0], [190.0, 2746.0], [189.0, 5131.0], [203.0, 722.0], [206.0, 1510.0], [223.0, 3226.0], [244.0, 1607.0], [249.0, 3409.0], [265.0, 1095.0], [282.0, 1283.0], [274.0, 3579.5], [290.0, 81.0], [310.0, 1696.5], [316.0, 2236.0], [313.0, 3152.0], [324.0, 127.5], [335.0, 2090.0], [348.0, 1834.0], [347.0, 2716.0], [356.0, 173.0], [432.0, 2224.0], [472.0, 169.5], [504.0, 2463.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 30029.0], [223.0, 42858.0], [969.0, 40658.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 969.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 34558.5, "series": [{"data": [[524.0, 188.0], [517.0, 224.0], [555.0, 238.0], [567.0, 257.0], [569.0, 379.0], [651.0, 297.0], [664.0, 304.0], [676.0, 262.0], [682.0, 320.0], [4.0, 34558.5], [15.0, 11570.0], [40.0, 7090.5], [56.0, 2172.0], [69.0, 2220.0], [68.0, 2421.0], [70.0, 4136.0], [83.0, 3465.0], [86.0, 1812.0], [108.0, 1593.0], [116.0, 2584.5], [120.0, 5697.0], [143.0, 2884.5], [148.0, 1559.0], [153.0, 2110.0], [155.0, 2159.0], [157.0, 4329.0], [163.0, 1773.0], [173.0, 1368.0], [190.0, 2746.0], [189.0, 5131.0], [203.0, 722.0], [206.0, 1510.0], [223.0, 3226.0], [244.0, 1607.0], [249.0, 3409.0], [265.0, 1095.0], [282.0, 1283.0], [274.0, 3579.5], [290.0, 81.0], [310.0, 1696.5], [316.0, 2236.0], [313.0, 3152.0], [324.0, 127.5], [335.0, 2090.0], [348.0, 1834.0], [347.0, 2716.0], [356.0, 173.0], [432.0, 2224.0], [472.0, 169.5], [504.0, 2463.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 0.0], [223.0, 0.0], [969.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 969.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 28.066666666666666, "minX": 1.57676472E12, "maxY": 230.1, "series": [{"data": [[1.57676478E12, 230.1], [1.57676472E12, 28.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676478E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.57676472E12, "maxY": 211.68333333333334, "series": [{"data": [[1.57676478E12, 211.68333333333334], [1.57676472E12, 26.5], [1.57676484E12, 0.06666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57676484E12, 19.866666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.57676484E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.ConnectTimeoutException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676484E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.57676472E12, "maxY": 211.68333333333334, "series": [{"data": [[1.57676484E12, 19.916666666666668]], "isOverall": false, "label": "Save API HTTP Request-failure", "isController": false}, {"data": [[1.57676478E12, 211.68333333333334], [1.57676472E12, 26.5], [1.57676484E12, 0.06666666666666667]], "isOverall": false, "label": "Save API HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676484E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.57676472E12, "maxY": 211.68333333333334, "series": [{"data": [[1.57676478E12, 211.68333333333334], [1.57676472E12, 26.5], [1.57676484E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57676484E12, 19.916666666666668]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676484E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

