/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 388695.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 3.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 9.0], [22.5, 9.0], [22.6, 9.0], [22.7, 9.0], [22.8, 9.0], [22.9, 9.0], [23.0, 9.0], [23.1, 9.0], [23.2, 9.0], [23.3, 9.0], [23.4, 9.0], [23.5, 9.0], [23.6, 9.0], [23.7, 9.0], [23.8, 9.0], [23.9, 9.0], [24.0, 10.0], [24.1, 10.0], [24.2, 10.0], [24.3, 10.0], [24.4, 10.0], [24.5, 10.0], [24.6, 10.0], [24.7, 10.0], [24.8, 10.0], [24.9, 10.0], [25.0, 10.0], [25.1, 10.0], [25.2, 10.0], [25.3, 10.0], [25.4, 10.0], [25.5, 10.0], [25.6, 10.0], [25.7, 10.0], [25.8, 11.0], [25.9, 11.0], [26.0, 11.0], [26.1, 11.0], [26.2, 11.0], [26.3, 11.0], [26.4, 11.0], [26.5, 11.0], [26.6, 11.0], [26.7, 11.0], [26.8, 11.0], [26.9, 11.0], [27.0, 11.0], [27.1, 11.0], [27.2, 11.0], [27.3, 11.0], [27.4, 11.0], [27.5, 12.0], [27.6, 12.0], [27.7, 12.0], [27.8, 12.0], [27.9, 12.0], [28.0, 12.0], [28.1, 12.0], [28.2, 12.0], [28.3, 12.0], [28.4, 12.0], [28.5, 12.0], [28.6, 12.0], [28.7, 12.0], [28.8, 12.0], [28.9, 12.0], [29.0, 12.0], [29.1, 13.0], [29.2, 13.0], [29.3, 13.0], [29.4, 13.0], [29.5, 13.0], [29.6, 13.0], [29.7, 13.0], [29.8, 13.0], [29.9, 13.0], [30.0, 13.0], [30.1, 13.0], [30.2, 13.0], [30.3, 13.0], [30.4, 13.0], [30.5, 14.0], [30.6, 14.0], [30.7, 14.0], [30.8, 14.0], [30.9, 14.0], [31.0, 14.0], [31.1, 14.0], [31.2, 14.0], [31.3, 14.0], [31.4, 14.0], [31.5, 14.0], [31.6, 14.0], [31.7, 14.0], [31.8, 14.0], [31.9, 14.0], [32.0, 14.0], [32.1, 15.0], [32.2, 15.0], [32.3, 15.0], [32.4, 15.0], [32.5, 15.0], [32.6, 15.0], [32.7, 15.0], [32.8, 15.0], [32.9, 15.0], [33.0, 15.0], [33.1, 15.0], [33.2, 15.0], [33.3, 15.0], [33.4, 15.0], [33.5, 15.0], [33.6, 15.0], [33.7, 16.0], [33.8, 16.0], [33.9, 16.0], [34.0, 16.0], [34.1, 16.0], [34.2, 16.0], [34.3, 16.0], [34.4, 16.0], [34.5, 16.0], [34.6, 16.0], [34.7, 16.0], [34.8, 16.0], [34.9, 16.0], [35.0, 16.0], [35.1, 16.0], [35.2, 16.0], [35.3, 16.0], [35.4, 16.0], [35.5, 16.0], [35.6, 17.0], [35.7, 17.0], [35.8, 17.0], [35.9, 17.0], [36.0, 17.0], [36.1, 17.0], [36.2, 17.0], [36.3, 17.0], [36.4, 17.0], [36.5, 17.0], [36.6, 17.0], [36.7, 17.0], [36.8, 17.0], [36.9, 17.0], [37.0, 17.0], [37.1, 17.0], [37.2, 17.0], [37.3, 17.0], [37.4, 17.0], [37.5, 17.0], [37.6, 18.0], [37.7, 18.0], [37.8, 18.0], [37.9, 18.0], [38.0, 18.0], [38.1, 18.0], [38.2, 18.0], [38.3, 18.0], [38.4, 18.0], [38.5, 18.0], [38.6, 18.0], [38.7, 18.0], [38.8, 18.0], [38.9, 18.0], [39.0, 18.0], [39.1, 18.0], [39.2, 18.0], [39.3, 18.0], [39.4, 18.0], [39.5, 18.0], [39.6, 19.0], [39.7, 19.0], [39.8, 19.0], [39.9, 19.0], [40.0, 19.0], [40.1, 19.0], [40.2, 19.0], [40.3, 19.0], [40.4, 19.0], [40.5, 19.0], [40.6, 19.0], [40.7, 19.0], [40.8, 19.0], [40.9, 19.0], [41.0, 19.0], [41.1, 19.0], [41.2, 19.0], [41.3, 19.0], [41.4, 19.0], [41.5, 19.0], [41.6, 20.0], [41.7, 20.0], [41.8, 20.0], [41.9, 20.0], [42.0, 20.0], [42.1, 20.0], [42.2, 20.0], [42.3, 20.0], [42.4, 20.0], [42.5, 20.0], [42.6, 20.0], [42.7, 20.0], [42.8, 20.0], [42.9, 20.0], [43.0, 20.0], [43.1, 20.0], [43.2, 20.0], [43.3, 21.0], [43.4, 21.0], [43.5, 21.0], [43.6, 21.0], [43.7, 21.0], [43.8, 21.0], [43.9, 21.0], [44.0, 21.0], [44.1, 21.0], [44.2, 21.0], [44.3, 21.0], [44.4, 21.0], [44.5, 21.0], [44.6, 21.0], [44.7, 21.0], [44.8, 21.0], [44.9, 21.0], [45.0, 21.0], [45.1, 22.0], [45.2, 22.0], [45.3, 22.0], [45.4, 22.0], [45.5, 22.0], [45.6, 22.0], [45.7, 22.0], [45.8, 22.0], [45.9, 22.0], [46.0, 22.0], [46.1, 22.0], [46.2, 22.0], [46.3, 22.0], [46.4, 22.0], [46.5, 22.0], [46.6, 23.0], [46.7, 23.0], [46.8, 23.0], [46.9, 23.0], [47.0, 23.0], [47.1, 23.0], [47.2, 23.0], [47.3, 23.0], [47.4, 23.0], [47.5, 23.0], [47.6, 23.0], [47.7, 23.0], [47.8, 23.0], [47.9, 23.0], [48.0, 23.0], [48.1, 23.0], [48.2, 23.0], [48.3, 24.0], [48.4, 24.0], [48.5, 24.0], [48.6, 24.0], [48.7, 24.0], [48.8, 24.0], [48.9, 24.0], [49.0, 24.0], [49.1, 24.0], [49.2, 24.0], [49.3, 24.0], [49.4, 24.0], [49.5, 24.0], [49.6, 24.0], [49.7, 24.0], [49.8, 24.0], [49.9, 24.0], [50.0, 25.0], [50.1, 25.0], [50.2, 25.0], [50.3, 25.0], [50.4, 25.0], [50.5, 25.0], [50.6, 25.0], [50.7, 25.0], [50.8, 25.0], [50.9, 25.0], [51.0, 25.0], [51.1, 25.0], [51.2, 25.0], [51.3, 25.0], [51.4, 25.0], [51.5, 25.0], [51.6, 25.0], [51.7, 26.0], [51.8, 26.0], [51.9, 26.0], [52.0, 26.0], [52.1, 26.0], [52.2, 26.0], [52.3, 26.0], [52.4, 26.0], [52.5, 26.0], [52.6, 26.0], [52.7, 26.0], [52.8, 26.0], [52.9, 26.0], [53.0, 26.0], [53.1, 27.0], [53.2, 27.0], [53.3, 27.0], [53.4, 27.0], [53.5, 27.0], [53.6, 27.0], [53.7, 27.0], [53.8, 27.0], [53.9, 27.0], [54.0, 27.0], [54.1, 27.0], [54.2, 27.0], [54.3, 27.0], [54.4, 27.0], [54.5, 28.0], [54.6, 28.0], [54.7, 28.0], [54.8, 28.0], [54.9, 28.0], [55.0, 28.0], [55.1, 28.0], [55.2, 28.0], [55.3, 28.0], [55.4, 28.0], [55.5, 28.0], [55.6, 28.0], [55.7, 28.0], [55.8, 28.0], [55.9, 29.0], [56.0, 29.0], [56.1, 29.0], [56.2, 29.0], [56.3, 29.0], [56.4, 29.0], [56.5, 29.0], [56.6, 29.0], [56.7, 29.0], [56.8, 29.0], [56.9, 29.0], [57.0, 29.0], [57.1, 30.0], [57.2, 30.0], [57.3, 30.0], [57.4, 30.0], [57.5, 30.0], [57.6, 30.0], [57.7, 30.0], [57.8, 30.0], [57.9, 30.0], [58.0, 30.0], [58.1, 31.0], [58.2, 31.0], [58.3, 31.0], [58.4, 31.0], [58.5, 31.0], [58.6, 31.0], [58.7, 31.0], [58.8, 31.0], [58.9, 31.0], [59.0, 31.0], [59.1, 31.0], [59.2, 31.0], [59.3, 32.0], [59.4, 32.0], [59.5, 32.0], [59.6, 32.0], [59.7, 32.0], [59.8, 32.0], [59.9, 32.0], [60.0, 32.0], [60.1, 32.0], [60.2, 32.0], [60.3, 32.0], [60.4, 33.0], [60.5, 33.0], [60.6, 33.0], [60.7, 33.0], [60.8, 33.0], [60.9, 33.0], [61.0, 33.0], [61.1, 33.0], [61.2, 33.0], [61.3, 33.0], [61.4, 33.0], [61.5, 34.0], [61.6, 34.0], [61.7, 34.0], [61.8, 34.0], [61.9, 34.0], [62.0, 34.0], [62.1, 34.0], [62.2, 34.0], [62.3, 34.0], [62.4, 34.0], [62.5, 34.0], [62.6, 35.0], [62.7, 35.0], [62.8, 35.0], [62.9, 35.0], [63.0, 35.0], [63.1, 35.0], [63.2, 35.0], [63.3, 35.0], [63.4, 35.0], [63.5, 36.0], [63.6, 36.0], [63.7, 36.0], [63.8, 36.0], [63.9, 36.0], [64.0, 36.0], [64.1, 36.0], [64.2, 36.0], [64.3, 36.0], [64.4, 37.0], [64.5, 37.0], [64.6, 37.0], [64.7, 37.0], [64.8, 37.0], [64.9, 37.0], [65.0, 37.0], [65.1, 37.0], [65.2, 37.0], [65.3, 38.0], [65.4, 38.0], [65.5, 38.0], [65.6, 38.0], [65.7, 38.0], [65.8, 38.0], [65.9, 38.0], [66.0, 39.0], [66.1, 39.0], [66.2, 39.0], [66.3, 39.0], [66.4, 39.0], [66.5, 39.0], [66.6, 39.0], [66.7, 39.0], [66.8, 39.0], [66.9, 40.0], [67.0, 40.0], [67.1, 40.0], [67.2, 40.0], [67.3, 40.0], [67.4, 40.0], [67.5, 40.0], [67.6, 40.0], [67.7, 40.0], [67.8, 41.0], [67.9, 41.0], [68.0, 41.0], [68.1, 41.0], [68.2, 41.0], [68.3, 41.0], [68.4, 41.0], [68.5, 41.0], [68.6, 41.0], [68.7, 41.0], [68.8, 42.0], [68.9, 42.0], [69.0, 42.0], [69.1, 42.0], [69.2, 42.0], [69.3, 42.0], [69.4, 42.0], [69.5, 42.0], [69.6, 43.0], [69.7, 43.0], [69.8, 43.0], [69.9, 43.0], [70.0, 43.0], [70.1, 43.0], [70.2, 43.0], [70.3, 44.0], [70.4, 44.0], [70.5, 44.0], [70.6, 44.0], [70.7, 44.0], [70.8, 44.0], [70.9, 44.0], [71.0, 44.0], [71.1, 45.0], [71.2, 45.0], [71.3, 45.0], [71.4, 45.0], [71.5, 45.0], [71.6, 45.0], [71.7, 46.0], [71.8, 46.0], [71.9, 46.0], [72.0, 46.0], [72.1, 47.0], [72.2, 47.0], [72.3, 47.0], [72.4, 47.0], [72.5, 47.0], [72.6, 48.0], [72.7, 48.0], [72.8, 48.0], [72.9, 48.0], [73.0, 48.0], [73.1, 49.0], [73.2, 49.0], [73.3, 49.0], [73.4, 49.0], [73.5, 50.0], [73.6, 50.0], [73.7, 50.0], [73.8, 50.0], [73.9, 51.0], [74.0, 51.0], [74.1, 51.0], [74.2, 52.0], [74.3, 52.0], [74.4, 52.0], [74.5, 53.0], [74.6, 53.0], [74.7, 54.0], [74.8, 54.0], [74.9, 55.0], [75.0, 55.0], [75.1, 56.0], [75.2, 57.0], [75.3, 57.0], [75.4, 58.0], [75.5, 58.0], [75.6, 59.0], [75.7, 60.0], [75.8, 61.0], [75.9, 62.0], [76.0, 63.0], [76.1, 64.0], [76.2, 66.0], [76.3, 67.0], [76.4, 68.0], [76.5, 70.0], [76.6, 72.0], [76.7, 74.0], [76.8, 80.0], [76.9, 83.0], [77.0, 88.0], [77.1, 92.0], [77.2, 99.0], [77.3, 110.0], [77.4, 123.0], [77.5, 141.0], [77.6, 168.0], [77.7, 191.0], [77.8, 220.0], [77.9, 237.0], [78.0, 274.0], [78.1, 355.0], [78.2, 434.0], [78.3, 499.0], [78.4, 533.0], [78.5, 587.0], [78.6, 662.0], [78.7, 724.0], [78.8, 763.0], [78.9, 787.0], [79.0, 832.0], [79.1, 874.0], [79.2, 930.0], [79.3, 959.0], [79.4, 975.0], [79.5, 1017.0], [79.6, 1057.0], [79.7, 1098.0], [79.8, 1165.0], [79.9, 1226.0], [80.0, 1311.0], [80.1, 1340.0], [80.2, 1357.0], [80.3, 1414.0], [80.4, 1542.0], [80.5, 1615.0], [80.6, 1691.0], [80.7, 1725.0], [80.8, 1806.0], [80.9, 1909.0], [81.0, 1939.0], [81.1, 1975.0], [81.2, 2020.0], [81.3, 2093.0], [81.4, 2123.0], [81.5, 2177.0], [81.6, 2285.0], [81.7, 2332.0], [81.8, 2374.0], [81.9, 2398.0], [82.0, 2408.0], [82.1, 2493.0], [82.2, 2604.0], [82.3, 2719.0], [82.4, 2814.0], [82.5, 2880.0], [82.6, 2925.0], [82.7, 3074.0], [82.8, 3106.0], [82.9, 3232.0], [83.0, 3295.0], [83.1, 3423.0], [83.2, 3470.0], [83.3, 3510.0], [83.4, 3550.0], [83.5, 3645.0], [83.6, 3756.0], [83.7, 3821.0], [83.8, 3890.0], [83.9, 3923.0], [84.0, 3966.0], [84.1, 4001.0], [84.2, 4001.0], [84.3, 4002.0], [84.4, 4002.0], [84.5, 4002.0], [84.6, 4003.0], [84.7, 4003.0], [84.8, 4003.0], [84.9, 4003.0], [85.0, 4003.0], [85.1, 4004.0], [85.2, 4004.0], [85.3, 4004.0], [85.4, 4004.0], [85.5, 4004.0], [85.6, 4004.0], [85.7, 4005.0], [85.8, 4005.0], [85.9, 4005.0], [86.0, 4005.0], [86.1, 4005.0], [86.2, 4005.0], [86.3, 4005.0], [86.4, 4005.0], [86.5, 4006.0], [86.6, 4006.0], [86.7, 4006.0], [86.8, 4006.0], [86.9, 4006.0], [87.0, 4006.0], [87.1, 4007.0], [87.2, 4007.0], [87.3, 4007.0], [87.4, 4007.0], [87.5, 4007.0], [87.6, 4008.0], [87.7, 4008.0], [87.8, 4008.0], [87.9, 4008.0], [88.0, 4009.0], [88.1, 4009.0], [88.2, 4009.0], [88.3, 4010.0], [88.4, 4010.0], [88.5, 4011.0], [88.6, 4013.0], [88.7, 4015.0], [88.8, 4018.0], [88.9, 4022.0], [89.0, 4026.0], [89.1, 4031.0], [89.2, 4036.0], [89.3, 4045.0], [89.4, 4052.0], [89.5, 4073.0], [89.6, 4089.0], [89.7, 4102.0], [89.8, 4115.0], [89.9, 4130.0], [90.0, 4147.0], [90.1, 4161.0], [90.2, 4170.0], [90.3, 4178.0], [90.4, 4193.0], [90.5, 4210.0], [90.6, 4355.0], [90.7, 4417.0], [90.8, 4502.0], [90.9, 4762.0], [91.0, 4911.0], [91.1, 5040.0], [91.2, 5143.0], [91.3, 5348.0], [91.4, 5429.0], [91.5, 5486.0], [91.6, 5637.0], [91.7, 5721.0], [91.8, 5971.0], [91.9, 6106.0], [92.0, 6298.0], [92.1, 6576.0], [92.2, 7220.0], [92.3, 7393.0], [92.4, 7676.0], [92.5, 7842.0], [92.6, 7883.0], [92.7, 7945.0], [92.8, 8039.0], [92.9, 8259.0], [93.0, 8286.0], [93.1, 8373.0], [93.2, 8602.0], [93.3, 8635.0], [93.4, 8719.0], [93.5, 8780.0], [93.6, 8875.0], [93.7, 8954.0], [93.8, 9051.0], [93.9, 9086.0], [94.0, 9138.0], [94.1, 9258.0], [94.2, 9347.0], [94.3, 9442.0], [94.4, 9458.0], [94.5, 9595.0], [94.6, 9753.0], [94.7, 9857.0], [94.8, 9917.0], [94.9, 10048.0], [95.0, 10101.0], [95.1, 10132.0], [95.2, 10241.0], [95.3, 10418.0], [95.4, 10504.0], [95.5, 10599.0], [95.6, 10713.0], [95.7, 10755.0], [95.8, 10843.0], [95.9, 11171.0], [96.0, 11214.0], [96.1, 11229.0], [96.2, 11242.0], [96.3, 11333.0], [96.4, 11365.0], [96.5, 11458.0], [96.6, 11571.0], [96.7, 11648.0], [96.8, 12317.0], [96.9, 12426.0], [97.0, 12846.0], [97.1, 13168.0], [97.2, 13300.0], [97.3, 15337.0], [97.4, 19035.0], [97.5, 22834.0], [97.6, 26572.0], [97.7, 30359.0], [97.8, 34106.0], [97.9, 35633.0], [98.0, 35720.0], [98.1, 35760.0], [98.2, 35783.0], [98.3, 35791.0], [98.4, 35800.0], [98.5, 35823.0], [98.6, 35883.0], [98.7, 37053.0], [98.8, 42150.0], [98.9, 49644.0], [99.0, 57066.0], [99.1, 220703.0], [99.2, 244155.0], [99.3, 267808.0], [99.4, 282098.0], [99.5, 292264.0], [99.6, 299978.0], [99.7, 344924.0], [99.8, 359392.0], [99.9, 371741.0], [100.0, 388695.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 19300.0, "series": [{"data": [[0.0, 19300.0], [280900.0, 1.0], [344900.0, 1.0], [364100.0, 1.0], [370500.0, 1.0], [215200.0, 1.0], [237600.0, 1.0], [250400.0, 1.0], [270400.0, 1.0], [379200.0, 1.0], [372300.0, 1.0], [216100.0, 1.0], [228900.0, 1.0], [285000.0, 1.0], [297800.0, 1.0], [381000.0, 1.0], [217000.0, 1.0], [223400.0, 1.0], [249000.0, 1.0], [274000.0, 1.0], [286800.0, 1.0], [293200.0, 1.0], [299600.0, 1.0], [350800.0, 1.0], [382800.0, 1.0], [100.0, 137.0], [32900.0, 1.0], [34500.0, 6.0], [33700.0, 1.0], [273500.0, 1.0], [36100.0, 1.0], [292700.0, 1.0], [38500.0, 1.0], [37700.0, 3.0], [40900.0, 1.0], [43300.0, 1.0], [45700.0, 1.0], [48100.0, 1.0], [50500.0, 1.0], [200.0, 66.0], [53700.0, 1.0], [56100.0, 1.0], [58500.0, 1.0], [60900.0, 1.0], [275800.0, 1.0], [288600.0, 1.0], [300.0, 37.0], [333400.0, 1.0], [359000.0, 1.0], [352600.0, 1.0], [400.0, 35.0], [500.0, 56.0], [600.0, 30.0], [700.0, 74.0], [800.0, 49.0], [228400.0, 1.0], [900.0, 85.0], [231600.0, 1.0], [1000.0, 56.0], [1100.0, 45.0], [290400.0, 1.0], [1200.0, 20.0], [1300.0, 78.0], [341600.0, 1.0], [1400.0, 22.0], [360800.0, 1.0], [1500.0, 20.0], [1600.0, 49.0], [1700.0, 37.0], [1800.0, 19.0], [1900.0, 69.0], [2000.0, 47.0], [2100.0, 55.0], [2300.0, 70.0], [2200.0, 21.0], [283500.0, 1.0], [2400.0, 49.0], [296300.0, 1.0], [2500.0, 22.0], [315500.0, 1.0], [2600.0, 25.0], [2700.0, 19.0], [2800.0, 37.0], [2900.0, 41.0], [3000.0, 23.0], [379500.0, 1.0], [3100.0, 22.0], [3200.0, 37.0], [3300.0, 12.0], [3400.0, 59.0], [3500.0, 40.0], [3600.0, 31.0], [3700.0, 8.0], [3800.0, 56.0], [3900.0, 54.0], [4000.0, 1406.0], [254900.0, 1.0], [4100.0, 193.0], [4200.0, 34.0], [4300.0, 17.0], [4400.0, 37.0], [4500.0, 7.0], [279400.0, 1.0], [292200.0, 1.0], [4600.0, 11.0], [4800.0, 17.0], [4700.0, 13.0], [5100.0, 28.0], [4900.0, 15.0], [5000.0, 27.0], [343400.0, 1.0], [5300.0, 18.0], [5200.0, 4.0], [5400.0, 38.0], [5600.0, 32.0], [5500.0, 10.0], [5700.0, 22.0], [5800.0, 3.0], [362600.0, 1.0], [6000.0, 15.0], [5900.0, 14.0], [6100.0, 7.0], [6300.0, 6.0], [6200.0, 20.0], [6600.0, 2.0], [6400.0, 11.0], [6500.0, 9.0], [6900.0, 2.0], [6800.0, 4.0], [6700.0, 3.0], [7000.0, 2.0], [7100.0, 3.0], [7200.0, 19.0], [7400.0, 8.0], [7300.0, 15.0], [7500.0, 2.0], [7600.0, 18.0], [7800.0, 52.0], [7700.0, 9.0], [7900.0, 34.0], [8000.0, 4.0], [8100.0, 4.0], [8400.0, 5.0], [272500.0, 1.0], [8200.0, 45.0], [8600.0, 39.0], [9000.0, 41.0], [9200.0, 15.0], [8800.0, 26.0], [9600.0, 6.0], [9400.0, 56.0], [10200.0, 13.0], [9800.0, 38.0], [10000.0, 42.0], [10600.0, 23.0], [10400.0, 34.0], [10800.0, 26.0], [349300.0, 1.0], [11200.0, 76.0], [11000.0, 2.0], [11400.0, 24.0], [362100.0, 1.0], [11600.0, 17.0], [12000.0, 4.0], [381300.0, 1.0], [11800.0, 3.0], [12200.0, 1.0], [12600.0, 4.0], [12400.0, 13.0], [13200.0, 5.0], [12800.0, 19.0], [13800.0, 5.0], [14200.0, 2.0], [14400.0, 2.0], [15000.0, 2.0], [15600.0, 2.0], [246200.0, 1.0], [16200.0, 2.0], [16800.0, 2.0], [17200.0, 1.0], [18400.0, 1.0], [18000.0, 1.0], [19200.0, 1.0], [19600.0, 1.0], [20400.0, 1.0], [20800.0, 1.0], [22000.0, 2.0], [22400.0, 1.0], [21600.0, 1.0], [358000.0, 1.0], [23200.0, 1.0], [22800.0, 1.0], [364400.0, 1.0], [370800.0, 1.0], [24400.0, 1.0], [24000.0, 1.0], [25200.0, 1.0], [25600.0, 1.0], [26400.0, 1.0], [26800.0, 1.0], [27200.0, 1.0], [28000.0, 1.0], [29200.0, 1.0], [28800.0, 1.0], [30400.0, 1.0], [31200.0, 1.0], [32400.0, 1.0], [34400.0, 1.0], [32800.0, 1.0], [35200.0, 3.0], [287100.0, 1.0], [293500.0, 1.0], [37600.0, 1.0], [299900.0, 1.0], [40000.0, 1.0], [42400.0, 1.0], [338300.0, 1.0], [44800.0, 1.0], [351100.0, 1.0], [47200.0, 1.0], [49600.0, 1.0], [52800.0, 1.0], [52000.0, 1.0], [55200.0, 1.0], [57600.0, 1.0], [60000.0, 1.0], [253500.0, 1.0], [64000.0, 1.0], [295800.0, 1.0], [359800.0, 1.0], [372600.0, 1.0], [266500.0, 1.0], [349700.0, 1.0], [375300.0, 1.0], [275200.0, 1.0], [288000.0, 1.0], [294400.0, 1.0], [352000.0, 1.0], [345100.0, 1.0], [244100.0, 1.0], [289800.0, 1.0], [251400.0, 1.0], [278800.0, 1.0], [291600.0, 1.0], [355600.0, 1.0], [34700.0, 2.0], [33100.0, 1.0], [271900.0, 1.0], [35500.0, 1.0], [37900.0, 1.0], [38700.0, 1.0], [37100.0, 1.0], [40300.0, 1.0], [42700.0, 1.0], [329500.0, 1.0], [45100.0, 1.0], [47500.0, 1.0], [380700.0, 1.0], [49900.0, 1.0], [53100.0, 1.0], [226700.0, 1.0], [57900.0, 1.0], [229900.0, 1.0], [60300.0, 1.0], [252300.0, 1.0], [267800.0, 1.0], [344600.0, 1.0], [363800.0, 1.0], [370200.0, 1.0], [273700.0, 1.0], [292900.0, 1.0], [350500.0, 1.0], [382500.0, 1.0], [221200.0, 1.0], [234000.0, 1.0], [346400.0, 1.0], [372000.0, 1.0], [262700.0, 1.0], [288300.0, 1.0], [339500.0, 1.0], [358700.0, 1.0], [222100.0, 1.0], [234900.0, 1.0], [271400.0, 1.0], [290100.0, 1.0], [341300.0, 1.0], [379700.0, 1.0], [223000.0, 1.0], [16500.0, 2.0], [18100.0, 1.0], [286000.0, 1.0], [19300.0, 1.0], [18900.0, 1.0], [20100.0, 1.0], [20500.0, 1.0], [22500.0, 1.0], [22900.0, 1.0], [369200.0, 1.0], [375600.0, 1.0], [24100.0, 1.0], [23700.0, 1.0], [388400.0, 1.0], [25300.0, 1.0], [24900.0, 1.0], [26500.0, 1.0], [26100.0, 1.0], [26900.0, 1.0], [27700.0, 1.0], [28100.0, 1.0], [28500.0, 1.0], [28900.0, 1.0], [30100.0, 2.0], [29700.0, 1.0], [31300.0, 1.0], [31700.0, 1.0], [32100.0, 1.0], [33800.0, 1.0], [34600.0, 2.0], [36200.0, 1.0], [37000.0, 1.0], [38600.0, 1.0], [39400.0, 1.0], [41800.0, 1.0], [343100.0, 1.0], [44200.0, 1.0], [46600.0, 1.0], [362300.0, 1.0], [49000.0, 1.0], [52200.0, 1.0], [51400.0, 1.0], [54600.0, 1.0], [220700.0, 1.0], [57000.0, 1.0], [223900.0, 1.0], [59400.0, 1.0], [249500.0, 1.0], [64200.0, 1.0], [287800.0, 1.0], [294200.0, 1.0], [277700.0, 1.0], [296900.0, 1.0], [341700.0, 1.0], [344000.0, 1.0], [356800.0, 1.0], [363200.0, 1.0], [369600.0, 1.0], [298700.0, 1.0], [381900.0, 1.0], [217700.0, 1.0], [233700.0, 1.0], [256100.0, 1.0], [352200.0, 1.0], [345800.0, 1.0], [358600.0, 1.0], [371400.0, 1.0], [300500.0, 1.0], [358100.0, 1.0], [351700.0, 1.0], [383700.0, 1.0], [247400.0, 1.0], [360400.0, 1.0], [34100.0, 2.0], [276700.0, 1.0], [35700.0, 108.0], [34900.0, 2.0], [289500.0, 1.0], [37300.0, 1.0], [39700.0, 1.0], [42100.0, 1.0], [44500.0, 1.0], [359900.0, 1.0], [353500.0, 1.0], [46900.0, 1.0], [49300.0, 1.0], [51700.0, 1.0], [54900.0, 1.0], [57300.0, 1.0], [59700.0, 1.0], [266200.0, 1.0], [298200.0, 1.0], [278500.0, 1.0], [291300.0, 1.0], [342500.0, 1.0], [246000.0, 1.0], [255600.0, 1.0], [280300.0, 1.0], [344300.0, 1.0], [363500.0, 1.0], [369900.0, 1.0], [214900.0, 1.0], [224500.0, 1.0], [282600.0, 1.0], [295400.0, 1.0], [378600.0, 1.0], [8700.0, 40.0], [8500.0, 12.0], [8300.0, 30.0], [8900.0, 33.0], [9100.0, 41.0], [9300.0, 23.0], [9700.0, 27.0], [9500.0, 12.0], [9900.0, 10.0], [10100.0, 45.0], [10500.0, 29.0], [10300.0, 7.0], [10700.0, 29.0], [11100.0, 25.0], [10900.0, 5.0], [11700.0, 6.0], [371700.0, 1.0], [11300.0, 57.0], [11500.0, 19.0], [12100.0, 3.0], [11900.0, 3.0], [12300.0, 14.0], [12700.0, 2.0], [12900.0, 11.0], [13100.0, 32.0], [13300.0, 2.0], [13500.0, 2.0], [13700.0, 2.0], [14100.0, 2.0], [225400.0, 1.0], [14300.0, 4.0], [14700.0, 2.0], [15300.0, 2.0], [241400.0, 1.0], [251000.0, 1.0], [15900.0, 2.0], [260600.0, 1.0], [17400.0, 1.0], [17800.0, 2.0], [284400.0, 1.0], [290800.0, 1.0], [19000.0, 1.0], [18600.0, 1.0], [297200.0, 1.0], [20200.0, 1.0], [19800.0, 1.0], [21400.0, 2.0], [21000.0, 1.0], [22200.0, 1.0], [22600.0, 1.0], [23400.0, 1.0], [361200.0, 1.0], [23800.0, 1.0], [380400.0, 1.0], [25000.0, 1.0], [24600.0, 1.0], [26200.0, 1.0], [26600.0, 1.0], [25800.0, 1.0], [27400.0, 1.0], [28600.0, 1.0], [27800.0, 1.0], [29400.0, 1.0], [29800.0, 1.0], [31000.0, 2.0], [32600.0, 1.0], [31800.0, 1.0], [34800.0, 1.0], [33200.0, 2.0], [34000.0, 1.0], [36400.0, 1.0], [35600.0, 20.0], [38800.0, 1.0], [38000.0, 1.0], [41200.0, 1.0], [43600.0, 1.0], [46000.0, 1.0], [360700.0, 1.0], [48400.0, 1.0], [50800.0, 1.0], [54000.0, 1.0], [219900.0, 1.0], [56400.0, 1.0], [55600.0, 1.0], [58800.0, 1.0], [229500.0, 1.0], [61200.0, 1.0], [261500.0, 1.0], [299000.0, 1.0], [350200.0, 1.0], [388600.0, 1.0], [276100.0, 1.0], [288900.0, 1.0], [359300.0, 1.0], [257600.0, 1.0], [265600.0, 1.0], [297600.0, 1.0], [348800.0, 1.0], [387200.0, 1.0], [265100.0, 1.0], [258500.0, 1.0], [286600.0, 1.0], [299400.0, 1.0], [324500.0, 1.0], [343700.0, 1.0], [362900.0, 1.0], [382100.0, 1.0], [227400.0, 1.0], [240200.0, 1.0], [269200.0, 1.0], [282000.0, 1.0], [294800.0, 1.0], [314000.0, 1.0], [378000.0, 1.0], [33500.0, 1.0], [34300.0, 1.0], [268700.0, 1.0], [36700.0, 2.0], [35900.0, 4.0], [281500.0, 1.0], [39100.0, 1.0], [41500.0, 1.0], [43900.0, 1.0], [345500.0, 1.0], [46300.0, 1.0], [371100.0, 1.0], [48700.0, 1.0], [51100.0, 1.0], [54300.0, 1.0], [215500.0, 1.0], [56700.0, 1.0], [59100.0, 1.0], [241100.0, 1.0], [61500.0, 1.0], [271000.0, 1.0], [283800.0, 1.0], [296600.0, 1.0], [296100.0, 1.0], [242000.0, 1.0], [285600.0, 1.0], [292000.0, 1.0], [298400.0, 1.0], [381600.0, 1.0], [342700.0, 1.0], [242900.0, 1.0], [274600.0, 1.0], [293800.0, 1.0], [300200.0, 1.0], [306600.0, 1.0], [338600.0, 1.0], [351400.0, 1.0], [312500.0, 1.0], [376500.0, 1.0], [17100.0, 1.0], [276400.0, 1.0], [263600.0, 1.0], [17500.0, 1.0], [18300.0, 1.0], [18700.0, 1.0], [19900.0, 1.0], [19500.0, 1.0], [21100.0, 1.0], [20700.0, 1.0], [22300.0, 1.0], [23500.0, 1.0], [23100.0, 1.0], [24300.0, 1.0], [24700.0, 1.0], [25500.0, 1.0], [25900.0, 1.0], [27100.0, 1.0], [27500.0, 1.0], [28300.0, 1.0], [29500.0, 1.0], [29100.0, 1.0], [30700.0, 2.0], [30300.0, 1.0], [31500.0, 1.0], [31900.0, 1.0], [32300.0, 1.0], [35800.0, 66.0], [35000.0, 1.0], [38200.0, 2.0], [295100.0, 1.0], [40600.0, 1.0], [43000.0, 1.0], [45400.0, 1.0], [47800.0, 1.0], [378300.0, 1.0], [50200.0, 1.0], [52600.0, 1.0], [53400.0, 1.0], [55800.0, 1.0], [58200.0, 1.0], [231900.0, 1.0], [60600.0, 1.0], [278200.0, 1.0], [265400.0, 1.0], [291000.0, 1.0], [342200.0, 1.0], [361400.0, 1.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 388600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 506.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 14116.0, "series": [{"data": [[0.0, 14116.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 506.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2613.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 7765.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.57467204E12, "maxY": 279.3137847642078, "series": [{"data": [[1.5746721E12, 1.0], [1.5746724E12, 1.0084566596194509], [1.57467342E12, 279.3137847642078], [1.5746733E12, 250.37597656250009], [1.5746727E12, 1.0], [1.574673E12, 1.756311745334797], [1.57467354E12, 1.0271604938271606], [1.57467294E12, 1.08624229979466], [1.57467324E12, 250.1600810536982], [1.57467282E12, 1.0300601202404804], [1.57467312E12, 138.10820895522394], [1.57467222E12, 1.0], [1.57467252E12, 175.23880597014943], [1.57467306E12, 75.0699844479005], [1.57467336E12, 257.6374501992033], [1.57467246E12, 212.76705882352957], [1.57467276E12, 1.0], [1.57467234E12, 1.0], [1.57467264E12, 1.0], [1.57467204E12, 1.0], [1.57467258E12, 1.0], [1.57467288E12, 1.0210843373493979], [1.57467228E12, 1.0], [1.57467216E12, 1.0], [1.57467318E12, 221.83264746227684], [1.57467348E12, 69.7470817120623]], "isOverall": false, "label": "1. Save API", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57467354E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.280174146014843, "minX": 1.0, "maxY": 187964.96585365853, "series": [{"data": [[2.0, 101.80291970802921], [3.0, 69.02222222222223], [4.0, 87.10204081632654], [5.0, 143.2962962962963], [6.0, 168.66666666666666], [7.0, 130.75], [8.0, 358.3333333333333], [9.0, 446.1111111111111], [10.0, 384.21052631578954], [11.0, 453.11764705882354], [12.0, 478.6666666666667], [13.0, 566.5625], [14.0, 455.52173913043475], [15.0, 723.5238095238094], [16.0, 760.3181818181818], [17.0, 774.0555555555558], [18.0, 887.3750000000001], [19.0, 1015.1363636363635], [20.0, 301.2], [21.0, 367.35], [22.0, 599.75], [23.0, 91.51063829787235], [24.0, 531.8235294117648], [25.0, 565.8571428571429], [26.0, 392.99999999999994], [27.0, 851.7333333333333], [28.0, 997.3333333333333], [29.0, 1105.2], [30.0, 445.5882352941176], [31.0, 1252.875], [33.0, 1210.3076923076926], [32.0, 777.1333333333333], [35.0, 155.27906976744185], [34.0, 985.2727272727273], [37.0, 1465.3529411764703], [36.0, 1391.625], [39.0, 1582.6666666666665], [38.0, 1550.857142857143], [41.0, 1638.5], [40.0, 1352.4], [43.0, 1267.5], [42.0, 1687.9], [45.0, 1692.8333333333335], [44.0, 1203.6315789473683], [47.0, 1893.1000000000001], [46.0, 1778.0], [49.0, 1668.6666666666667], [48.0, 1784.1666666666665], [51.0, 1996.9375000000002], [50.0, 1881.625], [53.0, 1974.2380952380954], [52.0, 1937.1249999999998], [55.0, 2341.0714285714284], [54.0, 1394.0], [57.0, 780.9200000000001], [56.0, 1896.6666666666667], [59.0, 470.86842105263156], [58.0, 929.04], [61.0, 2171.3333333333335], [60.0, 941.0], [63.0, 1721.5], [62.0, 2278.714285714286], [67.0, 1987.3333333333333], [66.0, 2190.1428571428573], [65.0, 1914.6666666666667], [64.0, 1678.0], [71.0, 2025.833333333333], [70.0, 2402.083333333333], [69.0, 2052.181818181818], [68.0, 2455.6], [75.0, 2956.333333333334], [74.0, 3019.4444444444443], [73.0, 1915.3076923076922], [72.0, 544.595744680851], [79.0, 3350.285714285714], [78.0, 3369.411764705882], [77.0, 2931.142857142857], [76.0, 2990.5], [83.0, 2295.5], [82.0, 3162.3333333333335], [81.0, 2923.25], [80.0, 3292.3333333333335], [87.0, 2875.75], [86.0, 3297.5555555555557], [85.0, 2299.0], [84.0, 2295.5], [91.0, 2400.7272727272725], [90.0, 609.6153846153846], [89.0, 153.1], [88.0, 2285.0], [95.0, 129.58278145695365], [94.0, 287.8735632183908], [93.0, 129.17460317460316], [92.0, 313.6385542168675], [99.0, 333.6285714285715], [98.0, 372.88785046728975], [97.0, 1630.583333333333], [96.0, 772.8888888888888], [103.0, 2989.6666666666665], [102.0, 2978.3333333333335], [101.0, 3920.7], [100.0, 3986.333333333333], [107.0, 2506.5], [106.0, 3060.6666666666665], [105.0, 3697.777777777778], [104.0, 2996.3333333333335], [111.0, 3911.4117647058824], [110.0, 3172.3333333333335], [109.0, 2105.333333333333], [108.0, 3145.3333333333335], [115.0, 3980.5], [114.0, 3528.285714285714], [113.0, 4066.6], [112.0, 3772.285714285714], [119.0, 3484.0], [118.0, 4252.200000000001], [117.0, 4713.499999999999], [116.0, 3936.4000000000005], [123.0, 4989.0], [122.0, 4185.75], [121.0, 3519.5], [120.0, 4606.75], [127.0, 4978.25], [126.0, 5216.38888888889], [125.0, 5180.25], [124.0, 5149.944444444444], [135.0, 2716.8], [134.0, 4302.249999999999], [133.0, 4723.416666666666], [132.0, 5187.580645161291], [131.0, 5263.4], [130.0, 3244.6470588235293], [129.0, 4981.75], [128.0, 5240.875], [143.0, 6419.928571428573], [142.0, 5865.244444444444], [141.0, 1940.8235294117649], [140.0, 5932.7692307692305], [139.0, 3825.6666666666665], [138.0, 3202.5], [137.0, 3191.0], [136.0, 912.7142857142857], [151.0, 2137.4615384615386], [150.0, 2681.7777777777774], [147.0, 3698.5263157894738], [146.0, 4071.052631578948], [144.0, 7485.317073170732], [148.0, 1940.1666666666667], [149.0, 11643.0], [145.0, 8057.349999999999], [159.0, 3234.75], [158.0, 10502.2], [157.0, 10421.18181818182], [156.0, 3975.9333333333334], [155.0, 2891.046874999999], [154.0, 2182.45], [153.0, 2973.5], [152.0, 3404.875], [167.0, 4756.8], [166.0, 4515.9], [165.0, 4151.333333333333], [164.0, 4396.222222222223], [163.0, 9081.25], [162.0, 10360.333333333334], [161.0, 8164.5], [160.0, 1543.5384615384614], [175.0, 3574.2000000000007], [174.0, 1045.6666666666667], [173.0, 2106.142857142857], [172.0, 7371.5], [171.0, 2373.625], [170.0, 2490.2307692307695], [169.0, 1407.5], [168.0, 3614.75], [183.0, 1429.8461538461538], [182.0, 659.7272727272729], [181.0, 5281.75], [180.0, 7828.0], [179.0, 2237.428571428571], [178.0, 9848.0], [177.0, 255.12499999999994], [176.0, 1214.5833333333335], [191.0, 645.4090909090909], [190.0, 3321.25], [189.0, 4786.8], [188.0, 2049.5769230769233], [187.0, 3165.6], [186.0, 493.9393939393939], [185.0, 1209.5], [184.0, 853.2352941176472], [199.0, 893.3529411764707], [198.0, 826.782608695652], [197.0, 2075.8181818181815], [196.0, 1462.1538461538462], [195.0, 2537.6666666666665], [194.0, 7941.6], [193.0, 2249.357142857143], [192.0, 834.0588235294117], [207.0, 25801.234817813754], [206.0, 2231.4117647058824], [205.0, 7593.0], [204.0, 2375.75], [203.0, 1462.0], [202.0, 893.5882352941177], [201.0, 948.3214285714287], [200.0, 7592.0], [211.0, 4951.206896551724], [215.0, 2675.909090909091], [212.0, 8435.666666666666], [210.0, 7591.5], [209.0, 2043.6153846153845], [208.0, 396.3255813953489], [213.0, 412.50000000000006], [214.0, 11333.0], [218.0, 3892.3749999999995], [219.0, 1029.0], [220.0, 1015.5714285714286], [221.0, 2059.8888888888887], [222.0, 1724.5714285714284], [223.0, 6835.5], [217.0, 1139.8333333333333], [216.0, 1964.8571428571427], [231.0, 3547.7499999999995], [230.0, 1140.7857142857144], [229.0, 2281.2857142857147], [228.0, 1043.7250000000001], [227.0, 3133.5], [226.0, 2042.7142857142858], [225.0, 1191.5833333333333], [224.0, 2600.9285714285716], [239.0, 2530.4], [238.0, 3174.5217391304345], [237.0, 2330.9333333333334], [236.0, 5322.666666666666], [235.0, 1331.0], [234.0, 1330.8333333333333], [233.0, 5764.0], [232.0, 7983.0], [247.0, 928.55614973262], [246.0, 1300.3481012658226], [245.0, 1256.5263157894738], [244.0, 1722.56], [243.0, 962.2125000000001], [242.0, 1524.394736842105], [241.0, 1818.5882352941176], [240.0, 2200.5555555555557], [255.0, 138694.57205240172], [254.0, 797.3923076923076], [253.0, 2067.5205479452047], [252.0, 1094.9086538461543], [251.0, 871.075187969925], [250.0, 742.688888888889], [249.0, 1017.0869565217392], [248.0, 1517.386666666667], [270.0, 5913.285714285715], [263.0, 1511.6842105263165], [262.0, 3783.268292682926], [261.0, 1531.2363636363632], [260.0, 1386.1176470588234], [271.0, 8735.25], [269.0, 3553.8541666666674], [268.0, 1421.1076923076923], [259.0, 8135.840579710145], [258.0, 12681.420289855074], [257.0, 1323.4747474747473], [256.0, 187964.96585365853], [267.0, 1885.207317073171], [266.0, 2533.321428571428], [265.0, 3202.236842105263], [264.0, 1118.5714285714284], [286.0, 11398.1], [287.0, 12379.392857142859], [285.0, 6339.0], [284.0, 5199.666666666666], [283.0, 6340.0], [282.0, 11001.826086956522], [281.0, 7961.0], [280.0, 7518.0], [279.0, 6946.166666666666], [273.0, 5606.0], [272.0, 6838.0], [275.0, 7852.333333333333], [274.0, 6867.5], [278.0, 9095.84], [277.0, 9034.854166666666], [276.0, 8519.636363636364], [302.0, 8088.461538461538], [303.0, 7706.833333333334], [301.0, 8107.750000000001], [300.0, 7110.0], [299.0, 7725.208333333333], [298.0, 5793.5], [297.0, 6827.5], [296.0, 7422.642857142859], [295.0, 6584.375], [289.0, 6870.0], [288.0, 12634.794117647061], [291.0, 6988.428571428572], [290.0, 9030.934426229507], [294.0, 7281.8421052631575], [293.0, 6889.0], [292.0, 4924.25], [318.0, 5828.428571428572], [319.0, 9625.636363636366], [317.0, 6465.5], [316.0, 8338.928571428572], [315.0, 3579.428571428571], [314.0, 9443.09756097561], [313.0, 8711.444444444445], [312.0, 9056.000000000002], [311.0, 6943.2], [305.0, 5369.0], [304.0, 8850.693877551019], [307.0, 7654.714285714286], [306.0, 7953.181818181817], [310.0, 7777.25], [309.0, 5782.692307692307], [308.0, 8123.108108108107], [334.0, 7644.187499999999], [335.0, 32691.45614035088], [333.0, 6396.176470588235], [332.0, 8369.40909090909], [331.0, 7448.333333333333], [330.0, 9999.090909090908], [329.0, 10185.9], [328.0, 8603.239999999998], [327.0, 5387.999999999999], [321.0, 8291.666666666668], [320.0, 8661.666666666672], [323.0, 7630.5], [322.0, 6248.333333333333], [326.0, 6515.0], [325.0, 8734.339999999998], [324.0, 7418.666666666667], [348.0, 4023.666666666667], [336.0, 25935.246963562742], [337.0, 2074.4375], [339.0, 3794.709677419354], [338.0, 1728.0], [347.0, 4034.5], [346.0, 4031.8888888888887], [345.0, 4042.294117647059], [344.0, 4037.9365079365084], [342.0, 3522.823529411765], [343.0, 4038.822222222221], [341.0, 2773.8333333333335], [340.0, 3860.8761904761905], [1.0, 25.280174146014843]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}, {"data": [[83.40492000000012, 4473.3134400000035]], "isOverall": false, "label": "Save API HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 348.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.57467204E12, "maxY": 2206807.6, "series": [{"data": [[1.5746721E12, 4778.55], [1.5746724E12, 2262.516666666667], [1.57467342E12, 27538.816666666666], [1.5746733E12, 44926.8], [1.5746727E12, 4792.9], [1.574673E12, 34763.816666666666], [1.57467354E12, 4143.85], [1.57467294E12, 18384.766666666666], [1.57467324E12, 43285.75], [1.57467282E12, 4773.766666666666], [1.57467312E12, 22787.266666666666], [1.57467222E12, 4768.983333333334], [1.57467252E12, 36647.11666666667], [1.57467306E12, 27123.883333333335], [1.57467336E12, 44522.26666666667], [1.57467246E12, 18213.666666666668], [1.57467276E12, 4778.55], [1.57467234E12, 4768.983333333334], [1.57467264E12, 4788.116666666667], [1.57467204E12, 3018.2833333333333], [1.57467258E12, 4783.333333333333], [1.57467288E12, 4764.2], [1.57467228E12, 4773.766666666666], [1.57467216E12, 4773.766666666666], [1.57467318E12, 31358.783333333333], [1.57467348E12, 7375.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5746721E12, 1429702.2], [1.5746724E12, 676926.0666666667], [1.57467342E12, 1631492.0], [1.5746733E12, 0.0], [1.5746727E12, 1433995.6], [1.574673E12, 140251.06666666668], [1.57467354E12, 495172.13333333336], [1.57467294E12, 868697.9333333333], [1.57467324E12, 0.0], [1.57467282E12, 1428271.0666666667], [1.57467312E12, 0.0], [1.57467222E12, 1426839.9333333333], [1.57467252E12, 2002155.5333333334], [1.57467306E12, 0.0], [1.57467336E12, 0.0], [1.57467246E12, 20035.866666666665], [1.57467276E12, 1429702.2], [1.57467234E12, 1426839.9333333333], [1.57467264E12, 1432564.4666666666], [1.57467204E12, 903045.1333333333], [1.57467258E12, 1431133.3333333333], [1.57467288E12, 1425408.8], [1.57467228E12, 1428271.0666666667], [1.57467216E12, 1428271.0666666667], [1.57467318E12, 0.0], [1.57467348E12, 2206807.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57467354E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.6324626865671649, "minX": 1.57467204E12, "maxY": 49984.98790810155, "series": [{"data": [[1.5746721E12, 12.778778778778761], [1.5746724E12, 38.076109936575094], [1.57467342E12, 49984.98790810155], [1.5746733E12, 980.5302734374992], [1.5746727E12, 26.936127744510955], [1.574673E12, 5.765093304061465], [1.57467354E12, 40.582716049382704], [1.57467294E12, 37.783367556468185], [1.57467324E12, 970.885511651469], [1.57467282E12, 39.85571142284566], [1.57467312E12, 0.6324626865671649], [1.57467222E12, 22.076228686058197], [1.57467252E12, 6214.445835339447], [1.57467306E12, 0.6594090202177302], [1.57467336E12, 1404.7151394422324], [1.57467246E12, 17251.049411764714], [1.57467276E12, 32.11511511511515], [1.57467234E12, 32.636910732196625], [1.57467264E12, 22.205794205794195], [1.57467204E12, 15.272583201267825], [1.57467258E12, 16.89700000000002], [1.57467288E12, 43.10742971887548], [1.57467228E12, 26.746492985971955], [1.57467216E12, 17.56813627254509], [1.57467318E12, 214.7805212620029], [1.57467348E12, 3249.0149156938987]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57467354E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.57467204E12, "maxY": 6680.904474002417, "series": [{"data": [[1.5746721E12, 12.765765765765762], [1.5746724E12, 38.052854122621596], [1.57467342E12, 6680.904474002417], [1.5746733E12, 0.0], [1.5746727E12, 26.9251497005988], [1.574673E12, 4.927552140504944], [1.57467354E12, 40.43456790123455], [1.57467294E12, 37.383983572895254], [1.57467324E12, 0.0], [1.57467282E12, 39.848697394789625], [1.57467312E12, 0.0], [1.57467222E12, 22.06519558676029], [1.57467252E12, 777.3350987000475], [1.57467306E12, 0.0], [1.57467336E12, 0.0], [1.57467246E12, 46.55058823529412], [1.57467276E12, 32.1041041041041], [1.57467234E12, 32.62487462387159], [1.57467264E12, 22.18981018981015], [1.57467204E12, 15.266244057052303], [1.57467258E12, 16.888999999999996], [1.57467288E12, 43.09538152610439], [1.57467228E12, 26.736472945891784], [1.57467216E12, 17.556112224448913], [1.57467318E12, 0.0], [1.57467348E12, 3249.009079118027]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57467354E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.13107822410148, "minX": 1.57467204E12, "maxY": 1969.5482352941187, "series": [{"data": [[1.5746721E12, 0.2002002002002002], [1.5746724E12, 0.13107822410148], [1.57467342E12, 851.7545344619107], [1.5746733E12, 980.5078125000001], [1.5746727E12, 0.187624750499002], [1.574673E12, 0.8090010976948417], [1.57467354E12, 0.2691358024691359], [1.57467294E12, 0.7351129363449691], [1.57467324E12, 970.8662613981761], [1.57467282E12, 0.26853707414829653], [1.57467312E12, 0.6063432835820898], [1.57467222E12, 0.13841524573721162], [1.57467252E12, 905.8521906596034], [1.57467306E12, 0.6407465007776054], [1.57467336E12, 1404.693227091634], [1.57467246E12, 1969.5482352941187], [1.57467276E12, 0.15315315315315298], [1.57467234E12, 0.17652958876629896], [1.57467264E12, 0.23976023976023988], [1.57467204E12, 0.9683042789223444], [1.57467258E12, 0.15200000000000014], [1.57467288E12, 0.15461847389558236], [1.57467228E12, 0.1372745490981964], [1.57467216E12, 0.20941883767535086], [1.57467318E12, 214.75994513031546], [1.57467348E12, 0.8281452658884549]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57467354E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.57467204E12, "maxY": 14355.0, "series": [{"data": [[1.5746721E12, 107.0], [1.5746724E12, 265.0], [1.57467246E12, 3592.0], [1.57467342E12, 14355.0], [1.57467276E12, 209.0], [1.57467234E12, 175.0], [1.57467264E12, 157.0], [1.5746727E12, 192.0], [1.57467204E12, 103.0], [1.574673E12, 63.0], [1.57467258E12, 125.0], [1.57467354E12, 240.0], [1.57467288E12, 397.0], [1.57467294E12, 644.0], [1.57467228E12, 229.0], [1.57467282E12, 478.0], [1.57467216E12, 98.0], [1.57467222E12, 126.0], [1.57467252E12, 6820.0], [1.57467348E12, 13811.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5746721E12, 7.0], [1.5746724E12, 18.0], [1.57467246E12, 171.0], [1.57467342E12, 3297.0], [1.57467276E12, 16.0], [1.57467234E12, 16.0], [1.57467264E12, 11.0], [1.5746727E12, 13.0], [1.57467204E12, 7.0], [1.574673E12, 26.0], [1.57467258E12, 9.0], [1.57467354E12, 23.0], [1.57467288E12, 20.0], [1.57467294E12, 23.0], [1.57467228E12, 14.0], [1.57467282E12, 16.0], [1.57467216E12, 9.0], [1.57467222E12, 11.0], [1.57467252E12, 7.0], [1.57467348E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5746721E12, 17.0], [1.5746724E12, 45.0], [1.57467246E12, 3084.0], [1.57467342E12, 11462.8], [1.57467276E12, 39.0], [1.57467234E12, 40.0], [1.57467264E12, 28.0], [1.5746727E12, 34.0], [1.57467204E12, 23.0], [1.574673E12, 57.0], [1.57467258E12, 21.0], [1.57467354E12, 59.0], [1.57467288E12, 52.0], [1.57467294E12, 84.20000000000005], [1.57467228E12, 31.0], [1.57467282E12, 48.0], [1.57467216E12, 21.0], [1.57467222E12, 27.0], [1.57467252E12, 3295.0], [1.57467348E12, 6436.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5746721E12, 47.0], [1.5746724E12, 90.75999999999976], [1.57467246E12, 3592.0], [1.57467342E12, 13294.77], [1.57467276E12, 66.0], [1.57467234E12, 67.01999999999998], [1.57467264E12, 50.0], [1.5746727E12, 61.940000000000055], [1.57467204E12, 70.3599999999999], [1.574673E12, 63.0], [1.57467258E12, 42.950000000000045], [1.57467354E12, 131.08999999999855], [1.57467288E12, 98.02999999999997], [1.57467294E12, 197.4399999999997], [1.57467228E12, 63.01999999999998], [1.57467282E12, 128.12999999999988], [1.57467216E12, 62.07999999999993], [1.57467222E12, 53.039999999999964], [1.57467252E12, 4409.0], [1.57467348E12, 12125.469999999988]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5746721E12, 21.0], [1.5746724E12, 49.0], [1.57467246E12, 3592.0], [1.57467342E12, 12844.0], [1.57467276E12, 43.0], [1.57467234E12, 44.0], [1.57467264E12, 32.0], [1.5746727E12, 38.0], [1.57467204E12, 33.799999999999955], [1.574673E12, 59.05], [1.57467258E12, 24.0], [1.57467354E12, 66.64999999999998], [1.57467288E12, 60.14999999999998], [1.57467294E12, 101.0], [1.57467228E12, 33.049999999999955], [1.57467282E12, 60.0], [1.57467216E12, 25.0], [1.57467222E12, 29.0], [1.57467252E12, 3821.0], [1.57467348E12, 10826.7]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57467354E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 293831.0, "series": [{"data": [[2.0, 9112.5], [4.0, 4628.5], [7.0, 10076.0], [8.0, 167.0], [9.0, 11464.0], [10.0, 8827.5], [11.0, 51.0], [12.0, 3106.0], [13.0, 58.0], [14.0, 44.0], [15.0, 20.0], [16.0, 26.0], [17.0, 31.0], [18.0, 28.0], [19.0, 20.0], [20.0, 13.0], [21.0, 104.0], [22.0, 54.0], [23.0, 1913.0], [24.0, 2665.0], [25.0, 675.0], [26.0, 3767.5], [27.0, 1011.0], [28.0, 10750.5], [29.0, 959.0], [30.0, 5181.5], [31.0, 7676.0], [33.0, 9531.0], [32.0, 1271.5], [34.0, 5711.0], [36.0, 11161.0], [37.0, 3489.0], [41.0, 6006.5], [40.0, 10594.0], [42.0, 8875.0], [45.0, 7894.0], [44.0, 4444.5], [49.0, 7401.0], [53.0, 11239.0], [56.0, 4293.5], [58.0, 5130.5], [60.0, 13163.0], [63.0, 3966.0], [66.0, 2123.0], [65.0, 9046.0], [64.0, 11216.0], [82.0, 8252.5], [80.0, 11365.0], [85.0, 8732.0], [115.0, 3818.0], [124.0, 236.5], [142.0, 1099.0], [151.0, 2276.0], [155.0, 2935.0], [1.0, 4103.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 64176.5], [3.0, 4006.0], [4.0, 4006.5], [5.0, 0.0], [6.0, 1.0], [7.0, 1.0], [8.0, 1.0], [9.0, 1.0], [10.0, 1.0], [11.0, 1.0], [12.0, 1.0], [204.0, 4189.5], [13.0, 1.0], [14.0, 1.0], [235.0, 293831.0], [15.0, 1.0], [1.0, 13239.0], [16.0, 1.0], [17.0, 1.0], [18.0, 1.0], [19.0, 1.0], [20.0, 1.0], [340.0, 35740.0], [337.0, 4035.0], [21.0, 1.0], [22.0, 1.0], [23.0, 1.0], [24.0, 1.0], [25.0, 1.0], [26.0, 1.0], [28.0, 1.0], [31.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 340.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 13163.0, "series": [{"data": [[2.0, 9112.5], [4.0, 4628.5], [7.0, 10076.0], [8.0, 167.0], [9.0, 11464.0], [10.0, 8827.5], [11.0, 51.0], [12.0, 3106.0], [13.0, 58.0], [14.0, 44.0], [15.0, 20.0], [16.0, 26.0], [17.0, 31.0], [18.0, 28.0], [19.0, 20.0], [20.0, 13.0], [21.0, 104.0], [22.0, 54.0], [23.0, 1913.0], [24.0, 2665.0], [25.0, 675.0], [26.0, 3767.5], [27.0, 1011.0], [28.0, 10750.5], [29.0, 959.0], [30.0, 5181.5], [31.0, 7676.0], [33.0, 9531.0], [32.0, 1271.5], [34.0, 5711.0], [36.0, 11161.0], [37.0, 3489.0], [41.0, 6006.5], [40.0, 10594.0], [42.0, 8875.0], [45.0, 7894.0], [44.0, 4444.5], [49.0, 7401.0], [53.0, 11239.0], [56.0, 4293.5], [58.0, 5130.5], [60.0, 13163.0], [63.0, 3966.0], [66.0, 2123.0], [65.0, 9046.0], [64.0, 11216.0], [82.0, 8252.5], [80.0, 11365.0], [85.0, 8732.0], [115.0, 3818.0], [124.0, 236.5], [142.0, 1099.0], [151.0, 2276.0], [155.0, 2935.0], [1.0, 4103.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [204.0, 0.0], [13.0, 0.0], [14.0, 0.0], [235.0, 0.0], [15.0, 0.0], [1.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [340.0, 0.0], [337.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [28.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 340.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.75, "minX": 1.57467204E12, "maxY": 29.583333333333332, "series": [{"data": [[1.5746721E12, 16.633333333333333], [1.5746724E12, 9.65], [1.57467342E12, 26.1], [1.5746733E12, 16.983333333333334], [1.5746727E12, 16.7], [1.574673E12, 15.516666666666667], [1.57467354E12, 6.75], [1.57467294E12, 16.216666666666665], [1.57467324E12, 16.566666666666666], [1.57467282E12, 16.616666666666667], [1.57467312E12, 10.483333333333333], [1.57467222E12, 16.6], [1.57467252E12, 29.583333333333332], [1.57467306E12, 11.95], [1.57467336E12, 16.766666666666666], [1.57467246E12, 10.35], [1.57467276E12, 16.65], [1.57467234E12, 16.6], [1.57467264E12, 16.7], [1.57467204E12, 10.533333333333333], [1.57467258E12, 16.666666666666668], [1.57467288E12, 16.616666666666667], [1.57467228E12, 16.65], [1.57467216E12, 16.65], [1.57467318E12, 13.166666666666666], [1.57467348E12, 22.966666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57467354E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.57467204E12, "maxY": 25.7, "series": [{"data": [[1.5746721E12, 16.65], [1.5746724E12, 7.883333333333334], [1.57467246E12, 0.23333333333333334], [1.57467342E12, 19.0], [1.57467276E12, 16.65], [1.57467234E12, 16.616666666666667], [1.57467264E12, 16.683333333333334], [1.5746727E12, 16.7], [1.57467204E12, 10.516666666666667], [1.574673E12, 1.6333333333333333], [1.57467258E12, 16.666666666666668], [1.57467354E12, 5.766666666666667], [1.57467288E12, 16.6], [1.57467294E12, 10.116666666666667], [1.57467228E12, 16.633333333333333], [1.57467282E12, 16.633333333333333], [1.57467216E12, 16.633333333333333], [1.57467222E12, 16.616666666666667], [1.57467252E12, 23.316666666666666], [1.57467348E12, 25.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57467336E12, 5.85], [1.57467246E12, 3.4], [1.57467342E12, 1.7166666666666666], [1.57467324E12, 3.95], [1.5746733E12, 4.166666666666667], [1.57467318E12, 0.6333333333333333], [1.57467252E12, 5.633333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.57467306E12, 10.716666666666667], [1.57467354E12, 0.9833333333333333], [1.57467294E12, 6.116666666666666], [1.57467312E12, 4.016666666666667], [1.574673E12, 13.55]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}, {"data": [[1.57467336E12, 10.883333333333333], [1.57467246E12, 3.45], [1.57467342E12, 6.85], [1.57467324E12, 12.5], [1.5746733E12, 12.9], [1.57467312E12, 4.916666666666667], [1.57467318E12, 11.516666666666667], [1.57467252E12, 5.666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57467354E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.57467204E12, "maxY": 25.7, "series": [{"data": [[1.57467306E12, 10.716666666666667], [1.57467354E12, 0.9833333333333333], [1.57467336E12, 16.733333333333334], [1.57467246E12, 6.85], [1.57467294E12, 6.116666666666666], [1.57467342E12, 8.566666666666666], [1.57467324E12, 16.45], [1.5746733E12, 17.066666666666666], [1.57467312E12, 8.933333333333334], [1.57467318E12, 12.15], [1.57467252E12, 11.3], [1.574673E12, 13.55]], "isOverall": false, "label": "Save API HTTP Request-failure", "isController": false}, {"data": [[1.5746721E12, 16.65], [1.5746724E12, 7.883333333333334], [1.57467246E12, 0.23333333333333334], [1.57467342E12, 19.0], [1.57467276E12, 16.65], [1.57467234E12, 16.616666666666667], [1.57467264E12, 16.683333333333334], [1.5746727E12, 16.7], [1.57467204E12, 10.516666666666667], [1.574673E12, 1.6333333333333333], [1.57467258E12, 16.666666666666668], [1.57467354E12, 5.766666666666667], [1.57467288E12, 16.6], [1.57467294E12, 10.116666666666667], [1.57467228E12, 16.633333333333333], [1.57467282E12, 16.633333333333333], [1.57467216E12, 16.633333333333333], [1.57467222E12, 16.616666666666667], [1.57467252E12, 23.316666666666666], [1.57467348E12, 25.7]], "isOverall": false, "label": "Save API HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57467354E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.57467204E12, "maxY": 25.7, "series": [{"data": [[1.5746721E12, 16.65], [1.5746724E12, 7.883333333333334], [1.57467246E12, 0.23333333333333334], [1.57467342E12, 19.0], [1.57467276E12, 16.65], [1.57467234E12, 16.616666666666667], [1.57467264E12, 16.683333333333334], [1.5746727E12, 16.7], [1.57467204E12, 10.516666666666667], [1.574673E12, 1.6333333333333333], [1.57467258E12, 16.666666666666668], [1.57467354E12, 5.766666666666667], [1.57467288E12, 16.6], [1.57467294E12, 10.116666666666667], [1.57467228E12, 16.633333333333333], [1.57467282E12, 16.633333333333333], [1.57467216E12, 16.633333333333333], [1.57467222E12, 16.616666666666667], [1.57467252E12, 23.316666666666666], [1.57467348E12, 25.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57467306E12, 10.716666666666667], [1.57467354E12, 0.9833333333333333], [1.57467336E12, 16.733333333333334], [1.57467246E12, 6.85], [1.57467294E12, 6.116666666666666], [1.57467342E12, 8.566666666666666], [1.57467324E12, 16.45], [1.5746733E12, 17.066666666666666], [1.57467312E12, 8.933333333333334], [1.57467318E12, 12.15], [1.57467252E12, 11.3], [1.574673E12, 13.55]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57467354E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

