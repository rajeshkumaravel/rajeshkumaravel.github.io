/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 73630.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 3.0], [11.7, 3.0], [11.8, 3.0], [11.9, 3.0], [12.0, 3.0], [12.1, 3.0], [12.2, 3.0], [12.3, 3.0], [12.4, 3.0], [12.5, 3.0], [12.6, 3.0], [12.7, 3.0], [12.8, 3.0], [12.9, 3.0], [13.0, 3.0], [13.1, 3.0], [13.2, 3.0], [13.3, 3.0], [13.4, 3.0], [13.5, 3.0], [13.6, 3.0], [13.7, 3.0], [13.8, 3.0], [13.9, 3.0], [14.0, 3.0], [14.1, 3.0], [14.2, 3.0], [14.3, 3.0], [14.4, 3.0], [14.5, 3.0], [14.6, 3.0], [14.7, 3.0], [14.8, 3.0], [14.9, 3.0], [15.0, 3.0], [15.1, 3.0], [15.2, 3.0], [15.3, 3.0], [15.4, 3.0], [15.5, 4.0], [15.6, 4.0], [15.7, 4.0], [15.8, 4.0], [15.9, 4.0], [16.0, 4.0], [16.1, 4.0], [16.2, 4.0], [16.3, 4.0], [16.4, 4.0], [16.5, 4.0], [16.6, 4.0], [16.7, 4.0], [16.8, 4.0], [16.9, 4.0], [17.0, 4.0], [17.1, 4.0], [17.2, 4.0], [17.3, 4.0], [17.4, 4.0], [17.5, 4.0], [17.6, 4.0], [17.7, 4.0], [17.8, 4.0], [17.9, 4.0], [18.0, 4.0], [18.1, 4.0], [18.2, 4.0], [18.3, 4.0], [18.4, 4.0], [18.5, 4.0], [18.6, 4.0], [18.7, 4.0], [18.8, 4.0], [18.9, 5.0], [19.0, 5.0], [19.1, 5.0], [19.2, 5.0], [19.3, 5.0], [19.4, 5.0], [19.5, 5.0], [19.6, 5.0], [19.7, 5.0], [19.8, 5.0], [19.9, 5.0], [20.0, 5.0], [20.1, 5.0], [20.2, 5.0], [20.3, 5.0], [20.4, 5.0], [20.5, 5.0], [20.6, 5.0], [20.7, 5.0], [20.8, 5.0], [20.9, 5.0], [21.0, 5.0], [21.1, 5.0], [21.2, 5.0], [21.3, 5.0], [21.4, 5.0], [21.5, 5.0], [21.6, 5.0], [21.7, 5.0], [21.8, 6.0], [21.9, 6.0], [22.0, 6.0], [22.1, 6.0], [22.2, 6.0], [22.3, 6.0], [22.4, 6.0], [22.5, 6.0], [22.6, 6.0], [22.7, 6.0], [22.8, 6.0], [22.9, 6.0], [23.0, 6.0], [23.1, 6.0], [23.2, 6.0], [23.3, 6.0], [23.4, 6.0], [23.5, 6.0], [23.6, 6.0], [23.7, 6.0], [23.8, 6.0], [23.9, 6.0], [24.0, 6.0], [24.1, 6.0], [24.2, 6.0], [24.3, 6.0], [24.4, 6.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 8.0], [27.2, 8.0], [27.3, 8.0], [27.4, 8.0], [27.5, 8.0], [27.6, 8.0], [27.7, 8.0], [27.8, 8.0], [27.9, 8.0], [28.0, 8.0], [28.1, 8.0], [28.2, 8.0], [28.3, 8.0], [28.4, 8.0], [28.5, 8.0], [28.6, 8.0], [28.7, 8.0], [28.8, 8.0], [28.9, 8.0], [29.0, 8.0], [29.1, 8.0], [29.2, 8.0], [29.3, 9.0], [29.4, 9.0], [29.5, 9.0], [29.6, 9.0], [29.7, 9.0], [29.8, 9.0], [29.9, 9.0], [30.0, 9.0], [30.1, 9.0], [30.2, 9.0], [30.3, 9.0], [30.4, 9.0], [30.5, 9.0], [30.6, 9.0], [30.7, 9.0], [30.8, 9.0], [30.9, 9.0], [31.0, 9.0], [31.1, 9.0], [31.2, 9.0], [31.3, 9.0], [31.4, 10.0], [31.5, 10.0], [31.6, 10.0], [31.7, 10.0], [31.8, 10.0], [31.9, 10.0], [32.0, 10.0], [32.1, 10.0], [32.2, 10.0], [32.3, 10.0], [32.4, 10.0], [32.5, 10.0], [32.6, 10.0], [32.7, 10.0], [32.8, 10.0], [32.9, 10.0], [33.0, 10.0], [33.1, 10.0], [33.2, 10.0], [33.3, 11.0], [33.4, 11.0], [33.5, 11.0], [33.6, 11.0], [33.7, 11.0], [33.8, 11.0], [33.9, 11.0], [34.0, 11.0], [34.1, 11.0], [34.2, 11.0], [34.3, 11.0], [34.4, 11.0], [34.5, 11.0], [34.6, 11.0], [34.7, 11.0], [34.8, 11.0], [34.9, 11.0], [35.0, 11.0], [35.1, 11.0], [35.2, 12.0], [35.3, 12.0], [35.4, 12.0], [35.5, 12.0], [35.6, 12.0], [35.7, 12.0], [35.8, 12.0], [35.9, 12.0], [36.0, 12.0], [36.1, 12.0], [36.2, 12.0], [36.3, 12.0], [36.4, 12.0], [36.5, 12.0], [36.6, 12.0], [36.7, 12.0], [36.8, 12.0], [36.9, 12.0], [37.0, 12.0], [37.1, 13.0], [37.2, 13.0], [37.3, 13.0], [37.4, 13.0], [37.5, 13.0], [37.6, 13.0], [37.7, 13.0], [37.8, 13.0], [37.9, 13.0], [38.0, 13.0], [38.1, 13.0], [38.2, 13.0], [38.3, 13.0], [38.4, 13.0], [38.5, 13.0], [38.6, 13.0], [38.7, 13.0], [38.8, 13.0], [38.9, 13.0], [39.0, 14.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 14.0], [39.7, 14.0], [39.8, 14.0], [39.9, 14.0], [40.0, 14.0], [40.1, 14.0], [40.2, 14.0], [40.3, 14.0], [40.4, 14.0], [40.5, 14.0], [40.6, 14.0], [40.7, 14.0], [40.8, 14.0], [40.9, 15.0], [41.0, 15.0], [41.1, 15.0], [41.2, 15.0], [41.3, 15.0], [41.4, 15.0], [41.5, 15.0], [41.6, 15.0], [41.7, 15.0], [41.8, 15.0], [41.9, 15.0], [42.0, 15.0], [42.1, 15.0], [42.2, 15.0], [42.3, 15.0], [42.4, 15.0], [42.5, 15.0], [42.6, 15.0], [42.7, 15.0], [42.8, 16.0], [42.9, 16.0], [43.0, 16.0], [43.1, 16.0], [43.2, 16.0], [43.3, 16.0], [43.4, 16.0], [43.5, 16.0], [43.6, 16.0], [43.7, 16.0], [43.8, 16.0], [43.9, 16.0], [44.0, 16.0], [44.1, 16.0], [44.2, 16.0], [44.3, 16.0], [44.4, 16.0], [44.5, 16.0], [44.6, 17.0], [44.7, 17.0], [44.8, 17.0], [44.9, 17.0], [45.0, 17.0], [45.1, 17.0], [45.2, 17.0], [45.3, 17.0], [45.4, 17.0], [45.5, 17.0], [45.6, 17.0], [45.7, 17.0], [45.8, 17.0], [45.9, 17.0], [46.0, 17.0], [46.1, 17.0], [46.2, 17.0], [46.3, 17.0], [46.4, 17.0], [46.5, 18.0], [46.6, 18.0], [46.7, 18.0], [46.8, 18.0], [46.9, 18.0], [47.0, 18.0], [47.1, 18.0], [47.2, 18.0], [47.3, 18.0], [47.4, 18.0], [47.5, 18.0], [47.6, 18.0], [47.7, 18.0], [47.8, 18.0], [47.9, 18.0], [48.0, 18.0], [48.1, 18.0], [48.2, 18.0], [48.3, 18.0], [48.4, 19.0], [48.5, 19.0], [48.6, 19.0], [48.7, 19.0], [48.8, 19.0], [48.9, 19.0], [49.0, 19.0], [49.1, 19.0], [49.2, 19.0], [49.3, 19.0], [49.4, 19.0], [49.5, 19.0], [49.6, 19.0], [49.7, 19.0], [49.8, 19.0], [49.9, 19.0], [50.0, 19.0], [50.1, 19.0], [50.2, 20.0], [50.3, 20.0], [50.4, 20.0], [50.5, 20.0], [50.6, 20.0], [50.7, 20.0], [50.8, 20.0], [50.9, 20.0], [51.0, 20.0], [51.1, 20.0], [51.2, 20.0], [51.3, 20.0], [51.4, 20.0], [51.5, 20.0], [51.6, 20.0], [51.7, 20.0], [51.8, 20.0], [51.9, 20.0], [52.0, 20.0], [52.1, 20.0], [52.2, 21.0], [52.3, 21.0], [52.4, 21.0], [52.5, 21.0], [52.6, 21.0], [52.7, 21.0], [52.8, 21.0], [52.9, 21.0], [53.0, 21.0], [53.1, 21.0], [53.2, 21.0], [53.3, 21.0], [53.4, 21.0], [53.5, 21.0], [53.6, 21.0], [53.7, 21.0], [53.8, 21.0], [53.9, 21.0], [54.0, 21.0], [54.1, 22.0], [54.2, 22.0], [54.3, 22.0], [54.4, 22.0], [54.5, 22.0], [54.6, 22.0], [54.7, 22.0], [54.8, 22.0], [54.9, 22.0], [55.0, 22.0], [55.1, 22.0], [55.2, 22.0], [55.3, 22.0], [55.4, 22.0], [55.5, 22.0], [55.6, 22.0], [55.7, 22.0], [55.8, 22.0], [55.9, 23.0], [56.0, 23.0], [56.1, 23.0], [56.2, 23.0], [56.3, 23.0], [56.4, 23.0], [56.5, 23.0], [56.6, 23.0], [56.7, 23.0], [56.8, 23.0], [56.9, 23.0], [57.0, 23.0], [57.1, 23.0], [57.2, 23.0], [57.3, 23.0], [57.4, 23.0], [57.5, 23.0], [57.6, 23.0], [57.7, 24.0], [57.8, 24.0], [57.9, 24.0], [58.0, 24.0], [58.1, 24.0], [58.2, 24.0], [58.3, 24.0], [58.4, 24.0], [58.5, 24.0], [58.6, 24.0], [58.7, 24.0], [58.8, 24.0], [58.9, 24.0], [59.0, 24.0], [59.1, 24.0], [59.2, 24.0], [59.3, 24.0], [59.4, 25.0], [59.5, 25.0], [59.6, 25.0], [59.7, 25.0], [59.8, 25.0], [59.9, 25.0], [60.0, 25.0], [60.1, 25.0], [60.2, 25.0], [60.3, 25.0], [60.4, 25.0], [60.5, 25.0], [60.6, 25.0], [60.7, 25.0], [60.8, 25.0], [60.9, 25.0], [61.0, 25.0], [61.1, 26.0], [61.2, 26.0], [61.3, 26.0], [61.4, 26.0], [61.5, 26.0], [61.6, 26.0], [61.7, 26.0], [61.8, 26.0], [61.9, 26.0], [62.0, 26.0], [62.1, 26.0], [62.2, 26.0], [62.3, 26.0], [62.4, 26.0], [62.5, 26.0], [62.6, 26.0], [62.7, 27.0], [62.8, 27.0], [62.9, 27.0], [63.0, 27.0], [63.1, 27.0], [63.2, 27.0], [63.3, 27.0], [63.4, 27.0], [63.5, 27.0], [63.6, 27.0], [63.7, 27.0], [63.8, 27.0], [63.9, 27.0], [64.0, 27.0], [64.1, 27.0], [64.2, 27.0], [64.3, 28.0], [64.4, 28.0], [64.5, 28.0], [64.6, 28.0], [64.7, 28.0], [64.8, 28.0], [64.9, 28.0], [65.0, 28.0], [65.1, 28.0], [65.2, 28.0], [65.3, 28.0], [65.4, 28.0], [65.5, 28.0], [65.6, 28.0], [65.7, 29.0], [65.8, 29.0], [65.9, 29.0], [66.0, 29.0], [66.1, 29.0], [66.2, 29.0], [66.3, 29.0], [66.4, 29.0], [66.5, 29.0], [66.6, 29.0], [66.7, 29.0], [66.8, 29.0], [66.9, 29.0], [67.0, 29.0], [67.1, 29.0], [67.2, 30.0], [67.3, 30.0], [67.4, 30.0], [67.5, 30.0], [67.6, 30.0], [67.7, 30.0], [67.8, 30.0], [67.9, 30.0], [68.0, 30.0], [68.1, 30.0], [68.2, 30.0], [68.3, 30.0], [68.4, 31.0], [68.5, 31.0], [68.6, 31.0], [68.7, 31.0], [68.8, 31.0], [68.9, 31.0], [69.0, 31.0], [69.1, 31.0], [69.2, 31.0], [69.3, 31.0], [69.4, 31.0], [69.5, 31.0], [69.6, 31.0], [69.7, 31.0], [69.8, 32.0], [69.9, 32.0], [70.0, 32.0], [70.1, 32.0], [70.2, 32.0], [70.3, 32.0], [70.4, 32.0], [70.5, 32.0], [70.6, 32.0], [70.7, 32.0], [70.8, 32.0], [70.9, 33.0], [71.0, 33.0], [71.1, 33.0], [71.2, 33.0], [71.3, 33.0], [71.4, 33.0], [71.5, 33.0], [71.6, 33.0], [71.7, 33.0], [71.8, 33.0], [71.9, 33.0], [72.0, 33.0], [72.1, 34.0], [72.2, 34.0], [72.3, 34.0], [72.4, 34.0], [72.5, 34.0], [72.6, 34.0], [72.7, 34.0], [72.8, 34.0], [72.9, 34.0], [73.0, 34.0], [73.1, 35.0], [73.2, 35.0], [73.3, 35.0], [73.4, 35.0], [73.5, 35.0], [73.6, 35.0], [73.7, 35.0], [73.8, 35.0], [73.9, 35.0], [74.0, 35.0], [74.1, 36.0], [74.2, 36.0], [74.3, 36.0], [74.4, 36.0], [74.5, 36.0], [74.6, 36.0], [74.7, 36.0], [74.8, 36.0], [74.9, 37.0], [75.0, 37.0], [75.1, 37.0], [75.2, 37.0], [75.3, 37.0], [75.4, 37.0], [75.5, 37.0], [75.6, 38.0], [75.7, 38.0], [75.8, 38.0], [75.9, 38.0], [76.0, 38.0], [76.1, 38.0], [76.2, 38.0], [76.3, 39.0], [76.4, 39.0], [76.5, 39.0], [76.6, 39.0], [76.7, 39.0], [76.8, 39.0], [76.9, 40.0], [77.0, 40.0], [77.1, 40.0], [77.2, 40.0], [77.3, 40.0], [77.4, 41.0], [77.5, 41.0], [77.6, 41.0], [77.7, 41.0], [77.8, 41.0], [77.9, 42.0], [78.0, 42.0], [78.1, 42.0], [78.2, 42.0], [78.3, 42.0], [78.4, 43.0], [78.5, 43.0], [78.6, 43.0], [78.7, 43.0], [78.8, 44.0], [78.9, 44.0], [79.0, 44.0], [79.1, 44.0], [79.2, 45.0], [79.3, 45.0], [79.4, 45.0], [79.5, 46.0], [79.6, 46.0], [79.7, 46.0], [79.8, 46.0], [79.9, 47.0], [80.0, 47.0], [80.1, 48.0], [80.2, 48.0], [80.3, 48.0], [80.4, 49.0], [80.5, 49.0], [80.6, 49.0], [80.7, 50.0], [80.8, 50.0], [80.9, 50.0], [81.0, 51.0], [81.1, 51.0], [81.2, 52.0], [81.3, 52.0], [81.4, 53.0], [81.5, 53.0], [81.6, 53.0], [81.7, 54.0], [81.8, 54.0], [81.9, 55.0], [82.0, 56.0], [82.1, 56.0], [82.2, 57.0], [82.3, 57.0], [82.4, 58.0], [82.5, 58.0], [82.6, 59.0], [82.7, 59.0], [82.8, 60.0], [82.9, 61.0], [83.0, 61.0], [83.1, 62.0], [83.2, 63.0], [83.3, 64.0], [83.4, 65.0], [83.5, 66.0], [83.6, 67.0], [83.7, 68.0], [83.8, 69.0], [83.9, 70.0], [84.0, 72.0], [84.1, 73.0], [84.2, 74.0], [84.3, 76.0], [84.4, 77.0], [84.5, 79.0], [84.6, 80.0], [84.7, 83.0], [84.8, 85.0], [84.9, 87.0], [85.0, 90.0], [85.1, 93.0], [85.2, 96.0], [85.3, 98.0], [85.4, 103.0], [85.5, 106.0], [85.6, 110.0], [85.7, 114.0], [85.8, 118.0], [85.9, 121.0], [86.0, 127.0], [86.1, 133.0], [86.2, 142.0], [86.3, 151.0], [86.4, 160.0], [86.5, 175.0], [86.6, 189.0], [86.7, 210.0], [86.8, 236.0], [86.9, 248.0], [87.0, 270.0], [87.1, 291.0], [87.2, 319.0], [87.3, 348.0], [87.4, 386.0], [87.5, 483.0], [87.6, 549.0], [87.7, 638.0], [87.8, 688.0], [87.9, 718.0], [88.0, 781.0], [88.1, 839.0], [88.2, 890.0], [88.3, 962.0], [88.4, 1003.0], [88.5, 1059.0], [88.6, 1118.0], [88.7, 1162.0], [88.8, 1188.0], [88.9, 1212.0], [89.0, 1237.0], [89.1, 1263.0], [89.2, 1315.0], [89.3, 1375.0], [89.4, 1458.0], [89.5, 1529.0], [89.6, 1719.0], [89.7, 1880.0], [89.8, 2051.0], [89.9, 2101.0], [90.0, 2162.0], [90.1, 2232.0], [90.2, 2291.0], [90.3, 2330.0], [90.4, 2377.0], [90.5, 2403.0], [90.6, 2421.0], [90.7, 2455.0], [90.8, 2491.0], [90.9, 2523.0], [91.0, 2544.0], [91.1, 2562.0], [91.2, 2579.0], [91.3, 2591.0], [91.4, 2610.0], [91.5, 2633.0], [91.6, 2669.0], [91.7, 2697.0], [91.8, 2712.0], [91.9, 2727.0], [92.0, 2738.0], [92.1, 2749.0], [92.2, 2762.0], [92.3, 2775.0], [92.4, 2789.0], [92.5, 2801.0], [92.6, 2822.0], [92.7, 2834.0], [92.8, 2846.0], [92.9, 2863.0], [93.0, 2873.0], [93.1, 2884.0], [93.2, 2894.0], [93.3, 2905.0], [93.4, 2921.0], [93.5, 2931.0], [93.6, 2973.0], [93.7, 2996.0], [93.8, 3014.0], [93.9, 3052.0], [94.0, 3077.0], [94.1, 3099.0], [94.2, 3111.0], [94.3, 3122.0], [94.4, 3138.0], [94.5, 3163.0], [94.6, 3184.0], [94.7, 3197.0], [94.8, 3209.0], [94.9, 3239.0], [95.0, 3286.0], [95.1, 3318.0], [95.2, 3330.0], [95.3, 3344.0], [95.4, 3366.0], [95.5, 3382.0], [95.6, 3396.0], [95.7, 3416.0], [95.8, 3439.0], [95.9, 3452.0], [96.0, 3488.0], [96.1, 3531.0], [96.2, 3566.0], [96.3, 3584.0], [96.4, 3609.0], [96.5, 3623.0], [96.6, 3650.0], [96.7, 3676.0], [96.8, 3697.0], [96.9, 3720.0], [97.0, 3758.0], [97.1, 3799.0], [97.2, 3835.0], [97.3, 3866.0], [97.4, 3906.0], [97.5, 3941.0], [97.6, 3959.0], [97.7, 3991.0], [97.8, 4025.0], [97.9, 4071.0], [98.0, 4121.0], [98.1, 4152.0], [98.2, 4210.0], [98.3, 4236.0], [98.4, 4283.0], [98.5, 4326.0], [98.6, 4407.0], [98.7, 4469.0], [98.8, 4541.0], [98.9, 4609.0], [99.0, 4656.0], [99.1, 4738.0], [99.2, 4892.0], [99.3, 4981.0], [99.4, 5194.0], [99.5, 5523.0], [99.6, 6752.0], [99.7, 19793.0], [99.8, 33367.0], [99.9, 72479.0], [100.0, 73630.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 85328.0, "series": [{"data": [[0.0, 85328.0], [66700.0, 1.0], [68300.0, 1.0], [65900.0, 1.0], [67500.0, 1.0], [73100.0, 4.0], [72300.0, 8.0], [71500.0, 1.0], [100.0, 1322.0], [32900.0, 2.0], [33300.0, 1.0], [200.0, 484.0], [64900.0, 1.0], [65300.0, 2.0], [65800.0, 3.0], [68200.0, 2.0], [66600.0, 1.0], [67400.0, 1.0], [69000.0, 1.0], [70600.0, 2.0], [73000.0, 2.0], [72200.0, 2.0], [69800.0, 2.0], [71400.0, 1.0], [300.0, 294.0], [400.0, 102.0], [500.0, 112.0], [600.0, 197.0], [700.0, 181.0], [800.0, 202.0], [900.0, 169.0], [1000.0, 175.0], [1100.0, 285.0], [1200.0, 333.0], [1300.0, 144.0], [1400.0, 137.0], [1500.0, 63.0], [1600.0, 68.0], [1700.0, 13.0], [1800.0, 103.0], [1900.0, 42.0], [2000.0, 142.0], [2100.0, 151.0], [2300.0, 268.0], [2200.0, 170.0], [2400.0, 328.0], [2500.0, 536.0], [2600.0, 370.0], [2700.0, 776.0], [2800.0, 751.0], [2900.0, 483.0], [3000.0, 371.0], [3100.0, 637.0], [3300.0, 572.0], [3200.0, 305.0], [3400.0, 421.0], [3500.0, 333.0], [3600.0, 441.0], [3700.0, 291.0], [3800.0, 296.0], [3900.0, 307.0], [4000.0, 243.0], [4300.0, 139.0], [66500.0, 1.0], [4100.0, 236.0], [4200.0, 260.0], [67300.0, 2.0], [68100.0, 1.0], [68900.0, 1.0], [70500.0, 1.0], [71300.0, 2.0], [72900.0, 5.0], [4600.0, 185.0], [4400.0, 166.0], [4500.0, 125.0], [4700.0, 94.0], [4800.0, 60.0], [5000.0, 43.0], [4900.0, 99.0], [5100.0, 56.0], [5200.0, 24.0], [5300.0, 19.0], [5400.0, 43.0], [5500.0, 17.0], [5600.0, 1.0], [5700.0, 18.0], [5800.0, 9.0], [6100.0, 1.0], [6000.0, 3.0], [5900.0, 1.0], [6300.0, 1.0], [6500.0, 35.0], [6600.0, 7.0], [6400.0, 1.0], [6700.0, 47.0], [6800.0, 5.0], [6900.0, 3.0], [7200.0, 2.0], [7600.0, 9.0], [7700.0, 1.0], [7800.0, 1.0], [8700.0, 2.0], [8400.0, 2.0], [8200.0, 12.0], [8900.0, 2.0], [9000.0, 1.0], [9300.0, 1.0], [13700.0, 1.0], [19200.0, 4.0], [18600.0, 6.0], [18800.0, 5.0], [26400.0, 2.0], [26000.0, 1.0], [26800.0, 3.0], [27800.0, 1.0], [28600.0, 2.0], [28800.0, 7.0], [29000.0, 2.0], [29600.0, 1.0], [30400.0, 2.0], [30000.0, 1.0], [30800.0, 3.0], [31200.0, 2.0], [31600.0, 2.0], [31400.0, 1.0], [32000.0, 1.0], [64800.0, 1.0], [66400.0, 1.0], [68800.0, 1.0], [69600.0, 2.0], [67200.0, 1.0], [65600.0, 1.0], [72000.0, 2.0], [72800.0, 9.0], [73600.0, 2.0], [70400.0, 1.0], [67900.0, 2.0], [69500.0, 1.0], [66300.0, 1.0], [68700.0, 2.0], [73500.0, 5.0], [70300.0, 1.0], [71900.0, 1.0], [71100.0, 2.0], [72700.0, 5.0], [65100.0, 1.0], [65500.0, 1.0], [66200.0, 1.0], [67800.0, 2.0], [67000.0, 1.0], [73400.0, 2.0], [71800.0, 1.0], [72600.0, 2.0], [70200.0, 1.0], [71000.0, 1.0], [66900.0, 2.0], [68500.0, 1.0], [69300.0, 2.0], [66100.0, 1.0], [72500.0, 27.0], [70100.0, 1.0], [71700.0, 1.0], [73300.0, 19.0], [70900.0, 1.0], [18700.0, 2.0], [19300.0, 2.0], [19700.0, 12.0], [19900.0, 19.0], [26300.0, 5.0], [26500.0, 6.0], [26900.0, 5.0], [27900.0, 2.0], [29300.0, 2.0], [28700.0, 2.0], [28900.0, 4.0], [29500.0, 1.0], [30300.0, 1.0], [30700.0, 1.0], [31500.0, 3.0], [31700.0, 1.0], [30900.0, 1.0], [31300.0, 1.0], [32100.0, 2.0], [32500.0, 1.0], [65000.0, 2.0], [65400.0, 1.0], [66000.0, 1.0], [67600.0, 1.0], [68400.0, 1.0], [66800.0, 1.0], [69200.0, 2.0], [73200.0, 15.0], [72400.0, 13.0], [70000.0, 2.0], [70800.0, 1.0], [71600.0, 1.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 73600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1004.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 87171.0, "series": [{"data": [[0.0, 1004.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1706.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10119.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 87171.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 23.449735449735464, "minX": 1.57493694E12, "maxY": 200.0, "series": [{"data": [[1.57493694E12, 50.368589743589766], [1.57493724E12, 101.7435433459452], [1.57493706E12, 200.0], [1.57493736E12, 23.449735449735464], [1.57493718E12, 142.96501279045023], [1.574937E12, 111.76153846153846], [1.5749373E12, 70.258862876254], [1.57493712E12, 199.83203049913507]], "isOverall": false, "label": "1. Save API", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57493736E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.669421487603305, "minX": 1.0, "maxY": 3093.065363881398, "series": [{"data": [[2.0, 42.75], [3.0, 14.57142857142857], [4.0, 18.581818181818182], [5.0, 12.305555555555554], [6.0, 96.28571428571428], [7.0, 268.3958333333333], [8.0, 90.01250000000002], [9.0, 43.2844827586207], [10.0, 21.857142857142872], [11.0, 46.07407407407408], [12.0, 16.027906976744166], [13.0, 14.065573770491804], [14.0, 44.14999999999998], [15.0, 13.90229885057471], [16.0, 36.00613496932512], [17.0, 248.09333333333348], [18.0, 15.496183206106863], [19.0, 19.718750000000007], [20.0, 33.90721649484536], [21.0, 23.873170731707297], [22.0, 104.80952380952381], [23.0, 143.59936908517338], [24.0, 26.415300546448087], [25.0, 140.25000000000006], [26.0, 9.381374722838132], [27.0, 53.66153846153848], [28.0, 79.375], [29.0, 24.6447688564477], [30.0, 48.96011396011398], [31.0, 44.30344827586204], [32.0, 53.3710407239819], [33.0, 55.13432835820898], [34.0, 857.9364640883965], [35.0, 1439.025641025641], [36.0, 1137.0920398009953], [37.0, 1074.1145833333326], [38.0, 1117.57], [39.0, 687.6842105263158], [40.0, 943.3278688524588], [41.0, 1185.3454545454545], [42.0, 1035.6258741258746], [43.0, 83.23809523809526], [44.0, 128.82722513089007], [45.0, 24.507853403141333], [46.0, 200.15384615384616], [47.0, 35.92473118279566], [48.0, 62.17605633802815], [49.0, 10.906832298136642], [50.0, 30.097222222222214], [51.0, 82.6632653061225], [52.0, 103.90909090909095], [53.0, 140.483231707317], [54.0, 50.07272727272727], [55.0, 112.8444444444444], [56.0, 26.69067796610168], [57.0, 13.152173913043477], [58.0, 69.70526315789482], [59.0, 93.12903225806453], [60.0, 28.748717948717943], [61.0, 243.1271929824561], [62.0, 48.82476635514024], [63.0, 238.67249999999993], [65.0, 50.16], [66.0, 61.826086956521756], [67.0, 21.349056603773573], [64.0, 428.2285714285716], [69.0, 160.35518292682931], [70.0, 1206.1587301587304], [71.0, 721.4827586206895], [68.0, 13.016143497757826], [72.0, 239.17241379310346], [74.0, 39.51101321585899], [75.0, 121.64548319327719], [73.0, 2.669421487603305], [76.0, 52.59417040358743], [77.0, 133.91641337386017], [78.0, 315.87999999999994], [79.0, 81.62500000000009], [80.0, 22.479616306954444], [81.0, 341.3378378378378], [83.0, 667.8675675675676], [82.0, 9.040000000000003], [85.0, 15.474358974358983], [86.0, 39.67281105990786], [87.0, 726.0860215053763], [84.0, 25.614999999999974], [88.0, 2214.5172413793107], [89.0, 2627.2903225806444], [90.0, 2904.590163934426], [91.0, 2641.223140495865], [93.0, 2894.6840148698884], [94.0, 1922.5641025641019], [95.0, 1752.1675213675226], [92.0, 2582.8695652173915], [96.0, 15.599025974025981], [97.0, 127.72988505747114], [98.0, 97.96808510638303], [99.0, 391.7689873417725], [100.0, 82.39999999999996], [101.0, 81.05387205387211], [103.0, 25.39968152866241], [102.0, 12.01349325337331], [104.0, 108.12105263157896], [105.0, 207.78208955223855], [106.0, 3093.065363881398], [107.0, 2812.0232558139537], [108.0, 2900.574999999999], [109.0, 2588.79357798165], [110.0, 2442.325635103927], [111.0, 2276.5320512820526], [113.0, 2246.222070844687], [115.0, 60.30131004366814], [114.0, 95.54569536423845], [112.0, 2554.3935309973035], [116.0, 152.27265029635927], [118.0, 229.96460176991147], [119.0, 80.75], [117.0, 295.44961240310084], [123.0, 111.2744186046511], [122.0, 293.83666881859295], [121.0, 66.81368307193095], [120.0, 32.69178082191783], [127.0, 18.81012658227848], [126.0, 22.440677966101692], [125.0, 13.203703703703702], [124.0, 135.22831561275873], [135.0, 19.49180327868852], [134.0, 15.636363636363628], [133.0, 15.452830188679233], [132.0, 11.7764705882353], [131.0, 21.63720316622691], [130.0, 75.50943396226413], [129.0, 24.644726407613007], [128.0, 22.657216494845365], [143.0, 18.125000000000004], [142.0, 16.125000000000004], [141.0, 12.191780821917806], [140.0, 15.270270270270268], [139.0, 75.11377245508982], [138.0, 19.185185185185198], [137.0, 15.916666666666668], [136.0, 26.1376404494382], [151.0, 22.188679245283016], [150.0, 24.803278688524586], [149.0, 21.338461538461544], [148.0, 55.787197231833915], [147.0, 39.02597402597404], [146.0, 26.794378698224858], [145.0, 17.470588235294116], [144.0, 26.656249999999996], [159.0, 32.532608695652165], [158.0, 29.684210526315784], [157.0, 30.531496062992115], [156.0, 26.272527472527468], [155.0, 43.483333333333334], [154.0, 25.74285714285714], [153.0, 46.25409836065575], [152.0, 25.46099290780142], [167.0, 14.135135135135139], [166.0, 5.222222222222222], [165.0, 19.773584905660375], [164.0, 28.30246913580246], [163.0, 41.53593429158115], [162.0, 26.119318181818183], [161.0, 52.89944134078214], [160.0, 29.66666666666668], [175.0, 21.488888888888894], [174.0, 30.243243243243246], [173.0, 61.35], [172.0, 50.904347826086955], [171.0, 39.0091428571429], [170.0, 18.937777777777782], [169.0, 31.149333333333352], [168.0, 39.308026030368765], [183.0, 19.83240223463688], [182.0, 39.283582089552255], [181.0, 27.399999999999995], [180.0, 23.67353951890034], [179.0, 23.875], [178.0, 25.566666666666666], [177.0, 48.61739130434784], [176.0, 26.832432432432434], [191.0, 53.757894736842104], [190.0, 25.931506849315067], [189.0, 41.99242424242427], [188.0, 58.54098360655733], [187.0, 26.895833333333332], [186.0, 49.893333333333345], [185.0, 31.122448979591837], [184.0, 23.91549295774648], [199.0, 32.095446982302256], [198.0, 20.938005390835585], [197.0, 25.00997150997149], [196.0, 34.14607948442533], [195.0, 1884.8012232415913], [194.0, 1706.2100000000012], [193.0, 196.8122448979594], [192.0, 51.18779342723006], [200.0, 1144.7371819217738], [1.0, 46.67032967032965]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}, {"data": [[140.84798000000282, 553.0059900000106]], "isOverall": false, "label": "Save API HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 621.8333333333334, "minX": 1.57493694E12, "maxY": 1519385.55, "series": [{"data": [[1.57493694E12, 5969.6], [1.57493724E12, 188323.3], [1.57493706E12, 21575.066666666666], [1.57493736E12, 196736.95], [1.57493718E12, 1519385.55], [1.574937E12, 621.8333333333334], [1.5749373E12, 570943.4166666666], [1.57493712E12, 1234804.5666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57493694E12, 350396.8], [1.57493724E12, 512679.93333333335], [1.57493706E12, 783900.5333333333], [1.57493736E12, 378473.4666666667], [1.57493718E12, 477303.3333333333], [1.574937E12, 36499.666666666664], [1.5749373E12, 447822.8333333333], [1.57493712E12, 614879.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57493736E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 234.47457898102735, "minX": 1.57493694E12, "maxY": 7728.367981283409, "series": [{"data": [[1.57493694E12, 430.358173076923], [1.57493724E12, 1039.0379996709955], [1.57493706E12, 7728.367981283409], [1.57493736E12, 235.90168970814022], [1.57493718E12, 234.47457898102735], [1.574937E12, 1242.9230769230767], [1.5749373E12, 319.5277591973256], [1.57493712E12, 326.9011661433962]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57493736E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 181.7648955446602, "minX": 1.57493694E12, "maxY": 2974.5518048128365, "series": [{"data": [[1.57493694E12, 430.350961538462], [1.57493724E12, 990.8083566376071], [1.57493706E12, 2974.5518048128365], [1.57493736E12, 232.52124935995946], [1.57493718E12, 181.7648955446602], [1.574937E12, 1242.9153846153847], [1.5749373E12, 307.0674247491621], [1.57493712E12, 302.20042288716604]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57493736E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.14823717948717968, "minX": 1.57493694E12, "maxY": 101.27807486631009, "series": [{"data": [[1.57493694E12, 0.14823717948717968], [1.57493724E12, 50.15824971212369], [1.57493706E12, 101.27807486631009], [1.57493736E12, 3.4178187403993863], [1.57493718E12, 38.37622575143913], [1.574937E12, 0.3692307692307692], [1.5749373E12, 12.126822742474895], [1.57493712E12, 24.6500608701224]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57493736E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.57493694E12, "maxY": 31200.0, "series": [{"data": [[1.57493694E12, 1403.0], [1.57493724E12, 6794.0], [1.57493706E12, 4707.0], [1.57493736E12, 2102.0], [1.57493718E12, 31200.0], [1.574937E12, 1472.0], [1.5749373E12, 4440.0], [1.57493712E12, 13796.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57493694E12, 9.0], [1.57493724E12, 1814.0], [1.57493706E12, 1521.0], [1.57493736E12, 27.0], [1.57493718E12, 156.0], [1.574937E12, 1048.0], [1.5749373E12, 1187.0], [1.57493712E12, 3075.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57493694E12, 856.1000000000001], [1.57493724E12, 4076.6], [1.57493706E12, 4135.700000000001], [1.57493736E12, 1455.3000000000004], [1.57493718E12, 4343.100000000002], [1.574937E12, 1419.0], [1.5749373E12, 3562.4000000000005], [1.57493712E12, 5184.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57493694E12, 1312.06], [1.57493724E12, 5921.520000000002], [1.57493706E12, 4679.0], [1.57493736E12, 1878.04], [1.57493718E12, 28901.510000000002], [1.574937E12, 1471.69], [1.5749373E12, 4167.04], [1.57493712E12, 7854.26000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57493694E12, 973.3999999999996], [1.57493724E12, 4474.599999999999], [1.57493706E12, 4339.0], [1.57493736E12, 1531.55], [1.57493718E12, 19371.95], [1.574937E12, 1446.35], [1.5749373E12, 3853.7999999999975], [1.57493712E12, 5761.45]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57493736E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 72480.0, "series": [{"data": [[2.0, 2437.0], [3.0, 1128.0], [4.0, 2567.5], [5.0, 1475.5], [6.0, 1222.0], [7.0, 2650.0], [8.0, 2987.0], [9.0, 4737.0], [10.0, 2451.5], [11.0, 3219.5], [12.0, 2383.5], [13.0, 3621.0], [14.0, 2315.5], [16.0, 3293.5], [17.0, 3198.0], [18.0, 2746.0], [19.0, 3339.0], [20.0, 2726.0], [21.0, 1226.0], [22.0, 1411.5], [23.0, 2147.5], [24.0, 4373.0], [26.0, 2847.5], [27.0, 3766.0], [29.0, 3697.0], [30.0, 2919.0], [31.0, 1255.0], [33.0, 2798.0], [32.0, 3322.0], [35.0, 1210.0], [34.0, 1240.0], [36.0, 1239.0], [37.0, 1684.0], [39.0, 4219.0], [38.0, 3073.5], [40.0, 1404.0], [41.0, 3320.0], [43.0, 3613.0], [42.0, 2711.0], [44.0, 3798.5], [45.0, 3241.5], [47.0, 3633.5], [46.0, 3983.5], [48.0, 2909.0], [49.0, 2623.0], [51.0, 1198.0], [50.0, 3317.0], [52.0, 4115.5], [53.0, 3346.5], [55.0, 3201.5], [54.0, 2987.0], [56.0, 2990.0], [57.0, 3387.0], [58.0, 3347.5], [59.0, 3618.0], [61.0, 2778.5], [60.0, 3173.5], [62.0, 3120.0], [63.0, 3202.0], [65.0, 3424.5], [64.0, 2800.0], [67.0, 5207.0], [71.0, 2425.0], [69.0, 3021.0], [70.0, 4420.0], [72.0, 2652.5], [73.0, 1914.0], [75.0, 3325.0], [79.0, 1258.0], [76.0, 3164.0], [81.0, 2840.0], [86.0, 3384.5], [87.0, 3547.5], [85.0, 3146.0], [91.0, 726.0], [89.0, 3013.5], [90.0, 2707.0], [95.0, 3444.0], [94.0, 4291.0], [96.0, 1803.0], [98.0, 2065.0], [100.0, 586.5], [101.0, 2108.0], [103.0, 859.0], [104.0, 3050.5], [119.0, 46.0], [121.0, 390.0], [127.0, 259.0], [135.0, 111.0], [141.0, 180.0], [147.0, 299.0], [178.0, 119.0], [215.0, 366.0], [231.0, 3718.0], [248.0, 3553.0], [272.0, 3263.5], [290.0, 3074.0], [309.0, 1211.5], [542.0, 5762.0], [605.0, 3440.0], [679.0, 1095.5], [708.0, 3708.5], [744.0, 5805.0], [766.0, 3070.0], [814.0, 2740.0], [842.0, 3391.0], [954.0, 4020.0], [948.0, 2920.0], [975.0, 30003.0], [972.0, 3194.0], [976.0, 495.0], [1005.0, 3719.0], [1091.0, 1377.5], [1214.0, 1014.0], [1240.0, 3755.0], [1293.0, 2790.5], [1324.0, 2425.0], [1561.0, 3967.5], [1693.0, 4471.0], [2138.0, 6789.0], [2127.0, 19905.5], [2094.0, 27918.0], [2173.0, 28808.0], [2084.0, 30448.0], [2192.0, 13796.0], [2187.0, 30438.0], [2503.0, 28902.0], [1.0, 3411.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[542.0, 4.0], [605.0, 4.0], [679.0, 4.0], [708.0, 3.0], [744.0, 4.0], [766.0, 2.0], [814.0, 5.0], [842.0, 5.0], [954.0, 3.0], [948.0, 2.0], [975.0, 7.0], [972.0, 3.0], [976.0, 2.0], [1005.0, 3.0], [4.0, 2570.5], [1091.0, 4.0], [1214.0, 2.0], [1240.0, 6.0], [1293.0, 6.0], [1324.0, 4.0], [1561.0, 10.0], [1693.0, 5.0], [1748.0, 25.0], [1844.0, 20.0], [1792.0, 25.0], [1875.0, 8.0], [2036.0, 12.0], [2119.0, 26.0], [2138.0, 13.0], [2136.0, 21.0], [2092.0, 22.0], [2084.0, 31.0], [2094.0, 16.0], [2171.0, 30.0], [2127.0, 19.0], [2070.0, 27.0], [2123.0, 24.0], [2077.0, 21.0], [2174.0, 21.0], [2173.0, 20.0], [2262.0, 26.0], [2192.0, 23.0], [2225.0, 18.0], [2187.0, 15.0], [2314.0, 22.0], [2377.0, 23.0], [2392.0, 25.0], [2309.0, 25.0], [2423.0, 27.0], [2503.0, 24.0], [13.0, 4541.0], [23.0, 3549.0], [41.0, 3450.0], [51.0, 5.0], [55.0, 2.0], [59.0, 1761.0], [78.0, 3579.0], [89.0, 8.5], [158.0, 2.0], [178.0, 2.0], [200.0, 72480.0], [215.0, 3.0], [231.0, 2.0], [248.0, 2.0], [1.0, 1356.0], [277.0, 4.0], [272.0, 2.0], [290.0, 2.0], [309.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2503.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 30448.0, "series": [{"data": [[2.0, 2437.0], [3.0, 1128.0], [4.0, 2567.5], [5.0, 1475.5], [6.0, 1222.0], [7.0, 2650.0], [8.0, 2987.0], [9.0, 4737.0], [10.0, 2451.5], [11.0, 3219.5], [12.0, 2383.5], [13.0, 3621.0], [14.0, 2315.5], [16.0, 3293.5], [17.0, 3198.0], [18.0, 2746.0], [19.0, 3339.0], [20.0, 2726.0], [21.0, 1226.0], [22.0, 1411.5], [23.0, 2147.5], [24.0, 4373.0], [26.0, 2847.5], [27.0, 3766.0], [29.0, 3697.0], [30.0, 2919.0], [31.0, 1255.0], [33.0, 2798.0], [32.0, 3322.0], [35.0, 1210.0], [34.0, 1240.0], [36.0, 1239.0], [37.0, 1684.0], [39.0, 4219.0], [38.0, 3073.5], [40.0, 1404.0], [41.0, 3320.0], [43.0, 3613.0], [42.0, 2711.0], [44.0, 3798.5], [45.0, 3241.5], [47.0, 3633.5], [46.0, 3983.5], [48.0, 2909.0], [49.0, 2623.0], [51.0, 1198.0], [50.0, 3317.0], [52.0, 4115.5], [53.0, 3346.5], [55.0, 3201.5], [54.0, 2987.0], [56.0, 2990.0], [57.0, 3387.0], [58.0, 3347.5], [59.0, 3618.0], [61.0, 2778.5], [60.0, 3173.5], [62.0, 3120.0], [63.0, 3202.0], [65.0, 3424.5], [64.0, 2800.0], [67.0, 5207.0], [71.0, 2425.0], [69.0, 3021.0], [70.0, 4420.0], [72.0, 2652.5], [73.0, 1914.0], [75.0, 3325.0], [79.0, 1258.0], [76.0, 3164.0], [81.0, 2840.0], [86.0, 3384.5], [87.0, 3547.5], [85.0, 3146.0], [91.0, 726.0], [89.0, 3013.5], [90.0, 2707.0], [95.0, 3444.0], [94.0, 4291.0], [96.0, 1803.0], [98.0, 2065.0], [100.0, 586.5], [101.0, 2108.0], [103.0, 859.0], [104.0, 3050.5], [119.0, 46.0], [121.0, 390.0], [127.0, 259.0], [135.0, 111.0], [141.0, 180.0], [147.0, 299.0], [178.0, 119.0], [215.0, 366.0], [231.0, 3718.0], [248.0, 3553.0], [272.0, 3263.5], [290.0, 3074.0], [309.0, 1211.5], [542.0, 5762.0], [605.0, 3440.0], [679.0, 1095.5], [708.0, 3708.5], [744.0, 5805.0], [766.0, 3070.0], [814.0, 2740.0], [842.0, 3391.0], [954.0, 4020.0], [948.0, 2920.0], [975.0, 30003.0], [972.0, 3194.0], [976.0, 495.0], [1005.0, 3719.0], [1091.0, 1377.5], [1214.0, 1014.0], [1240.0, 3755.0], [1293.0, 2790.5], [1324.0, 2425.0], [1561.0, 3967.5], [1693.0, 4471.0], [2138.0, 6789.0], [2127.0, 19905.5], [2094.0, 27918.0], [2173.0, 28808.0], [2084.0, 30448.0], [2192.0, 13796.0], [2187.0, 30438.0], [2503.0, 28902.0], [1.0, 3411.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[542.0, 0.0], [605.0, 0.0], [679.0, 0.0], [708.0, 0.0], [744.0, 0.0], [766.0, 0.0], [814.0, 0.0], [842.0, 0.0], [954.0, 0.0], [948.0, 0.0], [975.0, 0.0], [972.0, 0.0], [976.0, 0.0], [1005.0, 0.0], [4.0, 0.0], [1091.0, 0.0], [1214.0, 0.0], [1240.0, 0.0], [1293.0, 0.0], [1324.0, 0.0], [1561.0, 0.0], [1693.0, 0.0], [1748.0, 0.0], [1844.0, 0.0], [1792.0, 0.0], [1875.0, 0.0], [2036.0, 0.0], [2119.0, 0.0], [2138.0, 0.0], [2136.0, 0.0], [2092.0, 0.0], [2084.0, 0.0], [2094.0, 0.0], [2171.0, 0.0], [2127.0, 0.0], [2070.0, 0.0], [2123.0, 0.0], [2077.0, 0.0], [2174.0, 0.0], [2173.0, 0.0], [2262.0, 0.0], [2192.0, 0.0], [2225.0, 0.0], [2187.0, 0.0], [2314.0, 0.0], [2377.0, 0.0], [2392.0, 0.0], [2309.0, 0.0], [2423.0, 0.0], [2503.0, 0.0], [13.0, 0.0], [23.0, 0.0], [41.0, 0.0], [51.0, 0.0], [55.0, 0.0], [59.0, 0.0], [78.0, 0.0], [89.0, 0.0], [158.0, 0.0], [178.0, 0.0], [200.0, 0.0], [215.0, 0.0], [231.0, 0.0], [248.0, 0.0], [1.0, 0.0], [277.0, 0.0], [272.0, 0.0], [290.0, 0.0], [309.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2503.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.75, "minX": 1.57493694E12, "maxY": 624.0, "series": [{"data": [[1.57493694E12, 22.55], [1.57493724E12, 101.11666666666666], [1.57493706E12, 49.86666666666667], [1.57493736E12, 96.96666666666667], [1.57493718E12, 624.0], [1.574937E12, 3.75], [1.5749373E12, 248.26666666666668], [1.57493712E12, 520.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57493736E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.57493694E12, "maxY": 595.2666666666667, "series": [{"data": [[1.57493694E12, 20.8], [1.57493724E12, 30.433333333333334], [1.57493706E12, 46.53333333333333], [1.57493736E12, 22.466666666666665], [1.57493718E12, 28.333333333333332], [1.574937E12, 2.1666666666666665], [1.5749373E12, 26.583333333333332], [1.57493712E12, 36.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57493718E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.57493724E12, 65.01666666666667], [1.57493736E12, 75.18333333333334], [1.57493718E12, 595.2666666666667], [1.5749373E12, 221.9], [1.57493712E12, 483.73333333333335]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}, {"data": [[1.57493724E12, 5.866666666666666], [1.57493706E12, 3.3333333333333335], [1.57493718E12, 1.7833333333333334], [1.5749373E12, 0.6833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57493736E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.1666666666666665, "minX": 1.57493694E12, "maxY": 597.1333333333333, "series": [{"data": [[1.57493724E12, 70.88333333333334], [1.57493706E12, 3.3333333333333335], [1.57493736E12, 75.18333333333334], [1.57493718E12, 597.1333333333333], [1.5749373E12, 222.58333333333334], [1.57493712E12, 483.73333333333335]], "isOverall": false, "label": "Save API HTTP Request-failure", "isController": false}, {"data": [[1.57493694E12, 20.8], [1.57493724E12, 30.433333333333334], [1.57493706E12, 46.53333333333333], [1.57493736E12, 22.466666666666665], [1.57493718E12, 28.333333333333332], [1.574937E12, 2.1666666666666665], [1.5749373E12, 26.583333333333332], [1.57493712E12, 36.5]], "isOverall": false, "label": "Save API HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57493736E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.1666666666666665, "minX": 1.57493694E12, "maxY": 597.1333333333333, "series": [{"data": [[1.57493694E12, 20.8], [1.57493724E12, 30.433333333333334], [1.57493706E12, 46.53333333333333], [1.57493736E12, 22.466666666666665], [1.57493718E12, 28.333333333333332], [1.574937E12, 2.1666666666666665], [1.5749373E12, 26.583333333333332], [1.57493712E12, 36.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57493724E12, 70.88333333333334], [1.57493706E12, 3.3333333333333335], [1.57493736E12, 75.18333333333334], [1.57493718E12, 597.1333333333333], [1.5749373E12, 222.58333333333334], [1.57493712E12, 483.73333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57493736E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

