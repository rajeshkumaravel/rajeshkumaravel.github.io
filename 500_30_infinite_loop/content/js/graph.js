/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 39012.0, "series": [{"data": [[0.0, 2.0], [0.1, 2.0], [0.2, 3.0], [0.3, 3.0], [0.4, 5.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 6.0], [0.9, 8.0], [1.0, 10.0], [1.1, 10.0], [1.2, 12.0], [1.3, 15.0], [1.4, 16.0], [1.5, 18.0], [1.6, 20.0], [1.7, 22.0], [1.8, 25.0], [1.9, 28.0], [2.0, 32.0], [2.1, 36.0], [2.2, 40.0], [2.3, 47.0], [2.4, 55.0], [2.5, 66.0], [2.6, 77.0], [2.7, 84.0], [2.8, 92.0], [2.9, 97.0], [3.0, 108.0], [3.1, 120.0], [3.2, 133.0], [3.3, 143.0], [3.4, 148.0], [3.5, 176.0], [3.6, 190.0], [3.7, 200.0], [3.8, 202.0], [3.9, 206.0], [4.0, 208.0], [4.1, 212.0], [4.2, 220.0], [4.3, 223.0], [4.4, 225.0], [4.5, 228.0], [4.6, 228.0], [4.7, 230.0], [4.8, 231.0], [4.9, 232.0], [5.0, 242.0], [5.1, 246.0], [5.2, 250.0], [5.3, 254.0], [5.4, 255.0], [5.5, 262.0], [5.6, 269.0], [5.7, 270.0], [5.8, 285.0], [5.9, 295.0], [6.0, 300.0], [6.1, 303.0], [6.2, 304.0], [6.3, 307.0], [6.4, 309.0], [6.5, 311.0], [6.6, 314.0], [6.7, 316.0], [6.8, 317.0], [6.9, 318.0], [7.0, 319.0], [7.1, 320.0], [7.2, 321.0], [7.3, 322.0], [7.4, 322.0], [7.5, 324.0], [7.6, 325.0], [7.7, 326.0], [7.8, 327.0], [7.9, 329.0], [8.0, 329.0], [8.1, 330.0], [8.2, 331.0], [8.3, 332.0], [8.4, 333.0], [8.5, 334.0], [8.6, 334.0], [8.7, 335.0], [8.8, 335.0], [8.9, 336.0], [9.0, 337.0], [9.1, 338.0], [9.2, 339.0], [9.3, 340.0], [9.4, 340.0], [9.5, 340.0], [9.6, 341.0], [9.7, 341.0], [9.8, 341.0], [9.9, 343.0], [10.0, 345.0], [10.1, 346.0], [10.2, 348.0], [10.3, 348.0], [10.4, 349.0], [10.5, 349.0], [10.6, 350.0], [10.7, 351.0], [10.8, 353.0], [10.9, 354.0], [11.0, 355.0], [11.1, 356.0], [11.2, 357.0], [11.3, 358.0], [11.4, 359.0], [11.5, 361.0], [11.6, 362.0], [11.7, 362.0], [11.8, 363.0], [11.9, 364.0], [12.0, 364.0], [12.1, 365.0], [12.2, 365.0], [12.3, 366.0], [12.4, 366.0], [12.5, 367.0], [12.6, 368.0], [12.7, 369.0], [12.8, 370.0], [12.9, 370.0], [13.0, 371.0], [13.1, 371.0], [13.2, 372.0], [13.3, 373.0], [13.4, 374.0], [13.5, 375.0], [13.6, 375.0], [13.7, 376.0], [13.8, 377.0], [13.9, 378.0], [14.0, 378.0], [14.1, 378.0], [14.2, 379.0], [14.3, 379.0], [14.4, 380.0], [14.5, 380.0], [14.6, 381.0], [14.7, 381.0], [14.8, 382.0], [14.9, 383.0], [15.0, 383.0], [15.1, 384.0], [15.2, 385.0], [15.3, 388.0], [15.4, 389.0], [15.5, 390.0], [15.6, 390.0], [15.7, 391.0], [15.8, 392.0], [15.9, 392.0], [16.0, 393.0], [16.1, 394.0], [16.2, 395.0], [16.3, 396.0], [16.4, 397.0], [16.5, 398.0], [16.6, 398.0], [16.7, 398.0], [16.8, 399.0], [16.9, 399.0], [17.0, 399.0], [17.1, 399.0], [17.2, 400.0], [17.3, 400.0], [17.4, 400.0], [17.5, 400.0], [17.6, 401.0], [17.7, 401.0], [17.8, 401.0], [17.9, 402.0], [18.0, 402.0], [18.1, 402.0], [18.2, 403.0], [18.3, 403.0], [18.4, 404.0], [18.5, 404.0], [18.6, 405.0], [18.7, 405.0], [18.8, 405.0], [18.9, 405.0], [19.0, 406.0], [19.1, 406.0], [19.2, 407.0], [19.3, 407.0], [19.4, 407.0], [19.5, 408.0], [19.6, 408.0], [19.7, 409.0], [19.8, 409.0], [19.9, 410.0], [20.0, 411.0], [20.1, 412.0], [20.2, 413.0], [20.3, 414.0], [20.4, 415.0], [20.5, 416.0], [20.6, 416.0], [20.7, 418.0], [20.8, 418.0], [20.9, 419.0], [21.0, 419.0], [21.1, 419.0], [21.2, 420.0], [21.3, 420.0], [21.4, 421.0], [21.5, 421.0], [21.6, 422.0], [21.7, 422.0], [21.8, 423.0], [21.9, 423.0], [22.0, 424.0], [22.1, 424.0], [22.2, 425.0], [22.3, 426.0], [22.4, 426.0], [22.5, 427.0], [22.6, 427.0], [22.7, 427.0], [22.8, 428.0], [22.9, 428.0], [23.0, 429.0], [23.1, 429.0], [23.2, 430.0], [23.3, 430.0], [23.4, 430.0], [23.5, 431.0], [23.6, 431.0], [23.7, 431.0], [23.8, 431.0], [23.9, 431.0], [24.0, 432.0], [24.1, 432.0], [24.2, 432.0], [24.3, 432.0], [24.4, 433.0], [24.5, 433.0], [24.6, 434.0], [24.7, 435.0], [24.8, 435.0], [24.9, 435.0], [25.0, 436.0], [25.1, 436.0], [25.2, 436.0], [25.3, 437.0], [25.4, 437.0], [25.5, 437.0], [25.6, 437.0], [25.7, 438.0], [25.8, 438.0], [25.9, 438.0], [26.0, 438.0], [26.1, 439.0], [26.2, 439.0], [26.3, 439.0], [26.4, 439.0], [26.5, 439.0], [26.6, 439.0], [26.7, 440.0], [26.8, 440.0], [26.9, 440.0], [27.0, 440.0], [27.1, 440.0], [27.2, 440.0], [27.3, 441.0], [27.4, 441.0], [27.5, 441.0], [27.6, 441.0], [27.7, 441.0], [27.8, 441.0], [27.9, 442.0], [28.0, 442.0], [28.1, 442.0], [28.2, 443.0], [28.3, 443.0], [28.4, 444.0], [28.5, 444.0], [28.6, 445.0], [28.7, 445.0], [28.8, 446.0], [28.9, 446.0], [29.0, 447.0], [29.1, 448.0], [29.2, 448.0], [29.3, 449.0], [29.4, 450.0], [29.5, 450.0], [29.6, 451.0], [29.7, 451.0], [29.8, 451.0], [29.9, 452.0], [30.0, 452.0], [30.1, 453.0], [30.2, 453.0], [30.3, 453.0], [30.4, 454.0], [30.5, 455.0], [30.6, 456.0], [30.7, 458.0], [30.8, 459.0], [30.9, 460.0], [31.0, 462.0], [31.1, 462.0], [31.2, 463.0], [31.3, 463.0], [31.4, 464.0], [31.5, 465.0], [31.6, 466.0], [31.7, 467.0], [31.8, 468.0], [31.9, 471.0], [32.0, 472.0], [32.1, 473.0], [32.2, 475.0], [32.3, 476.0], [32.4, 477.0], [32.5, 478.0], [32.6, 479.0], [32.7, 480.0], [32.8, 481.0], [32.9, 482.0], [33.0, 483.0], [33.1, 483.0], [33.2, 484.0], [33.3, 484.0], [33.4, 485.0], [33.5, 485.0], [33.6, 486.0], [33.7, 487.0], [33.8, 488.0], [33.9, 488.0], [34.0, 489.0], [34.1, 490.0], [34.2, 491.0], [34.3, 492.0], [34.4, 493.0], [34.5, 494.0], [34.6, 495.0], [34.7, 496.0], [34.8, 496.0], [34.9, 498.0], [35.0, 499.0], [35.1, 500.0], [35.2, 500.0], [35.3, 501.0], [35.4, 502.0], [35.5, 503.0], [35.6, 504.0], [35.7, 504.0], [35.8, 504.0], [35.9, 505.0], [36.0, 506.0], [36.1, 507.0], [36.2, 508.0], [36.3, 508.0], [36.4, 509.0], [36.5, 510.0], [36.6, 512.0], [36.7, 513.0], [36.8, 514.0], [36.9, 515.0], [37.0, 516.0], [37.1, 517.0], [37.2, 518.0], [37.3, 520.0], [37.4, 522.0], [37.5, 524.0], [37.6, 525.0], [37.7, 526.0], [37.8, 528.0], [37.9, 529.0], [38.0, 530.0], [38.1, 531.0], [38.2, 532.0], [38.3, 533.0], [38.4, 534.0], [38.5, 535.0], [38.6, 537.0], [38.7, 538.0], [38.8, 539.0], [38.9, 540.0], [39.0, 541.0], [39.1, 542.0], [39.2, 543.0], [39.3, 544.0], [39.4, 546.0], [39.5, 547.0], [39.6, 547.0], [39.7, 548.0], [39.8, 549.0], [39.9, 551.0], [40.0, 551.0], [40.1, 552.0], [40.2, 553.0], [40.3, 554.0], [40.4, 555.0], [40.5, 556.0], [40.6, 557.0], [40.7, 559.0], [40.8, 559.0], [40.9, 560.0], [41.0, 562.0], [41.1, 563.0], [41.2, 564.0], [41.3, 565.0], [41.4, 566.0], [41.5, 568.0], [41.6, 570.0], [41.7, 571.0], [41.8, 573.0], [41.9, 574.0], [42.0, 575.0], [42.1, 576.0], [42.2, 578.0], [42.3, 580.0], [42.4, 581.0], [42.5, 582.0], [42.6, 584.0], [42.7, 586.0], [42.8, 587.0], [42.9, 588.0], [43.0, 589.0], [43.1, 590.0], [43.2, 591.0], [43.3, 592.0], [43.4, 594.0], [43.5, 596.0], [43.6, 598.0], [43.7, 599.0], [43.8, 601.0], [43.9, 603.0], [44.0, 605.0], [44.1, 606.0], [44.2, 607.0], [44.3, 607.0], [44.4, 608.0], [44.5, 608.0], [44.6, 610.0], [44.7, 612.0], [44.8, 613.0], [44.9, 615.0], [45.0, 618.0], [45.1, 619.0], [45.2, 621.0], [45.3, 623.0], [45.4, 627.0], [45.5, 632.0], [45.6, 637.0], [45.7, 647.0], [45.8, 650.0], [45.9, 653.0], [46.0, 656.0], [46.1, 660.0], [46.2, 663.0], [46.3, 667.0], [46.4, 670.0], [46.5, 672.0], [46.6, 673.0], [46.7, 677.0], [46.8, 681.0], [46.9, 688.0], [47.0, 700.0], [47.1, 708.0], [47.2, 730.0], [47.3, 770.0], [47.4, 831.0], [47.5, 833.0], [47.6, 885.0], [47.7, 931.0], [47.8, 1082.0], [47.9, 1084.0], [48.0, 1084.0], [48.1, 1167.0], [48.2, 1201.0], [48.3, 1309.0], [48.4, 1311.0], [48.5, 1355.0], [48.6, 1356.0], [48.7, 1411.0], [48.8, 1468.0], [48.9, 1554.0], [49.0, 1571.0], [49.1, 1572.0], [49.2, 1573.0], [49.3, 1593.0], [49.4, 1632.0], [49.5, 1644.0], [49.6, 1649.0], [49.7, 1652.0], [49.8, 1658.0], [49.9, 1660.0], [50.0, 1666.0], [50.1, 1674.0], [50.2, 1694.0], [50.3, 1730.0], [50.4, 1738.0], [50.5, 1739.0], [50.6, 1740.0], [50.7, 1754.0], [50.8, 1803.0], [50.9, 1803.0], [51.0, 1805.0], [51.1, 1869.0], [51.2, 1898.0], [51.3, 1906.0], [51.4, 1908.0], [51.5, 1991.0], [51.6, 2001.0], [51.7, 2023.0], [51.8, 2024.0], [51.9, 2028.0], [52.0, 2030.0], [52.1, 2031.0], [52.2, 2032.0], [52.3, 2034.0], [52.4, 2037.0], [52.5, 2039.0], [52.6, 2049.0], [52.7, 2051.0], [52.8, 2055.0], [52.9, 2065.0], [53.0, 2066.0], [53.1, 2067.0], [53.2, 2068.0], [53.3, 2069.0], [53.4, 2071.0], [53.5, 2071.0], [53.6, 2086.0], [53.7, 2088.0], [53.8, 2089.0], [53.9, 2092.0], [54.0, 2093.0], [54.1, 2094.0], [54.2, 2094.0], [54.3, 2145.0], [54.4, 2146.0], [54.5, 2146.0], [54.6, 2157.0], [54.7, 2208.0], [54.8, 2221.0], [54.9, 2225.0], [55.0, 2226.0], [55.1, 2244.0], [55.2, 2244.0], [55.3, 2244.0], [55.4, 2245.0], [55.5, 2246.0], [55.6, 2277.0], [55.7, 2340.0], [55.8, 2359.0], [55.9, 2360.0], [56.0, 2361.0], [56.1, 2389.0], [56.2, 2398.0], [56.3, 2413.0], [56.4, 2418.0], [56.5, 2441.0], [56.6, 2453.0], [56.7, 2458.0], [56.8, 2464.0], [56.9, 2465.0], [57.0, 2466.0], [57.1, 2467.0], [57.2, 2468.0], [57.3, 2468.0], [57.4, 2469.0], [57.5, 2470.0], [57.6, 2471.0], [57.7, 2476.0], [57.8, 2482.0], [57.9, 2486.0], [58.0, 2487.0], [58.1, 2488.0], [58.2, 2489.0], [58.3, 2490.0], [58.4, 2493.0], [58.5, 2496.0], [58.6, 2497.0], [58.7, 2497.0], [58.8, 2497.0], [58.9, 2497.0], [59.0, 2498.0], [59.1, 2498.0], [59.2, 2498.0], [59.3, 2499.0], [59.4, 2500.0], [59.5, 2500.0], [59.6, 2501.0], [59.7, 2517.0], [59.8, 2528.0], [59.9, 2534.0], [60.0, 2535.0], [60.1, 2541.0], [60.2, 2552.0], [60.3, 2556.0], [60.4, 2561.0], [60.5, 2561.0], [60.6, 2562.0], [60.7, 2564.0], [60.8, 2565.0], [60.9, 2565.0], [61.0, 2566.0], [61.1, 2566.0], [61.2, 2567.0], [61.3, 2567.0], [61.4, 2567.0], [61.5, 2568.0], [61.6, 2569.0], [61.7, 2570.0], [61.8, 2571.0], [61.9, 2571.0], [62.0, 2572.0], [62.1, 2573.0], [62.2, 2573.0], [62.3, 2574.0], [62.4, 2574.0], [62.5, 2574.0], [62.6, 2575.0], [62.7, 2575.0], [62.8, 2580.0], [62.9, 2580.0], [63.0, 2582.0], [63.1, 2587.0], [63.2, 2588.0], [63.3, 2589.0], [63.4, 2590.0], [63.5, 2591.0], [63.6, 2591.0], [63.7, 2592.0], [63.8, 2592.0], [63.9, 2592.0], [64.0, 2593.0], [64.1, 2593.0], [64.2, 2596.0], [64.3, 2598.0], [64.4, 2601.0], [64.5, 2602.0], [64.6, 2602.0], [64.7, 2602.0], [64.8, 2603.0], [64.9, 2604.0], [65.0, 2604.0], [65.1, 2604.0], [65.2, 2605.0], [65.3, 2607.0], [65.4, 2609.0], [65.5, 2609.0], [65.6, 2609.0], [65.7, 2610.0], [65.8, 2610.0], [65.9, 2611.0], [66.0, 2611.0], [66.1, 2611.0], [66.2, 2612.0], [66.3, 2612.0], [66.4, 2613.0], [66.5, 2613.0], [66.6, 2614.0], [66.7, 2615.0], [66.8, 2616.0], [66.9, 2619.0], [67.0, 2621.0], [67.1, 2623.0], [67.2, 2627.0], [67.3, 2631.0], [67.4, 2631.0], [67.5, 2631.0], [67.6, 2632.0], [67.7, 2632.0], [67.8, 2632.0], [67.9, 2633.0], [68.0, 2633.0], [68.1, 2634.0], [68.2, 2634.0], [68.3, 2634.0], [68.4, 2635.0], [68.5, 2635.0], [68.6, 2636.0], [68.7, 2637.0], [68.8, 2638.0], [68.9, 2638.0], [69.0, 2643.0], [69.1, 2644.0], [69.2, 2645.0], [69.3, 2645.0], [69.4, 2645.0], [69.5, 2645.0], [69.6, 2646.0], [69.7, 2646.0], [69.8, 2646.0], [69.9, 2646.0], [70.0, 2647.0], [70.1, 2647.0], [70.2, 2647.0], [70.3, 2648.0], [70.4, 2649.0], [70.5, 2649.0], [70.6, 2650.0], [70.7, 2652.0], [70.8, 2652.0], [70.9, 2653.0], [71.0, 2653.0], [71.1, 2653.0], [71.2, 2653.0], [71.3, 2654.0], [71.4, 2654.0], [71.5, 2654.0], [71.6, 2655.0], [71.7, 2655.0], [71.8, 2655.0], [71.9, 2656.0], [72.0, 2659.0], [72.1, 2661.0], [72.2, 2662.0], [72.3, 2663.0], [72.4, 2663.0], [72.5, 2664.0], [72.6, 2664.0], [72.7, 2665.0], [72.8, 2666.0], [72.9, 2667.0], [73.0, 2667.0], [73.1, 2668.0], [73.2, 2671.0], [73.3, 2672.0], [73.4, 2673.0], [73.5, 2674.0], [73.6, 2674.0], [73.7, 2675.0], [73.8, 2675.0], [73.9, 2676.0], [74.0, 2676.0], [74.1, 2682.0], [74.2, 2684.0], [74.3, 2687.0], [74.4, 2700.0], [74.5, 2704.0], [74.6, 2708.0], [74.7, 2708.0], [74.8, 2709.0], [74.9, 2709.0], [75.0, 2709.0], [75.1, 2709.0], [75.2, 2709.0], [75.3, 2710.0], [75.4, 2710.0], [75.5, 2710.0], [75.6, 2711.0], [75.7, 2713.0], [75.8, 2714.0], [75.9, 2715.0], [76.0, 2716.0], [76.1, 2717.0], [76.2, 2718.0], [76.3, 2719.0], [76.4, 2721.0], [76.5, 2722.0], [76.6, 2722.0], [76.7, 2723.0], [76.8, 2727.0], [76.9, 2727.0], [77.0, 2728.0], [77.1, 2729.0], [77.2, 2730.0], [77.3, 2731.0], [77.4, 2732.0], [77.5, 2733.0], [77.6, 2733.0], [77.7, 2735.0], [77.8, 2735.0], [77.9, 2735.0], [78.0, 2737.0], [78.1, 2737.0], [78.2, 2738.0], [78.3, 2739.0], [78.4, 2739.0], [78.5, 2739.0], [78.6, 2748.0], [78.7, 2749.0], [78.8, 2749.0], [78.9, 2749.0], [79.0, 2750.0], [79.1, 2750.0], [79.2, 2750.0], [79.3, 2750.0], [79.4, 2750.0], [79.5, 2750.0], [79.6, 2750.0], [79.7, 2751.0], [79.8, 2751.0], [79.9, 2751.0], [80.0, 2751.0], [80.1, 2752.0], [80.2, 2752.0], [80.3, 2752.0], [80.4, 2752.0], [80.5, 2752.0], [80.6, 2753.0], [80.7, 2754.0], [80.8, 2756.0], [80.9, 2757.0], [81.0, 2758.0], [81.1, 2758.0], [81.2, 2759.0], [81.3, 2759.0], [81.4, 2760.0], [81.5, 2760.0], [81.6, 2760.0], [81.7, 2760.0], [81.8, 2760.0], [81.9, 2761.0], [82.0, 2761.0], [82.1, 2761.0], [82.2, 2761.0], [82.3, 2761.0], [82.4, 2761.0], [82.5, 2762.0], [82.6, 2763.0], [82.7, 2764.0], [82.8, 2764.0], [82.9, 2766.0], [83.0, 2767.0], [83.1, 2767.0], [83.2, 2768.0], [83.3, 2769.0], [83.4, 2771.0], [83.5, 2771.0], [83.6, 2772.0], [83.7, 2773.0], [83.8, 2773.0], [83.9, 2778.0], [84.0, 2778.0], [84.1, 2779.0], [84.2, 2779.0], [84.3, 2779.0], [84.4, 2780.0], [84.5, 2783.0], [84.6, 2785.0], [84.7, 2788.0], [84.8, 2789.0], [84.9, 2793.0], [85.0, 2795.0], [85.1, 2796.0], [85.2, 2796.0], [85.3, 2797.0], [85.4, 2797.0], [85.5, 2797.0], [85.6, 2797.0], [85.7, 2798.0], [85.8, 2802.0], [85.9, 2806.0], [86.0, 2807.0], [86.1, 2807.0], [86.2, 2813.0], [86.3, 2816.0], [86.4, 2817.0], [86.5, 2819.0], [86.6, 2820.0], [86.7, 2821.0], [86.8, 2822.0], [86.9, 2822.0], [87.0, 2823.0], [87.1, 2823.0], [87.2, 2824.0], [87.3, 2825.0], [87.4, 2828.0], [87.5, 2830.0], [87.6, 2833.0], [87.7, 2841.0], [87.8, 2842.0], [87.9, 2842.0], [88.0, 2842.0], [88.1, 2842.0], [88.2, 2843.0], [88.3, 2844.0], [88.4, 2858.0], [88.5, 2881.0], [88.6, 2886.0], [88.7, 2890.0], [88.8, 2894.0], [88.9, 2900.0], [89.0, 2905.0], [89.1, 2909.0], [89.2, 2941.0], [89.3, 2945.0], [89.4, 2949.0], [89.5, 2954.0], [89.6, 2963.0], [89.7, 2970.0], [89.8, 2987.0], [89.9, 2992.0], [90.0, 3005.0], [90.1, 3015.0], [90.2, 3024.0], [90.3, 3028.0], [90.4, 3030.0], [90.5, 3040.0], [90.6, 3048.0], [90.7, 3055.0], [90.8, 3060.0], [90.9, 3064.0], [91.0, 3070.0], [91.1, 3076.0], [91.2, 3097.0], [91.3, 3102.0], [91.4, 3111.0], [91.5, 3118.0], [91.6, 3170.0], [91.7, 3184.0], [91.8, 3186.0], [91.9, 3190.0], [92.0, 3194.0], [92.1, 3219.0], [92.2, 3225.0], [92.3, 3228.0], [92.4, 3229.0], [92.5, 3231.0], [92.6, 3232.0], [92.7, 3240.0], [92.8, 3251.0], [92.9, 3259.0], [93.0, 3264.0], [93.1, 3267.0], [93.2, 3272.0], [93.3, 3307.0], [93.4, 3387.0], [93.5, 3391.0], [93.6, 3404.0], [93.7, 3421.0], [93.8, 3502.0], [93.9, 3539.0], [94.0, 3593.0], [94.1, 3622.0], [94.2, 3630.0], [94.3, 3637.0], [94.4, 3642.0], [94.5, 3645.0], [94.6, 3649.0], [94.7, 3655.0], [94.8, 3668.0], [94.9, 3777.0], [95.0, 4104.0], [95.1, 4104.0], [95.2, 4105.0], [95.3, 4106.0], [95.4, 4107.0], [95.5, 4108.0], [95.6, 4110.0], [95.7, 4142.0], [95.8, 4328.0], [95.9, 4894.0], [96.0, 5589.0], [96.1, 8904.0], [96.2, 9677.0], [96.3, 10582.0], [96.4, 11274.0], [96.5, 11804.0], [96.6, 12906.0], [96.7, 35191.0], [96.8, 35195.0], [96.9, 35199.0], [97.0, 35202.0], [97.1, 35222.0], [97.2, 35235.0], [97.3, 35238.0], [97.4, 35242.0], [97.5, 36920.0], [97.6, 37221.0], [97.7, 37227.0], [97.8, 38015.0], [97.9, 38039.0], [98.0, 38045.0], [98.1, 38051.0], [98.2, 38057.0], [98.3, 38065.0], [98.4, 38072.0], [98.5, 38082.0], [98.6, 38512.0], [98.7, 38824.0], [98.8, 38830.0], [98.9, 38837.0], [99.0, 38845.0], [99.1, 38851.0], [99.2, 38859.0], [99.3, 38942.0], [99.4, 38948.0], [99.5, 38959.0], [99.6, 38963.0], [99.7, 38970.0], [99.8, 38987.0], [99.9, 38992.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2707.0, "series": [{"data": [[0.0, 439.0], [100.0, 118.0], [35100.0, 36.0], [36900.0, 2.0], [37900.0, 1.0], [38500.0, 1.0], [38900.0, 107.0], [200.0, 345.0], [300.0, 1686.0], [400.0, 2707.0], [500.0, 1301.0], [600.0, 494.0], [700.0, 52.0], [800.0, 44.0], [900.0, 16.0], [1000.0, 54.0], [1100.0, 6.0], [1200.0, 21.0], [1300.0, 62.0], [1400.0, 22.0], [1500.0, 74.0], [1600.0, 135.0], [1700.0, 80.0], [1800.0, 72.0], [1900.0, 50.0], [2000.0, 406.0], [2100.0, 59.0], [2300.0, 89.0], [2200.0, 148.0], [2400.0, 477.0], [2500.0, 746.0], [2600.0, 1516.0], [2800.0, 469.0], [2700.0, 1723.0], [2900.0, 157.0], [3000.0, 198.0], [3100.0, 123.0], [3200.0, 182.0], [3300.0, 48.0], [3400.0, 30.0], [3500.0, 33.0], [3600.0, 123.0], [3700.0, 13.0], [3800.0, 1.0], [3900.0, 1.0], [4000.0, 3.0], [4100.0, 124.0], [4300.0, 5.0], [4200.0, 5.0], [4400.0, 1.0], [4600.0, 4.0], [4500.0, 1.0], [4700.0, 2.0], [4800.0, 4.0], [5000.0, 2.0], [4900.0, 1.0], [5100.0, 1.0], [5200.0, 3.0], [5300.0, 4.0], [5500.0, 2.0], [5400.0, 2.0], [5600.0, 2.0], [5800.0, 2.0], [5700.0, 2.0], [5900.0, 1.0], [6000.0, 1.0], [8500.0, 1.0], [8400.0, 1.0], [8700.0, 1.0], [8300.0, 1.0], [8200.0, 1.0], [8800.0, 1.0], [9200.0, 1.0], [8900.0, 3.0], [9000.0, 2.0], [9100.0, 1.0], [9700.0, 2.0], [9600.0, 3.0], [9500.0, 1.0], [9400.0, 3.0], [9300.0, 2.0], [9800.0, 2.0], [10200.0, 3.0], [10100.0, 1.0], [9900.0, 2.0], [10000.0, 1.0], [10400.0, 1.0], [10500.0, 2.0], [10700.0, 2.0], [10600.0, 1.0], [10300.0, 1.0], [11100.0, 8.0], [11200.0, 3.0], [11000.0, 2.0], [11300.0, 3.0], [11500.0, 3.0], [11700.0, 4.0], [11600.0, 2.0], [11400.0, 1.0], [12000.0, 5.0], [12100.0, 3.0], [11800.0, 2.0], [11900.0, 1.0], [12200.0, 1.0], [12700.0, 2.0], [12400.0, 1.0], [13000.0, 1.0], [13200.0, 2.0], [12900.0, 3.0], [13100.0, 1.0], [12800.0, 1.0], [13400.0, 1.0], [13600.0, 1.0], [17100.0, 1.0], [20600.0, 1.0], [21900.0, 1.0], [24800.0, 1.0], [35200.0, 86.0], [37400.0, 1.0], [38400.0, 2.0], [38800.0, 94.0], [37200.0, 42.0], [38000.0, 118.0], [39000.0, 10.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 39000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 500.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7227.0, "series": [{"data": [[0.0, 5309.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2051.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7227.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 500.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 290.3892292349336, "minX": 1.57676658E12, "maxY": 489.50509080902617, "series": [{"data": [[1.5767667E12, 376.80375], [1.57676664E12, 489.50509080902617], [1.57676658E12, 290.3892292349336]], "isOverall": false, "label": "1. Save API", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5767667E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17.333333333333332, "minX": 1.0, "maxY": 39012.0, "series": [{"data": [[2.0, 21.0], [3.0, 34.25], [39.0, 300.0], [38.0, 279.0], [41.0, 301.0], [40.0, 300.0], [43.0, 300.0], [99.0, 39012.0], [98.0, 38897.0], [97.0, 38833.0], [104.0, 39011.0], [109.0, 39010.0], [113.0, 39009.0], [117.0, 39007.0], [124.0, 39006.0], [132.0, 39004.0], [129.0, 39006.0], [140.0, 39002.0], [136.0, 39003.0], [151.0, 38987.0], [150.0, 38987.0], [149.0, 38988.0], [148.0, 38989.0], [147.0, 38991.0], [146.0, 38992.0], [145.0, 38993.0], [144.0, 38743.9090909091], [157.0, 38983.0], [156.0, 35219.0], [154.0, 38983.0], [152.0, 38986.0], [165.0, 35238.0], [161.0, 35238.0], [160.0, 35245.0], [169.0, 886.3333333333335], [170.0, 954.8124999999998], [171.0, 898.1428571428571], [172.0, 2875.153846153846], [173.0, 96.0909090909091], [174.0, 2118.8571428571427], [175.0, 550.25], [168.0, 35238.0], [176.0, 2784.4736842105262], [177.0, 421.47619047619054], [178.0, 553.6428571428571], [179.0, 2124.0], [180.0, 261.3125], [181.0, 683.421052631579], [182.0, 138.33333333333334], [183.0, 589.3000000000001], [184.0, 1054.8400000000001], [185.0, 720.9374999999999], [186.0, 192.16666666666669], [187.0, 1273.9565217391305], [188.0, 1354.7272727272727], [189.0, 686.75], [190.0, 573.258064516129], [191.0, 2779.0434782608695], [192.0, 3641.666666666666], [193.0, 883.9999999999998], [194.0, 1861.264705882353], [195.0, 3068.7857142857147], [196.0, 2027.3809523809525], [197.0, 3936.6153846153848], [198.0, 783.9000000000001], [199.0, 257.44444444444446], [200.0, 263.2857142857143], [201.0, 2477.0285714285715], [202.0, 2493.0], [203.0, 529.4871794871794], [204.0, 1008.2666666666665], [206.0, 2071.7058823529414], [207.0, 4081.1], [205.0, 36927.84615384614], [208.0, 1851.2962962962963], [209.0, 2882.5365853658536], [210.0, 5419.4375], [211.0, 1394.6315789473683], [212.0, 5003.0], [213.0, 495.1875], [214.0, 2446.6666666666665], [215.0, 3452.2499999999995], [216.0, 7211.818181818182], [217.0, 998.7878787878788], [218.0, 4115.925925925926], [219.0, 727.9142857142858], [220.0, 6660.4285714285725], [221.0, 400.2812499999999], [222.0, 5098.3125], [223.0, 976.6285714285716], [224.0, 3666.695652173913], [225.0, 1852.2857142857142], [226.0, 2029.7254901960782], [227.0, 791.7], [228.0, 2934.5], [229.0, 630.0294117647059], [230.0, 12909.333333333332], [231.0, 1347.695652173913], [232.0, 1785.2499999999998], [233.0, 1543.833333333333], [234.0, 3803.0454545454545], [235.0, 745.3103448275863], [236.0, 2569.2], [237.0, 703.1481481481482], [238.0, 2298.5373134328356], [239.0, 1603.1], [240.0, 3168.296296296296], [241.0, 1704.857142857143], [242.0, 423.35714285714283], [243.0, 2359.870967741935], [244.0, 476.75], [245.0, 860.5609756097563], [246.0, 4125.85294117647], [247.0, 968.8947368421054], [248.0, 3834.1714285714284], [249.0, 983.925], [250.0, 2752.6923076923076], [251.0, 665.9677419354838], [252.0, 3608.514285714286], [253.0, 1018.3529411764706], [254.0, 1022.0545454545454], [255.0, 9243.5], [257.0, 1102.5932203389834], [256.0, 405.0], [258.0, 5172.333333333333], [259.0, 1142.051724137931], [264.0, 3457.972972972973], [270.0, 860.607142857143], [271.0, 680.3111111111111], [268.0, 501.7128712871286], [269.0, 8350.3125], [265.0, 436.5499999999999], [266.0, 23238.0], [267.0, 434.7916666666667], [260.0, 2897.25], [261.0, 2984.1632653061224], [262.0, 840.9999999999999], [263.0, 375.84615384615387], [273.0, 375.56250000000006], [272.0, 8482.3125], [274.0, 948.6206896551726], [275.0, 2976.7555555555555], [276.0, 594.3222222222224], [277.0, 381.1818181818183], [278.0, 7614.625], [279.0, 1104.1764705882356], [280.0, 5761.333333333333], [286.0, 1246.8181818181818], [287.0, 3000.5806451612902], [284.0, 405.84090909090907], [285.0, 15641.4], [281.0, 4662.666666666667], [282.0, 1350.2125], [283.0, 1632.0666666666666], [289.0, 727.9549549549549], [288.0, 419.9545454545455], [290.0, 5246.137931034483], [291.0, 6809.5], [292.0, 2426.1], [293.0, 1012.0289855072463], [294.0, 1973.296296296296], [295.0, 5919.571428571429], [296.0, 1039.049180327869], [302.0, 1317.0232558139533], [303.0, 1347.3333333333333], [300.0, 1685.1333333333334], [301.0, 2786.9375], [297.0, 19788.0], [298.0, 1396.5593220338983], [299.0, 1063.390804597701], [305.0, 880.2739726027398], [304.0, 990.241935483871], [306.0, 12798.666666666666], [307.0, 1088.8813559322034], [308.0, 1317.575], [309.0, 1994.6], [310.0, 3255.6153846153848], [311.0, 1135.4150943396226], [312.0, 1279.409090909091], [318.0, 1356.952380952381], [319.0, 6860.5], [316.0, 1919.9599999999998], [317.0, 2741.1176470588234], [313.0, 1755.1290322580644], [314.0, 1007.6190476190475], [315.0, 980.3783783783781], [321.0, 1036.2647058823532], [320.0, 1045.8888888888887], [322.0, 1870.5555555555557], [323.0, 1392.8372093023254], [324.0, 1650.2727272727273], [325.0, 1555.75], [326.0, 1979.1999999999998], [327.0, 448.2631578947368], [328.0, 3290.6296296296296], [334.0, 516.5211267605636], [335.0, 12743.111111111111], [332.0, 2125.7608695652175], [333.0, 463.962962962963], [329.0, 519.8571428571429], [330.0, 2055.3061224489793], [331.0, 621.840909090909], [337.0, 427.5961538461538], [336.0, 425.46551724137936], [338.0, 6169.631578947369], [339.0, 494.70731707317066], [340.0, 450.63636363636357], [341.0, 4581.423076923077], [342.0, 472.57142857142856], [343.0, 2259.2333333333336], [344.0, 5343.0666666666675], [350.0, 1606.8923076923077], [351.0, 2249.7619047619046], [348.0, 18422.5], [349.0, 440.3571428571429], [345.0, 1318.741176470588], [346.0, 2633.4242424242425], [347.0, 1597.65625], [353.0, 1911.2307692307695], [352.0, 889.1604938271605], [354.0, 1408.1463414634145], [355.0, 1120.3666666666663], [356.0, 1412.3720930232557], [357.0, 1342.2820512820513], [358.0, 2550.6470588235297], [359.0, 968.2878787878788], [360.0, 628.2857142857141], [366.0, 516.3913043478261], [367.0, 2219.049180327869], [364.0, 522.6567164179104], [365.0, 7122.272727272728], [361.0, 2279.325], [363.0, 2011.8888888888891], [369.0, 512.65625], [368.0, 640.4615384615385], [370.0, 2535.480769230769], [371.0, 648.6], [372.0, 509.8225806451613], [373.0, 2311.6140350877195], [374.0, 581.3478260869564], [375.0, 443.28070175438603], [376.0, 3645.942857142857], [380.0, 903.0], [382.0, 36450.0], [383.0, 603.6909090909091], [377.0, 480.36666666666673], [378.0, 472.46341463414643], [379.0, 3973.0], [396.0, 36443.333333333336], [384.0, 579.6521739130436], [385.0, 4749.185185185185], [387.0, 36447.333333333336], [389.0, 852.0681818181819], [390.0, 6574.315789473684], [395.0, 2576.904109589041], [399.0, 36444.333333333336], [398.0, 35194.0], [393.0, 36443.0], [413.0, 2246.9305555555557], [401.0, 2715.397435897436], [402.0, 1586.4285714285716], [406.0, 2165.3275862068963], [405.0, 36852.75], [407.0, 7220.833333333333], [415.0, 38960.0], [414.0, 38961.0], [412.0, 35195.0], [411.0, 37079.0], [409.0, 37078.5], [429.0, 2239.4512195121947], [418.0, 3644.6341463414637], [419.0, 2230.0], [423.0, 2421.101694915254], [416.0, 38043.0], [422.0, 38436.5], [420.0, 38438.0], [424.0, 3731.4249999999993], [430.0, 8919.090909090908], [428.0, 38083.0], [426.0, 37208.0], [425.0, 37213.0], [434.0, 20537.5], [433.0, 1804.1403508771928], [432.0, 38306.333333333336], [441.0, 3625.177777777778], [447.0, 38848.666666666664], [446.0, 38844.0], [445.0, 38841.0], [435.0, 38853.5], [443.0, 37627.0], [440.0, 38849.0], [439.0, 38850.5], [438.0, 38851.0], [436.0, 38852.0], [451.0, 3056.159090909092], [452.0, 4769.411764705883], [453.0, 38848.0], [454.0, 2061.125], [455.0, 4785.58064516129], [450.0, 38843.333333333336], [459.0, 2730.0740740740735], [458.0, 38844.0], [457.0, 38840.5], [456.0, 38843.0], [463.0, 38850.0], [462.0, 38850.0], [461.0, 38851.0], [460.0, 38841.0], [476.0, 1973.282608695652], [464.0, 2798.8235294117644], [465.0, 2669.3478260869574], [471.0, 2072.2857142857138], [470.0, 38834.0], [468.0, 38834.333333333336], [472.0, 2415.818181818182], [479.0, 38829.666666666664], [477.0, 38830.666666666664], [474.0, 38829.5], [473.0, 38833.75], [492.0, 2368.7222222222226], [486.0, 2764.862745098039], [491.0, 3461.170731707317], [495.0, 38816.0], [494.0, 38820.0], [488.0, 38822.666666666664], [487.0, 38824.0], [480.0, 38827.0], [484.0, 38824.2], [482.0, 38827.0], [481.0, 38828.0], [500.0, 2687.209715827905], [499.0, 222.0], [498.0, 38816.0], [497.0, 38818.0], [496.0, 38820.0], [1.0, 17.333333333333332]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}, {"data": [[390.8933518923586, 2796.3019818386647]], "isOverall": false, "label": "Save API HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18660.0, "minX": 1.57676658E12, "maxY": 2040248.7333333334, "series": [{"data": [[1.5767667E12, 18660.0], [1.57676664E12, 34765.26666666667], [1.57676658E12, 33574.21666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5767667E12, 84215.0], [1.57676664E12, 2040248.7333333334], [1.57676658E12, 1970350.2833333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5767667E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 614.0763641544373, "minX": 1.57676658E12, "maxY": 23539.621250000022, "series": [{"data": [[1.5767667E12, 23539.621250000022], [1.57676664E12, 2620.51582278482], [1.57676658E12, 614.0763641544373]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5767667E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 335.84250000000026, "minX": 1.57676658E12, "maxY": 2620.512520638428, "series": [{"data": [[1.5767667E12, 335.84250000000026], [1.57676664E12, 2620.512520638428], [1.57676658E12, 614.0710927482558]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5767667E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.05570594101723892, "minX": 1.57676658E12, "maxY": 487.115, "series": [{"data": [[1.5767667E12, 487.115], [1.57676664E12, 40.22784810126583], [1.57676658E12, 0.05570594101723892]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5767667E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.57676658E12, "maxY": 38512.0, "series": [{"data": [[1.5767667E12, 38512.0], [1.57676664E12, 24801.0], [1.57676658E12, 21957.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5767667E12, 2.0], [1.57676664E12, 829.0], [1.57676658E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5767667E12, 33.900000000000034], [1.57676664E12, 3064.0], [1.57676658E12, 602.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5767667E12, 38469.170000000006], [1.57676664E12, 4106.0], [1.57676658E12, 9788.60000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5767667E12, 40.0], [1.57676664E12, 3308.5499999999993], [1.57676658E12, 663.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5767667E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 12.0, "maxY": 38066.5, "series": [{"data": [[512.0, 464.5], [514.0, 529.0], [610.0, 442.0], [657.0, 407.0], [640.0, 421.0], [666.0, 444.0], [672.0, 463.0], [674.0, 502.0], [12.0, 23.0], [42.0, 2762.5], [44.0, 2734.0], [50.0, 30.5], [56.0, 2746.0], [76.0, 2723.0], [79.0, 2772.0], [86.0, 2648.0], [91.0, 2634.0], [96.0, 2026.0], [110.0, 2571.5], [108.0, 2716.0], [109.0, 2778.0], [118.0, 2737.0], [122.0, 4105.0], [126.0, 2671.0], [127.0, 2492.0], [124.0, 3641.0], [146.0, 2674.0], [148.0, 20.0], [152.0, 6.0], [163.0, 2632.0], [160.0, 2591.0], [174.0, 1686.0], [179.0, 2090.0], [177.0, 2711.0], [198.0, 2667.0], [193.0, 2760.0], [212.0, 1086.0], [246.0, 1906.0], [245.0, 2465.0], [249.0, 2637.0], [252.0, 2798.0], [266.0, 2071.0], [260.0, 2498.0], [263.0, 2646.0], [265.0, 2610.0], [267.0, 2761.0], [283.0, 137.0], [298.0, 2722.0], [340.0, 242.0], [361.0, 2574.0], [368.0, 2751.0], [377.0, 2819.0], [379.0, 2767.0], [396.0, 354.0], [496.0, 351.0], [497.0, 399.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[500.0, 38066.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 674.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 12.0, "maxY": 4105.0, "series": [{"data": [[512.0, 464.5], [514.0, 529.0], [610.0, 442.0], [657.0, 407.0], [640.0, 421.0], [666.0, 444.0], [672.0, 463.0], [674.0, 502.0], [12.0, 23.0], [42.0, 2762.5], [44.0, 2734.0], [50.0, 30.5], [56.0, 2746.0], [76.0, 2723.0], [79.0, 2772.0], [86.0, 2648.0], [91.0, 2634.0], [96.0, 2026.0], [110.0, 2571.5], [108.0, 2716.0], [109.0, 2778.0], [118.0, 2737.0], [122.0, 4105.0], [126.0, 2671.0], [127.0, 2492.0], [124.0, 3641.0], [146.0, 2674.0], [148.0, 20.0], [152.0, 6.0], [163.0, 2632.0], [160.0, 2591.0], [174.0, 1686.0], [179.0, 2090.0], [177.0, 2711.0], [198.0, 2667.0], [193.0, 2760.0], [212.0, 1086.0], [246.0, 1906.0], [245.0, 2465.0], [249.0, 2637.0], [252.0, 2798.0], [266.0, 2071.0], [260.0, 2498.0], [263.0, 2646.0], [265.0, 2610.0], [267.0, 2761.0], [283.0, 137.0], [298.0, 2722.0], [340.0, 242.0], [361.0, 2574.0], [368.0, 2751.0], [377.0, 2819.0], [379.0, 2767.0], [396.0, 354.0], [496.0, 351.0], [497.0, 399.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[500.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 674.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.57676658E12, "maxY": 123.45, "series": [{"data": [[1.5767667E12, 5.0], [1.57676664E12, 123.0], [1.57676658E12, 123.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5767667E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.57676658E12, "maxY": 121.13333333333334, "series": [{"data": [[1.5767667E12, 5.0], [1.57676664E12, 121.13333333333334], [1.57676658E12, 116.98333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5767667E12, 8.333333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5767667E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.57676658E12, "maxY": 121.13333333333334, "series": [{"data": [[1.5767667E12, 8.333333333333334]], "isOverall": false, "label": "Save API HTTP Request-failure", "isController": false}, {"data": [[1.5767667E12, 5.0], [1.57676664E12, 121.13333333333334], [1.57676658E12, 116.98333333333333]], "isOverall": false, "label": "Save API HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5767667E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.57676658E12, "maxY": 121.13333333333334, "series": [{"data": [[1.5767667E12, 5.0], [1.57676664E12, 121.13333333333334], [1.57676658E12, 116.98333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5767667E12, 8.333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5767667E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

