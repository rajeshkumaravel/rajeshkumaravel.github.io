/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 35889.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 2.0], [46.3, 2.0], [46.4, 3.0], [46.5, 3.0], [46.6, 3.0], [46.7, 3.0], [46.8, 4.0], [46.9, 4.0], [47.0, 4.0], [47.1, 5.0], [47.2, 5.0], [47.3, 5.0], [47.4, 6.0], [47.5, 6.0], [47.6, 7.0], [47.7, 7.0], [47.8, 8.0], [47.9, 9.0], [48.0, 10.0], [48.1, 11.0], [48.2, 12.0], [48.3, 12.0], [48.4, 13.0], [48.5, 14.0], [48.6, 15.0], [48.7, 17.0], [48.8, 18.0], [48.9, 19.0], [49.0, 20.0], [49.1, 22.0], [49.2, 24.0], [49.3, 26.0], [49.4, 27.0], [49.5, 29.0], [49.6, 31.0], [49.7, 32.0], [49.8, 34.0], [49.9, 35.0], [50.0, 37.0], [50.1, 39.0], [50.2, 41.0], [50.3, 43.0], [50.4, 45.0], [50.5, 47.0], [50.6, 49.0], [50.7, 51.0], [50.8, 52.0], [50.9, 54.0], [51.0, 56.0], [51.1, 58.0], [51.2, 59.0], [51.3, 61.0], [51.4, 62.0], [51.5, 65.0], [51.6, 67.0], [51.7, 69.0], [51.8, 71.0], [51.9, 72.0], [52.0, 73.0], [52.1, 75.0], [52.2, 76.0], [52.3, 77.0], [52.4, 78.0], [52.5, 79.0], [52.6, 80.0], [52.7, 81.0], [52.8, 82.0], [52.9, 83.0], [53.0, 83.0], [53.1, 84.0], [53.2, 85.0], [53.3, 86.0], [53.4, 87.0], [53.5, 87.0], [53.6, 88.0], [53.7, 90.0], [53.8, 90.0], [53.9, 91.0], [54.0, 92.0], [54.1, 92.0], [54.2, 93.0], [54.3, 93.0], [54.4, 94.0], [54.5, 94.0], [54.6, 95.0], [54.7, 95.0], [54.8, 96.0], [54.9, 97.0], [55.0, 97.0], [55.1, 97.0], [55.2, 98.0], [55.3, 98.0], [55.4, 99.0], [55.5, 100.0], [55.6, 100.0], [55.7, 101.0], [55.8, 102.0], [55.9, 102.0], [56.0, 103.0], [56.1, 103.0], [56.2, 104.0], [56.3, 104.0], [56.4, 105.0], [56.5, 105.0], [56.6, 106.0], [56.7, 106.0], [56.8, 107.0], [56.9, 107.0], [57.0, 108.0], [57.1, 108.0], [57.2, 108.0], [57.3, 109.0], [57.4, 109.0], [57.5, 110.0], [57.6, 110.0], [57.7, 111.0], [57.8, 111.0], [57.9, 111.0], [58.0, 112.0], [58.1, 112.0], [58.2, 112.0], [58.3, 113.0], [58.4, 114.0], [58.5, 114.0], [58.6, 115.0], [58.7, 115.0], [58.8, 116.0], [58.9, 117.0], [59.0, 117.0], [59.1, 118.0], [59.2, 118.0], [59.3, 119.0], [59.4, 119.0], [59.5, 120.0], [59.6, 120.0], [59.7, 121.0], [59.8, 121.0], [59.9, 122.0], [60.0, 122.0], [60.1, 122.0], [60.2, 123.0], [60.3, 123.0], [60.4, 124.0], [60.5, 125.0], [60.6, 125.0], [60.7, 125.0], [60.8, 126.0], [60.9, 126.0], [61.0, 126.0], [61.1, 127.0], [61.2, 127.0], [61.3, 127.0], [61.4, 128.0], [61.5, 129.0], [61.6, 129.0], [61.7, 130.0], [61.8, 130.0], [61.9, 131.0], [62.0, 131.0], [62.1, 131.0], [62.2, 132.0], [62.3, 132.0], [62.4, 132.0], [62.5, 133.0], [62.6, 133.0], [62.7, 133.0], [62.8, 134.0], [62.9, 134.0], [63.0, 135.0], [63.1, 135.0], [63.2, 135.0], [63.3, 136.0], [63.4, 136.0], [63.5, 136.0], [63.6, 137.0], [63.7, 137.0], [63.8, 138.0], [63.9, 138.0], [64.0, 138.0], [64.1, 139.0], [64.2, 139.0], [64.3, 140.0], [64.4, 140.0], [64.5, 140.0], [64.6, 141.0], [64.7, 141.0], [64.8, 141.0], [64.9, 142.0], [65.0, 142.0], [65.1, 143.0], [65.2, 143.0], [65.3, 144.0], [65.4, 144.0], [65.5, 144.0], [65.6, 145.0], [65.7, 145.0], [65.8, 146.0], [65.9, 146.0], [66.0, 146.0], [66.1, 147.0], [66.2, 148.0], [66.3, 148.0], [66.4, 149.0], [66.5, 149.0], [66.6, 149.0], [66.7, 150.0], [66.8, 151.0], [66.9, 151.0], [67.0, 152.0], [67.1, 153.0], [67.2, 154.0], [67.3, 155.0], [67.4, 155.0], [67.5, 156.0], [67.6, 157.0], [67.7, 157.0], [67.8, 158.0], [67.9, 159.0], [68.0, 159.0], [68.1, 160.0], [68.2, 161.0], [68.3, 161.0], [68.4, 162.0], [68.5, 163.0], [68.6, 163.0], [68.7, 164.0], [68.8, 164.0], [68.9, 165.0], [69.0, 165.0], [69.1, 165.0], [69.2, 166.0], [69.3, 166.0], [69.4, 167.0], [69.5, 168.0], [69.6, 169.0], [69.7, 169.0], [69.8, 170.0], [69.9, 171.0], [70.0, 172.0], [70.1, 173.0], [70.2, 174.0], [70.3, 175.0], [70.4, 176.0], [70.5, 177.0], [70.6, 178.0], [70.7, 179.0], [70.8, 181.0], [70.9, 182.0], [71.0, 183.0], [71.1, 184.0], [71.2, 185.0], [71.3, 186.0], [71.4, 188.0], [71.5, 189.0], [71.6, 190.0], [71.7, 191.0], [71.8, 192.0], [71.9, 193.0], [72.0, 195.0], [72.1, 196.0], [72.2, 197.0], [72.3, 198.0], [72.4, 199.0], [72.5, 200.0], [72.6, 202.0], [72.7, 204.0], [72.8, 206.0], [72.9, 209.0], [73.0, 211.0], [73.1, 212.0], [73.2, 216.0], [73.3, 218.0], [73.4, 221.0], [73.5, 223.0], [73.6, 226.0], [73.7, 233.0], [73.8, 243.0], [73.9, 254.0], [74.0, 262.0], [74.1, 442.0], [74.2, 473.0], [74.3, 481.0], [74.4, 509.0], [74.5, 515.0], [74.6, 520.0], [74.7, 524.0], [74.8, 539.0], [74.9, 543.0], [75.0, 548.0], [75.1, 556.0], [75.2, 558.0], [75.3, 570.0], [75.4, 580.0], [75.5, 586.0], [75.6, 590.0], [75.7, 594.0], [75.8, 597.0], [75.9, 600.0], [76.0, 607.0], [76.1, 612.0], [76.2, 619.0], [76.3, 623.0], [76.4, 633.0], [76.5, 635.0], [76.6, 641.0], [76.7, 646.0], [76.8, 650.0], [76.9, 660.0], [77.0, 663.0], [77.1, 670.0], [77.2, 671.0], [77.3, 680.0], [77.4, 686.0], [77.5, 696.0], [77.6, 699.0], [77.7, 702.0], [77.8, 704.0], [77.9, 704.0], [78.0, 705.0], [78.1, 714.0], [78.2, 719.0], [78.3, 721.0], [78.4, 724.0], [78.5, 727.0], [78.6, 728.0], [78.7, 729.0], [78.8, 733.0], [78.9, 740.0], [79.0, 743.0], [79.1, 745.0], [79.2, 750.0], [79.3, 752.0], [79.4, 754.0], [79.5, 761.0], [79.6, 765.0], [79.7, 768.0], [79.8, 774.0], [79.9, 778.0], [80.0, 783.0], [80.1, 784.0], [80.2, 790.0], [80.3, 792.0], [80.4, 796.0], [80.5, 800.0], [80.6, 803.0], [80.7, 805.0], [80.8, 812.0], [80.9, 817.0], [81.0, 824.0], [81.1, 828.0], [81.2, 832.0], [81.3, 835.0], [81.4, 840.0], [81.5, 844.0], [81.6, 848.0], [81.7, 854.0], [81.8, 855.0], [81.9, 856.0], [82.0, 858.0], [82.1, 863.0], [82.2, 866.0], [82.3, 868.0], [82.4, 869.0], [82.5, 870.0], [82.6, 880.0], [82.7, 884.0], [82.8, 888.0], [82.9, 892.0], [83.0, 893.0], [83.1, 899.0], [83.2, 904.0], [83.3, 906.0], [83.4, 912.0], [83.5, 913.0], [83.6, 917.0], [83.7, 919.0], [83.8, 925.0], [83.9, 927.0], [84.0, 931.0], [84.1, 938.0], [84.2, 944.0], [84.3, 945.0], [84.4, 945.0], [84.5, 950.0], [84.6, 951.0], [84.7, 952.0], [84.8, 957.0], [84.9, 962.0], [85.0, 968.0], [85.1, 973.0], [85.2, 975.0], [85.3, 976.0], [85.4, 980.0], [85.5, 981.0], [85.6, 985.0], [85.7, 988.0], [85.8, 988.0], [85.9, 991.0], [86.0, 994.0], [86.1, 997.0], [86.2, 1000.0], [86.3, 1001.0], [86.4, 1002.0], [86.5, 1003.0], [86.6, 1004.0], [86.7, 1005.0], [86.8, 1007.0], [86.9, 1008.0], [87.0, 1009.0], [87.1, 1009.0], [87.2, 1010.0], [87.3, 1012.0], [87.4, 1013.0], [87.5, 1014.0], [87.6, 1015.0], [87.7, 1017.0], [87.8, 1018.0], [87.9, 1019.0], [88.0, 1021.0], [88.1, 1022.0], [88.2, 1024.0], [88.3, 1025.0], [88.4, 1028.0], [88.5, 1030.0], [88.6, 1033.0], [88.7, 1035.0], [88.8, 1036.0], [88.9, 1037.0], [89.0, 1039.0], [89.1, 1042.0], [89.2, 1043.0], [89.3, 1045.0], [89.4, 1046.0], [89.5, 1048.0], [89.6, 1052.0], [89.7, 1053.0], [89.8, 1054.0], [89.9, 1056.0], [90.0, 1058.0], [90.1, 1060.0], [90.2, 1063.0], [90.3, 1066.0], [90.4, 1070.0], [90.5, 1074.0], [90.6, 1076.0], [90.7, 1078.0], [90.8, 1081.0], [90.9, 1082.0], [91.0, 1085.0], [91.1, 1088.0], [91.2, 1088.0], [91.3, 1091.0], [91.4, 1095.0], [91.5, 1097.0], [91.6, 1099.0], [91.7, 1100.0], [91.8, 1102.0], [91.9, 1105.0], [92.0, 1111.0], [92.1, 1114.0], [92.2, 1118.0], [92.3, 1121.0], [92.4, 1122.0], [92.5, 1123.0], [92.6, 1125.0], [92.7, 1132.0], [92.8, 1137.0], [92.9, 1139.0], [93.0, 1141.0], [93.1, 1143.0], [93.2, 1147.0], [93.3, 1152.0], [93.4, 1153.0], [93.5, 1155.0], [93.6, 1158.0], [93.7, 1160.0], [93.8, 1162.0], [93.9, 1165.0], [94.0, 1168.0], [94.1, 1170.0], [94.2, 1173.0], [94.3, 1175.0], [94.4, 1180.0], [94.5, 1183.0], [94.6, 1186.0], [94.7, 1189.0], [94.8, 1193.0], [94.9, 1196.0], [95.0, 1200.0], [95.1, 1200.0], [95.2, 1204.0], [95.3, 1205.0], [95.4, 1209.0], [95.5, 1211.0], [95.6, 1216.0], [95.7, 1219.0], [95.8, 1222.0], [95.9, 1225.0], [96.0, 1236.0], [96.1, 1239.0], [96.2, 1243.0], [96.3, 1250.0], [96.4, 1255.0], [96.5, 1260.0], [96.6, 1266.0], [96.7, 1269.0], [96.8, 1278.0], [96.9, 1279.0], [97.0, 1280.0], [97.1, 1283.0], [97.2, 1286.0], [97.3, 1294.0], [97.4, 1301.0], [97.5, 1305.0], [97.6, 1308.0], [97.7, 1310.0], [97.8, 1313.0], [97.9, 1331.0], [98.0, 1335.0], [98.1, 1341.0], [98.2, 1361.0], [98.3, 1374.0], [98.4, 1384.0], [98.5, 1395.0], [98.6, 1400.0], [98.7, 1417.0], [98.8, 1471.0], [98.9, 1595.0], [99.0, 1598.0], [99.1, 1683.0], [99.2, 34559.0], [99.3, 34576.0], [99.4, 34602.0], [99.5, 34943.0], [99.6, 34965.0], [99.7, 34991.0], [99.8, 35025.0], [99.9, 35073.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 16637.0, "series": [{"data": [[0.0, 16637.0], [600.0, 524.0], [700.0, 861.0], [800.0, 785.0], [900.0, 922.0], [1000.0, 1647.0], [1100.0, 996.0], [1200.0, 717.0], [1300.0, 361.0], [1400.0, 72.0], [1500.0, 65.0], [100.0, 5084.0], [1600.0, 31.0], [1700.0, 1.0], [1800.0, 1.0], [2000.0, 1.0], [34500.0, 66.0], [34600.0, 19.0], [34900.0, 90.0], [35000.0, 50.0], [35100.0, 22.0], [35800.0, 3.0], [35600.0, 1.0], [200.0, 491.0], [300.0, 16.0], [400.0, 80.0], [500.0, 457.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 35800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 99.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 15584.0, "series": [{"data": [[0.0, 7329.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6988.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 99.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 15584.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 143.72661106899187, "minX": 1.57676394E12, "maxY": 162.47346817370695, "series": [{"data": [[1.576764E12, 162.47346817370695], [1.57676394E12, 143.72661106899187]], "isOverall": false, "label": "1. Save API", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.576764E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 16294.588353413656, "series": [{"data": [[2.0, 9.041666666666666], [3.0, 47.08510638297873], [4.0, 37.449999999999996], [5.0, 122.89655172413795], [6.0, 50.000000000000014], [7.0, 21.636363636363633], [8.0, 75.63829787234042], [9.0, 167.01234567901238], [10.0, 42.08695652173913], [11.0, 47.34782608695653], [12.0, 22.05454545454546], [13.0, 26.000000000000004], [14.0, 36.53488372093023], [15.0, 32.66666666666667], [16.0, 35.87179487179487], [17.0, 45.29268292682927], [18.0, 49.054054054054056], [19.0, 23.818181818181817], [20.0, 75.75757575757575], [21.0, 36.58928571428571], [22.0, 32.66197183098589], [23.0, 47.09090909090907], [24.0, 27.112359550561784], [25.0, 51.57142857142857], [26.0, 64.75757575757575], [27.0, 49.142857142857196], [28.0, 14.116279069767433], [29.0, 55.78571428571427], [30.0, 23.28275862068966], [31.0, 60.865384615384606], [32.0, 21.96402877697841], [33.0, 37.360465116279066], [34.0, 63.21153846153847], [35.0, 66.27027027027027], [36.0, 65.71428571428572], [37.0, 111.72972972972974], [38.0, 47.671052631578945], [39.0, 90.87500000000001], [40.0, 36.51219512195122], [41.0, 70.15789473684212], [42.0, 37.50847457627117], [43.0, 43.130434782608695], [44.0, 15.340277777777766], [45.0, 78.13888888888891], [46.0, 95.87671232876716], [47.0, 23.233050847457612], [48.0, 18.41142857142857], [49.0, 44.56122448979591], [50.0, 267.67757009345803], [51.0, 78.1587301587302], [52.0, 90.6601941747573], [53.0, 93.12307692307694], [54.0, 91.75862068965516], [55.0, 105.85106382978724], [56.0, 94.21126760563376], [57.0, 55.744897959183696], [58.0, 89.27777777777777], [59.0, 78.5818181818182], [60.0, 88.56944444444444], [61.0, 90.68115942028987], [62.0, 101.46575342465754], [63.0, 76.42253521126761], [64.0, 73.43835616438355], [65.0, 122.80952380952394], [66.0, 144.31666666666666], [67.0, 68.0151515151515], [68.0, 65.91509433962266], [69.0, 49.762589928057565], [70.0, 83.46315789473687], [71.0, 106.31932773109237], [72.0, 101.56976744186046], [73.0, 116.16949152542374], [74.0, 130.43750000000003], [75.0, 102.08235294117648], [76.0, 86.17424242424238], [77.0, 52.46766169154231], [78.0, 114.47826086956522], [79.0, 110.20481927710846], [80.0, 129.05194805194807], [81.0, 102.95959595959597], [82.0, 189.04411764705884], [83.0, 284.97959183673464], [84.0, 131.54335260115607], [85.0, 60.85555555555556], [86.0, 122.71666666666673], [87.0, 141.60000000000005], [88.0, 73.53672316384177], [89.0, 78.47407407407408], [90.0, 77.7293233082707], [91.0, 66.80952380952382], [92.0, 144.4230769230769], [93.0, 111.75510204081631], [94.0, 108.33980582524264], [95.0, 91.09009009009007], [96.0, 133.01315789473688], [97.0, 93.68421052631578], [98.0, 115.31055900621125], [99.0, 133.3935483870967], [100.0, 83.67032967032962], [101.0, 146.4761904761905], [102.0, 145.24675324675323], [103.0, 141.23376623376626], [104.0, 138.4093959731544], [105.0, 56.827814569536464], [106.0, 145.4276315789473], [107.0, 138.22535211267598], [108.0, 52.93442622950823], [109.0, 156.75], [110.0, 158.7532467532467], [111.0, 195.5148514851485], [112.0, 67.80612244897961], [113.0, 161.6125], [114.0, 122.97247706422014], [115.0, 137.89843750000006], [116.0, 106.70068027210884], [117.0, 62.325], [118.0, 127.62105263157898], [119.0, 149.16438356164386], [120.0, 189.71153846153845], [121.0, 76.68897637795281], [123.0, 79.0], [122.0, 4.757281553398061], [124.0, 325.1428571428571], [125.0, 49.180555555555564], [126.0, 461.29213483146066], [127.0, 294.31999999999994], [129.0, 133.3043478260869], [130.0, 151.44776119402997], [131.0, 70.01069518716577], [132.0, 82.08264462809915], [133.0, 19.939501779359425], [134.0, 70.48529411764707], [135.0, 15.89736070381231], [128.0, 0.23913043478260873], [136.0, 236.49999999999994], [137.0, 324.35616438356175], [139.0, 179.1481481481482], [141.0, 136.3698630136988], [142.0, 419.6341463414634], [143.0, 456.51127819548856], [140.0, 1.9066666666666665], [138.0, 3.340909090909091], [145.0, 200.4], [146.0, 145.5438596491228], [147.0, 533.696629213483], [148.0, 471.86956521739125], [149.0, 147.95652173913047], [151.0, 481.85714285714295], [150.0, 3.125], [144.0, 0.375], [152.0, 414.5454545454548], [153.0, 274.16363636363633], [154.0, 448.26136363636374], [157.0, 462.92857142857144], [159.0, 548.2954545454546], [158.0, 0.0], [156.0, 0.5862068965517241], [155.0, 0.21428571428571427], [160.0, 313.95092024539855], [161.0, 548.3620689655172], [164.0, 365.290909090909], [163.0, 296.3523316062176], [165.0, 593.9240506329114], [166.0, 574.6862745098041], [167.0, 0.13043478260869568], [162.0, 1020.75], [169.0, 685.3409090909091], [171.0, 386.95000000000005], [172.0, 687.5454545454545], [175.0, 209.15503875969006], [174.0, 0.5666666666666667], [173.0, 0.5882352941176471], [170.0, 0.5], [168.0, 0.6666666666666667], [176.0, 199.9230769230769], [177.0, 220.89999999999998], [178.0, 515.7333333333333], [179.0, 435.6315789473681], [180.0, 203.84905660377373], [183.0, 93.7386363636364], [182.0, 0.10000000000000002], [181.0, 0.15384615384615388], [185.0, 632.7610619469026], [186.0, 605.6914893617022], [187.0, 262.0000000000002], [189.0, 458.7142857142858], [191.0, 492.72727272727263], [190.0, 0.5517241379310347], [188.0, 0.1842105263157895], [184.0, 1.2], [192.0, 350.9900990099011], [193.0, 560.8911564625851], [196.0, 573.0], [197.0, 103.83333333333337], [199.0, 497.21739130434787], [198.0, 0.1578947368421053], [195.0, 1.2413793103448274], [194.0, 1.0], [200.0, 589.2903225806449], [201.0, 417.8625000000002], [202.0, 351.67164179104475], [203.0, 226.90566037735857], [204.0, 57.727272727272734], [205.0, 45.52173913043478], [207.0, 12.275280898876407], [206.0, 0.5172413793103449], [208.0, 681.9710144927535], [209.0, 619.1489361702128], [211.0, 875.6972477064218], [210.0, 109.63333333333333], [213.0, 31.75949367088605], [215.0, 100.23703703703704], [214.0, 0.27586206896551735], [212.0, 0.20714285714285713], [216.0, 221.48022598870045], [217.0, 437.27692307692297], [218.0, 440.96000000000004], [220.0, 308.94166666666666], [221.0, 136.80110497237595], [222.0, 26.666666666666668], [223.0, 18.759259259259256], [219.0, 0.3414634146341463], [224.0, 195.11363636363637], [225.0, 256.88000000000005], [227.0, 173.33055555555555], [228.0, 407.0882352941176], [229.0, 328.1946902654867], [231.0, 111.4893617021277], [230.0, 618.0967741935484], [226.0, 1.7291666666666667], [232.0, 332.8347107438016], [233.0, 110.05590062111801], [235.0, 306.75], [236.0, 88.74213836477985], [237.0, 124.81533101045285], [238.0, 428.71755725190815], [239.0, 291.93442622950823], [234.0, 9.725274725274723], [240.0, 38.95384615384621], [242.0, 758.1666666666664], [243.0, 99.19036144578314], [244.0, 561.7333333333332], [245.0, 351.24752475247516], [246.0, 474.0211267605635], [247.0, 1.2136602451838876], [241.0, 0.36792452830188677], [250.0, 2305.803879310343], [251.0, 16294.588353413656], [252.0, 1026.2999999999997], [255.0, 994.194312796209], [254.0, 1222.1718213058418], [253.0, 1034.7381974248926], [249.0, 0.16666666666666666], [248.0, 1.2666666666666657], [257.0, 1049.3435114503811], [256.0, 1318.352941176471], [258.0, 1050.1666666666658], [261.0, 1168.6518987341767], [262.0, 1074.8333333333335], [263.0, 1113.314049586777], [264.0, 1151.8296041308095], [260.0, 1078.034883720931], [259.0, 1049.539379474941], [1.0, 49.53191489361702]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}, {"data": [[154.23106666666715, 568.439500000002]], "isOverall": false, "label": "Save API HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 264.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 63092.166666666664, "minX": 1.57676394E12, "maxY": 3702652.8333333335, "series": [{"data": [[1.576764E12, 708049.7666666667], [1.57676394E12, 63092.166666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.576764E12, 344158.63333333336], [1.57676394E12, 3702652.8333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.576764E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 508.81933282790095, "minX": 1.57676394E12, "maxY": 615.2205829863198, "series": [{"data": [[1.576764E12, 615.2205829863198], [1.57676394E12, 508.81933282790095]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.576764E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 69.86555621653827, "minX": 1.57676394E12, "maxY": 508.8160727824118, "series": [{"data": [[1.576764E12, 69.86555621653827], [1.57676394E12, 508.8160727824118]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.576764E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0392721758908264, "minX": 1.57676394E12, "maxY": 24.21772754312909, "series": [{"data": [[1.576764E12, 24.21772754312909], [1.57676394E12, 0.0392721758908264]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.576764E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.57676394E12, "maxY": 2020.0, "series": [{"data": [[1.576764E12, 2020.0], [1.57676394E12, 1687.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.576764E12, 3.0], [1.57676394E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.576764E12, 1281.0], [1.57676394E12, 1138.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.576764E12, 1689.19], [1.57676394E12, 1400.0900000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.576764E12, 1331.6499999999999], [1.57676394E12, 1232.449999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.576764E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 19.0, "maxY": 1323.0, "series": [{"data": [[516.0, 104.0], [522.0, 112.0], [552.0, 133.0], [562.0, 190.0], [35.0, 78.0], [598.0, 122.0], [600.0, 142.0], [641.0, 149.0], [660.0, 169.0], [673.0, 147.0], [85.0, 1279.0], [153.0, 4.0], [165.0, 740.0], [163.0, 1166.0], [173.0, 514.0], [176.0, 619.0], [183.0, 931.0], [182.0, 1058.0], [184.0, 790.0], [188.0, 1032.5], [214.0, 1046.0], [213.0, 981.0], [221.0, 985.0], [222.0, 1323.0], [226.0, 1004.0], [236.0, 532.5], [238.0, 1209.0], [246.0, 559.0], [242.0, 1017.0], [241.0, 1116.0], [240.0, 1153.0], [249.0, 962.0], [252.0, 1041.5], [268.0, 704.0], [270.0, 879.5], [287.0, 55.0], [272.0, 705.5], [275.0, 1066.0], [19.0, 9.0], [316.0, 79.5], [317.0, 743.0], [304.0, 1052.0], [357.0, 97.0], [28.0, 4.0], [478.0, 95.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5143.0, 0.0], [6562.0, 0.0], [821.0, 1.0], [1019.0, 0.0], [2039.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6562.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 19.0, "maxY": 1323.0, "series": [{"data": [[516.0, 104.0], [522.0, 112.0], [552.0, 133.0], [562.0, 190.0], [35.0, 78.0], [598.0, 122.0], [600.0, 142.0], [641.0, 149.0], [660.0, 169.0], [673.0, 147.0], [85.0, 1279.0], [153.0, 4.0], [165.0, 740.0], [163.0, 1166.0], [173.0, 514.0], [176.0, 619.0], [183.0, 931.0], [182.0, 1058.0], [184.0, 790.0], [188.0, 1032.5], [214.0, 1046.0], [213.0, 981.0], [221.0, 985.0], [222.0, 1323.0], [226.0, 1004.0], [236.0, 532.5], [238.0, 1209.0], [246.0, 559.0], [242.0, 1017.0], [241.0, 1116.0], [240.0, 1153.0], [249.0, 962.0], [252.0, 1041.5], [268.0, 704.0], [270.0, 879.5], [287.0, 55.0], [272.0, 705.5], [275.0, 1066.0], [19.0, 9.0], [316.0, 79.5], [317.0, 743.0], [304.0, 1052.0], [357.0, 97.0], [28.0, 4.0], [478.0, 95.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5143.0, 0.0], [6562.0, 0.0], [821.0, 0.0], [1019.0, 0.0], [2039.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6562.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 224.06666666666666, "minX": 1.57676394E12, "maxY": 275.93333333333334, "series": [{"data": [[1.576764E12, 275.93333333333334], [1.57676394E12, 224.06666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.576764E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.15, "minX": 1.57676394E12, "maxY": 253.4, "series": [{"data": [[1.576764E12, 20.433333333333334], [1.57676394E12, 219.83333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.576764E12, 253.4]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.576764E12, 4.183333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.576764E12, 2.15]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.576764E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 20.433333333333334, "minX": 1.57676394E12, "maxY": 259.73333333333335, "series": [{"data": [[1.576764E12, 259.73333333333335]], "isOverall": false, "label": "Save API HTTP Request-failure", "isController": false}, {"data": [[1.576764E12, 20.433333333333334], [1.57676394E12, 219.83333333333334]], "isOverall": false, "label": "Save API HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.576764E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 20.433333333333334, "minX": 1.57676394E12, "maxY": 259.73333333333335, "series": [{"data": [[1.576764E12, 20.433333333333334], [1.57676394E12, 219.83333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.576764E12, 259.73333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.576764E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

