/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 39772.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 2.0], [54.9, 2.0], [55.0, 2.0], [55.1, 3.0], [55.2, 3.0], [55.3, 4.0], [55.4, 4.0], [55.5, 5.0], [55.6, 5.0], [55.7, 5.0], [55.8, 6.0], [55.9, 6.0], [56.0, 7.0], [56.1, 8.0], [56.2, 8.0], [56.3, 9.0], [56.4, 10.0], [56.5, 11.0], [56.6, 12.0], [56.7, 13.0], [56.8, 14.0], [56.9, 15.0], [57.0, 16.0], [57.1, 17.0], [57.2, 18.0], [57.3, 19.0], [57.4, 21.0], [57.5, 23.0], [57.6, 25.0], [57.7, 26.0], [57.8, 28.0], [57.9, 30.0], [58.0, 31.0], [58.1, 34.0], [58.2, 35.0], [58.3, 38.0], [58.4, 40.0], [58.5, 42.0], [58.6, 45.0], [58.7, 47.0], [58.8, 50.0], [58.9, 54.0], [59.0, 57.0], [59.1, 59.0], [59.2, 63.0], [59.3, 66.0], [59.4, 71.0], [59.5, 74.0], [59.6, 78.0], [59.7, 83.0], [59.8, 87.0], [59.9, 91.0], [60.0, 95.0], [60.1, 100.0], [60.2, 103.0], [60.3, 106.0], [60.4, 109.0], [60.5, 111.0], [60.6, 114.0], [60.7, 116.0], [60.8, 118.0], [60.9, 122.0], [61.0, 125.0], [61.1, 127.0], [61.2, 128.0], [61.3, 129.0], [61.4, 131.0], [61.5, 134.0], [61.6, 135.0], [61.7, 138.0], [61.8, 140.0], [61.9, 142.0], [62.0, 144.0], [62.1, 146.0], [62.2, 147.0], [62.3, 149.0], [62.4, 151.0], [62.5, 152.0], [62.6, 154.0], [62.7, 156.0], [62.8, 157.0], [62.9, 158.0], [63.0, 160.0], [63.1, 161.0], [63.2, 162.0], [63.3, 163.0], [63.4, 165.0], [63.5, 166.0], [63.6, 167.0], [63.7, 168.0], [63.8, 169.0], [63.9, 171.0], [64.0, 172.0], [64.1, 172.0], [64.2, 173.0], [64.3, 174.0], [64.4, 175.0], [64.5, 176.0], [64.6, 176.0], [64.7, 177.0], [64.8, 178.0], [64.9, 178.0], [65.0, 179.0], [65.1, 180.0], [65.2, 181.0], [65.3, 182.0], [65.4, 182.0], [65.5, 183.0], [65.6, 184.0], [65.7, 185.0], [65.8, 186.0], [65.9, 186.0], [66.0, 187.0], [66.1, 188.0], [66.2, 189.0], [66.3, 189.0], [66.4, 190.0], [66.5, 191.0], [66.6, 191.0], [66.7, 192.0], [66.8, 193.0], [66.9, 194.0], [67.0, 195.0], [67.1, 195.0], [67.2, 196.0], [67.3, 197.0], [67.4, 197.0], [67.5, 198.0], [67.6, 198.0], [67.7, 199.0], [67.8, 200.0], [67.9, 200.0], [68.0, 201.0], [68.1, 201.0], [68.2, 202.0], [68.3, 202.0], [68.4, 203.0], [68.5, 204.0], [68.6, 204.0], [68.7, 205.0], [68.8, 205.0], [68.9, 206.0], [69.0, 207.0], [69.1, 207.0], [69.2, 208.0], [69.3, 208.0], [69.4, 209.0], [69.5, 210.0], [69.6, 210.0], [69.7, 211.0], [69.8, 211.0], [69.9, 212.0], [70.0, 213.0], [70.1, 213.0], [70.2, 214.0], [70.3, 214.0], [70.4, 215.0], [70.5, 215.0], [70.6, 216.0], [70.7, 217.0], [70.8, 217.0], [70.9, 218.0], [71.0, 218.0], [71.1, 219.0], [71.2, 220.0], [71.3, 220.0], [71.4, 221.0], [71.5, 221.0], [71.6, 222.0], [71.7, 223.0], [71.8, 223.0], [71.9, 224.0], [72.0, 225.0], [72.1, 226.0], [72.2, 227.0], [72.3, 227.0], [72.4, 228.0], [72.5, 229.0], [72.6, 230.0], [72.7, 230.0], [72.8, 231.0], [72.9, 232.0], [73.0, 233.0], [73.1, 234.0], [73.2, 234.0], [73.3, 235.0], [73.4, 236.0], [73.5, 237.0], [73.6, 237.0], [73.7, 238.0], [73.8, 239.0], [73.9, 240.0], [74.0, 241.0], [74.1, 242.0], [74.2, 243.0], [74.3, 243.0], [74.4, 244.0], [74.5, 245.0], [74.6, 246.0], [74.7, 247.0], [74.8, 248.0], [74.9, 249.0], [75.0, 250.0], [75.1, 251.0], [75.2, 252.0], [75.3, 253.0], [75.4, 254.0], [75.5, 255.0], [75.6, 256.0], [75.7, 257.0], [75.8, 259.0], [75.9, 260.0], [76.0, 261.0], [76.1, 262.0], [76.2, 264.0], [76.3, 265.0], [76.4, 266.0], [76.5, 267.0], [76.6, 269.0], [76.7, 270.0], [76.8, 272.0], [76.9, 274.0], [77.0, 276.0], [77.1, 278.0], [77.2, 280.0], [77.3, 282.0], [77.4, 285.0], [77.5, 288.0], [77.6, 291.0], [77.7, 294.0], [77.8, 297.0], [77.9, 300.0], [78.0, 306.0], [78.1, 313.0], [78.2, 330.0], [78.3, 431.0], [78.4, 469.0], [78.5, 516.0], [78.6, 526.0], [78.7, 533.0], [78.8, 540.0], [78.9, 548.0], [79.0, 559.0], [79.1, 575.0], [79.2, 591.0], [79.3, 597.0], [79.4, 601.0], [79.5, 607.0], [79.6, 612.0], [79.7, 622.0], [79.8, 629.0], [79.9, 633.0], [80.0, 638.0], [80.1, 640.0], [80.2, 645.0], [80.3, 651.0], [80.4, 660.0], [80.5, 667.0], [80.6, 673.0], [80.7, 678.0], [80.8, 683.0], [80.9, 691.0], [81.0, 701.0], [81.1, 709.0], [81.2, 713.0], [81.3, 716.0], [81.4, 722.0], [81.5, 727.0], [81.6, 730.0], [81.7, 732.0], [81.8, 734.0], [81.9, 737.0], [82.0, 740.0], [82.1, 750.0], [82.2, 756.0], [82.3, 756.0], [82.4, 759.0], [82.5, 762.0], [82.6, 767.0], [82.7, 770.0], [82.8, 773.0], [82.9, 776.0], [83.0, 779.0], [83.1, 782.0], [83.2, 787.0], [83.3, 792.0], [83.4, 800.0], [83.5, 810.0], [83.6, 822.0], [83.7, 831.0], [83.8, 838.0], [83.9, 842.0], [84.0, 846.0], [84.1, 852.0], [84.2, 858.0], [84.3, 862.0], [84.4, 864.0], [84.5, 867.0], [84.6, 869.0], [84.7, 870.0], [84.8, 871.0], [84.9, 874.0], [85.0, 876.0], [85.1, 878.0], [85.2, 884.0], [85.3, 891.0], [85.4, 894.0], [85.5, 901.0], [85.6, 912.0], [85.7, 926.0], [85.8, 942.0], [85.9, 947.0], [86.0, 957.0], [86.1, 964.0], [86.2, 969.0], [86.3, 978.0], [86.4, 984.0], [86.5, 987.0], [86.6, 992.0], [86.7, 995.0], [86.8, 1001.0], [86.9, 1003.0], [87.0, 1005.0], [87.1, 1007.0], [87.2, 1010.0], [87.3, 1013.0], [87.4, 1014.0], [87.5, 1016.0], [87.6, 1019.0], [87.7, 1022.0], [87.8, 1024.0], [87.9, 1025.0], [88.0, 1026.0], [88.1, 1027.0], [88.2, 1027.0], [88.3, 1030.0], [88.4, 1031.0], [88.5, 1032.0], [88.6, 1033.0], [88.7, 1035.0], [88.8, 1036.0], [88.9, 1038.0], [89.0, 1040.0], [89.1, 1044.0], [89.2, 1048.0], [89.3, 1050.0], [89.4, 1058.0], [89.5, 1069.0], [89.6, 1098.0], [89.7, 1111.0], [89.8, 1117.0], [89.9, 1120.0], [90.0, 1123.0], [90.1, 1124.0], [90.2, 1125.0], [90.3, 1126.0], [90.4, 1134.0], [90.5, 1136.0], [90.6, 1138.0], [90.7, 1146.0], [90.8, 1154.0], [90.9, 1161.0], [91.0, 1163.0], [91.1, 1168.0], [91.2, 1174.0], [91.3, 1176.0], [91.4, 1178.0], [91.5, 1186.0], [91.6, 1190.0], [91.7, 1194.0], [91.8, 1204.0], [91.9, 1210.0], [92.0, 1219.0], [92.1, 1224.0], [92.2, 1228.0], [92.3, 1236.0], [92.4, 1241.0], [92.5, 1247.0], [92.6, 1250.0], [92.7, 1256.0], [92.8, 1262.0], [92.9, 1265.0], [93.0, 1270.0], [93.1, 1275.0], [93.2, 1280.0], [93.3, 1286.0], [93.4, 1288.0], [93.5, 1295.0], [93.6, 1302.0], [93.7, 1314.0], [93.8, 1322.0], [93.9, 1325.0], [94.0, 1326.0], [94.1, 1328.0], [94.2, 1329.0], [94.3, 1334.0], [94.4, 1337.0], [94.5, 1343.0], [94.6, 1348.0], [94.7, 1350.0], [94.8, 1361.0], [94.9, 1366.0], [95.0, 1373.0], [95.1, 1383.0], [95.2, 1392.0], [95.3, 1399.0], [95.4, 1401.0], [95.5, 1404.0], [95.6, 1410.0], [95.7, 1420.0], [95.8, 1425.0], [95.9, 1434.0], [96.0, 1443.0], [96.1, 1450.0], [96.2, 1471.0], [96.3, 1487.0], [96.4, 1504.0], [96.5, 1512.0], [96.6, 1513.0], [96.7, 1519.0], [96.8, 1523.0], [96.9, 1533.0], [97.0, 1544.0], [97.1, 1556.0], [97.2, 1566.0], [97.3, 1573.0], [97.4, 1590.0], [97.5, 1613.0], [97.6, 1665.0], [97.7, 1677.0], [97.8, 1691.0], [97.9, 1716.0], [98.0, 1724.0], [98.1, 1727.0], [98.2, 1747.0], [98.3, 1758.0], [98.4, 1838.0], [98.5, 1886.0], [98.6, 1931.0], [98.7, 1932.0], [98.8, 2051.0], [98.9, 31296.0], [99.0, 35831.0], [99.1, 37757.0], [99.2, 37785.0], [99.3, 37896.0], [99.4, 37908.0], [99.5, 37918.0], [99.6, 38020.0], [99.7, 38429.0], [99.8, 38628.0], [99.9, 39440.0], [100.0, 39772.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 22536.0, "series": [{"data": [[0.0, 22536.0], [600.0, 617.0], [700.0, 900.0], [800.0, 787.0], [900.0, 488.0], [1000.0, 1064.0], [1100.0, 791.0], [1200.0, 679.0], [1300.0, 662.0], [1400.0, 393.0], [1500.0, 410.0], [1600.0, 137.0], [1700.0, 191.0], [1800.0, 66.0], [1900.0, 84.0], [2000.0, 58.0], [2100.0, 1.0], [100.0, 2884.0], [30800.0, 2.0], [30900.0, 1.0], [31100.0, 2.0], [31200.0, 1.0], [31500.0, 2.0], [31700.0, 2.0], [32000.0, 2.0], [32200.0, 2.0], [32400.0, 2.0], [32600.0, 1.0], [32700.0, 1.0], [33200.0, 1.0], [32900.0, 1.0], [32800.0, 1.0], [33600.0, 1.0], [33000.0, 1.0], [33300.0, 1.0], [33400.0, 1.0], [33500.0, 1.0], [33900.0, 1.0], [34000.0, 1.0], [33800.0, 1.0], [34800.0, 1.0], [34400.0, 1.0], [34500.0, 1.0], [34700.0, 2.0], [34200.0, 1.0], [34100.0, 1.0], [36600.0, 1.0], [35000.0, 1.0], [35800.0, 1.0], [35700.0, 1.0], [35500.0, 1.0], [35200.0, 2.0], [35300.0, 1.0], [36800.0, 1.0], [36400.0, 1.0], [36500.0, 1.0], [36100.0, 1.0], [36000.0, 1.0], [36300.0, 1.0], [35900.0, 1.0], [36700.0, 1.0], [37300.0, 2.0], [37700.0, 62.0], [37400.0, 2.0], [37600.0, 1.0], [38000.0, 11.0], [37800.0, 44.0], [37100.0, 2.0], [37000.0, 1.0], [37900.0, 99.0], [38500.0, 19.0], [38400.0, 17.0], [38100.0, 20.0], [38300.0, 3.0], [38200.0, 5.0], [38800.0, 18.0], [38700.0, 1.0], [38600.0, 3.0], [38900.0, 10.0], [39400.0, 26.0], [39600.0, 5.0], [39500.0, 7.0], [39100.0, 1.0], [39200.0, 1.0], [39000.0, 3.0], [39700.0, 3.0], [200.0, 3789.0], [300.0, 145.0], [400.0, 50.0], [500.0, 350.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 39700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 949.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 23256.0, "series": [{"data": [[0.0, 7070.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6225.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 949.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 23256.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 123.02258857819436, "minX": 1.57676328E12, "maxY": 270.047773462538, "series": [{"data": [[1.57676328E12, 123.02258857819436], [1.57676334E12, 270.047773462538]], "isOverall": false, "label": "1. Save API", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676334E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 37759.07692307692, "series": [{"data": [[2.0, 10.8], [3.0, 21.235294117647058], [4.0, 16.884615384615383], [5.0, 11.25531914893617], [6.0, 35.86363636363636], [7.0, 24.965517241379313], [8.0, 35.689655172413794], [9.0, 47.56521739130435], [10.0, 39.38709677419354], [11.0, 60.099999999999994], [12.0, 43.64285714285715], [13.0, 80.23809523809524], [14.0, 50.333333333333336], [15.0, 40.72093023255815], [16.0, 66.22580645161291], [17.0, 11.057553956834536], [18.0, 69.2702702702703], [19.0, 54.09090909090907], [20.0, 119.21052631578948], [21.0, 70.29729729729729], [22.0, 35.92207792207792], [23.0, 49.41935483870967], [24.0, 72.1764705882353], [25.0, 59.092592592592624], [26.0, 53.49056603773585], [27.0, 61.97916666666666], [28.0, 65.68333333333335], [29.0, 49.276923076923076], [30.0, 47.71014492753625], [31.0, 41.455696202531655], [32.0, 50.97590361445781], [33.0, 68.52941176470588], [34.0, 87.25000000000001], [35.0, 120.50000000000003], [36.0, 107.41025641025644], [37.0, 26.925373134328378], [38.0, 109.09090909090907], [39.0, 34.5275590551181], [40.0, 64.06249999999997], [41.0, 60.64999999999998], [42.0, 92.75], [43.0, 89.04166666666666], [44.0, 148.69230769230768], [45.0, 25.986301369863014], [46.0, 45.72670807453417], [47.0, 159.05714285714285], [48.0, 63.933734939759034], [49.0, 137.98924731182805], [50.0, 182.71844660194174], [51.0, 176.4190476190476], [52.0, 170.91228070175438], [53.0, 107.47058823529409], [54.0, 121.49999999999996], [55.0, 120.30434782608694], [56.0, 82.58108108108108], [57.0, 87.8681318681319], [58.0, 37.91959798994981], [59.0, 179.60975609756102], [60.0, 137.04411764705878], [61.0, 126.00000000000006], [62.0, 86.84615384615384], [63.0, 152.027027027027], [64.0, 173.890625], [65.0, 147.78260869565216], [66.0, 204.10869565217394], [67.0, 120.57009345794393], [68.0, 162.45614035087718], [69.0, 154.27659574468083], [70.0, 220.23333333333326], [71.0, 119.25000000000003], [72.0, 172.58823529411768], [73.0, 190.2448979591837], [74.0, 188.01754385964912], [75.0, 183.83333333333334], [76.0, 175.95000000000005], [77.0, 104.56000000000004], [78.0, 185.92452830188677], [79.0, 183.14285714285722], [80.0, 122.31884057971023], [81.0, 123.74242424242425], [82.0, 181.2222222222222], [83.0, 202.34782608695653], [84.0, 187.0185185185185], [85.0, 167.86458333333326], [86.0, 162.02290076335888], [87.0, 223.26923076923075], [88.0, 153.27142857142854], [89.0, 208.47058823529412], [90.0, 188.87837837837836], [91.0, 200.58156028368802], [92.0, 102.74999999999999], [93.0, 157.45070422535207], [94.0, 132.5037593984963], [95.0, 165.93913043478264], [96.0, 99.59000000000003], [97.0, 153.42424242424238], [98.0, 169.21333333333337], [99.0, 211.89830508474574], [100.0, 148.13043478260866], [101.0, 193.28440366972478], [102.0, 193.38202247191006], [103.0, 165.97183098591555], [104.0, 154.41379310344834], [105.0, 211.7727272727273], [106.0, 259.51923076923083], [107.0, 233.66153846153858], [108.0, 210.21126760563385], [109.0, 196.08196721311478], [110.0, 213.73553719008268], [111.0, 209.30588235294118], [112.0, 223.96226415094338], [113.0, 224.7862595419848], [114.0, 204.55223880597012], [115.0, 240.86428571428564], [116.0, 172.20958083832346], [117.0, 184.4162162162163], [118.0, 120.0041841004184], [119.0, 191.2432432432433], [120.0, 212.29565217391317], [121.0, 188.67187500000006], [122.0, 129.97333333333333], [123.0, 175.9691358024691], [124.0, 172.4169884169885], [125.0, 219.28695652173906], [126.0, 135.74761904761897], [127.0, 232.21693121693121], [128.0, 172.09803921568624], [129.0, 268.97468354430396], [130.0, 79.99999999999999], [131.0, 514.051724137931], [132.0, 77.8888888888889], [133.0, 430.49999999999994], [134.0, 167.19565217391306], [135.0, 574.4255319148934], [136.0, 265.14406779661033], [137.0, 349.16923076923075], [138.0, 497.6964285714285], [140.0, 416.6999999999998], [141.0, 394.2800000000001], [142.0, 547.0], [143.0, 454.50877192982466], [139.0, 0.6111111111111113], [144.0, 705.4716981132077], [145.0, 111.95890410958904], [146.0, 319.25609756097555], [147.0, 734.35], [148.0, 216.22727272727266], [149.0, 169.86046511627907], [150.0, 76.65040650406505], [151.0, 356.08433734939763], [152.0, 443.00000000000017], [153.0, 128.5063291139241], [154.0, 114.61157024793398], [155.0, 102.16666666666667], [156.0, 394.2222222222223], [157.0, 550.3698630136988], [158.0, 257.78048780487813], [159.0, 490.4999999999999], [160.0, 380.93023255813955], [161.0, 143.76056338028187], [162.0, 429.2307692307692], [163.0, 74.04225352112674], [165.0, 407.82352941176464], [166.0, 516.6307692307691], [167.0, 706.6933333333334], [164.0, 1.3571428571428577], [168.0, 288.0416666666666], [169.0, 54.166666666666664], [170.0, 138.65886287625423], [171.0, 227.28125000000003], [172.0, 496.72727272727263], [173.0, 682.5483870967739], [174.0, 79.93181818181816], [175.0, 62.775784753363276], [176.0, 203.8627450980393], [177.0, 342.2261904761906], [178.0, 675.7500000000002], [179.0, 553.26582278481], [180.0, 38.380952380952365], [181.0, 740.3505154639172], [183.0, 634.5116279069767], [182.0, 2.2941176470588243], [184.0, 178.00000000000003], [185.0, 489.8571428571428], [187.0, 453.4285714285718], [188.0, 372.77155172413825], [190.0, 687.0], [191.0, 431.6237623762375], [189.0, 0.7087378640776698], [186.0, 4.8809523809523805], [192.0, 352.08974358974376], [193.0, 320.6065573770493], [195.0, 251.91139240506322], [196.0, 733.956043956044], [198.0, 681.22], [197.0, 233.84], [199.0, 447.7419354838709], [194.0, 2.0], [200.0, 591.1132075471698], [201.0, 942.1538461538463], [203.0, 918.7017543859648], [204.0, 447.38043478260846], [205.0, 372.57142857142867], [206.0, 722.8732394366197], [207.0, 523.8999999999999], [202.0, 0.0], [209.0, 743.6], [211.0, 656.6153846153845], [212.0, 104.48633879781416], [213.0, 682.2644628099174], [214.0, 778.5000000000001], [215.0, 0.3928571428571429], [210.0, 4.90625], [208.0, 0.4], [217.0, 225.71561771561755], [218.0, 221.58883248730976], [219.0, 775.8000000000001], [221.0, 225.81578947368436], [220.0, 362.25773195876286], [222.0, 492.91869918699217], [223.0, 756.205555555556], [216.0, 5.666666666666668], [226.0, 382.375], [230.0, 530.8888888888889], [231.0, 896.6829268292685], [229.0, 2.555555555555555], [228.0, 31.769230769230766], [227.0, 1.935483870967742], [225.0, 321.6571428571428], [224.0, 0.10000000000000002], [232.0, 572.9789473684214], [233.0, 578.5484848484849], [235.0, 461.96969696969705], [236.0, 128.641975308642], [239.0, 493.34722222222223], [237.0, 0.7692307692307692], [234.0, 13.6], [240.0, 923.4736842105261], [241.0, 1030.5], [242.0, 883.9791666666665], [244.0, 943.4999999999998], [246.0, 319.8888888888888], [247.0, 597.3114754098358], [245.0, 1.6842105263157894], [243.0, 0.8271604938271611], [249.0, 247.79207920792078], [248.0, 548.2899159663868], [250.0, 1377.3888888888887], [251.0, 857.5000000000001], [255.0, 1035.576271186441], [254.0, 9.291666666666666], [253.0, 8.5], [252.0, 3.9830508474576263], [257.0, 236.8400000000002], [256.0, 1105.6000000000001], [258.0, 489.9368421052628], [259.0, 1281.1666666666667], [260.0, 388.1020408163264], [263.0, 727.7540983606559], [264.0, 665.5275590551181], [271.0, 865.6092715231788], [268.0, 537.6554054054056], [269.0, 1.090909090909091], [270.0, 502.32530120481914], [265.0, 638.5], [267.0, 129.3541666666666], [266.0, 10.949999999999998], [262.0, 900.5263157894741], [261.0, 0.3], [285.0, 529.3083333333337], [272.0, 713.2539682539683], [275.0, 658.1176470588234], [273.0, 1.4905660377358494], [284.0, 0.0], [277.0, 351.2717391304348], [276.0, 1.0000000000000002], [278.0, 54.91836734693876], [279.0, 614.3720930232557], [280.0, 141.96000000000012], [281.0, 741.4328358208949], [282.0, 484.67313915857613], [283.0, 0.5], [287.0, 527.7808219178085], [286.0, 0.6086956521739132], [300.0, 795.7499999999993], [289.0, 488.6181818181816], [288.0, 908.9444444444445], [290.0, 641.315589353612], [291.0, 2.186813186813186], [301.0, 893.5833333333336], [302.0, 449.4157303370786], [303.0, 29.76190476190475], [293.0, 810.2954545454546], [292.0, 0.0], [294.0, 1.8870967741935483], [295.0, 252.25581395348814], [296.0, 402.20689655172424], [297.0, 91.81909547738694], [298.0, 469.7500000000001], [299.0, 803.4596273291926], [316.0, 1405.29268292683], [305.0, 918.3736263736265], [307.0, 1159.7826086956525], [306.0, 0.0], [309.0, 929.7797619047622], [310.0, 663.0909090909089], [311.0, 0.39999999999999997], [304.0, 97.42307692307692], [308.0, 1425.6964285714282], [312.0, 1027.3], [313.0, 324.5853658536586], [318.0, 1197.2906976744184], [317.0, 0.07692307692307691], [319.0, 963.4444444444445], [315.0, 42.82636655948553], [314.0, 0.7234042553191488], [332.0, 1222.720338983051], [320.0, 1351.7014925373137], [323.0, 1129.7619047619048], [322.0, 0.4375], [321.0, 0.0], [325.0, 299.2771739130438], [324.0, 0.1818181818181818], [327.0, 0.6747572815533986], [326.0, 0.3846153846153846], [328.0, 247.14999999999998], [329.0, 267.4187499999997], [330.0, 458.8205128205129], [331.0, 900.1007194244606], [333.0, 1218.8987341772147], [335.0, 0.31343283582089543], [334.0, 0.44444444444444453], [336.0, 90.0681818181818], [339.0, 461.80136986301403], [338.0, 0.236842105263158], [337.0, 0.3552631578947369], [348.0, 0.2903225806451612], [340.0, 282.9347826086956], [341.0, 661.7005208333337], [342.0, 534.9], [343.0, 642.4876033057851], [344.0, 703.6808510638296], [345.0, 18.111111111111114], [347.0, 2.9555555555555566], [346.0, 1.4583333333333333], [349.0, 766.2830188679245], [351.0, 0.6206896551724137], [350.0, 0.09090909090909093], [353.0, 547.7333333333332], [352.0, 595.6896551724138], [355.0, 673.4310344827588], [354.0, 2.5757575757575752], [356.0, 662.047619047619], [357.0, 1620.8633540372675], [358.0, 1175.1481481481485], [359.0, 2.042056074766355], [367.0, 1.824644549763033], [361.0, 1.8175182481751824], [360.0, 1.4062500000000004], [363.0, 1.0102040816326525], [362.0, 0.75], [366.0, 0.8125], [365.0, 0.6], [364.0, 0.2], [382.0, 2.1169590643274856], [383.0, 1.2052401746724888], [381.0, 0.0], [380.0, 2.0857142857142867], [379.0, 0.10810810810810813], [378.0, 0.10909090909090911], [377.0, 0.9111111111111111], [376.0, 0.9069767441860468], [375.0, 0.7246376811594204], [369.0, 0.5882352941176471], [368.0, 1.1250000000000002], [371.0, 0.8148148148148149], [370.0, 1.1313131313131315], [374.0, 20.79213483146068], [373.0, 0.14285714285714293], [372.0, 0.1428571428571429], [398.0, 0.3246753246753246], [399.0, 0.15346534653465346], [397.0, 0.65], [396.0, 0.945945945945946], [395.0, 0.7868852459016391], [394.0, 3.5208333333333326], [393.0, 1.5204678362573105], [392.0, 2.03125], [391.0, 0.6923076923076924], [385.0, 3.5078534031413624], [384.0, 1.0476190476190477], [387.0, 0.1153846153846154], [386.0, 0.25000000000000006], [390.0, 1.4358974358974361], [389.0, 6.800000000000001], [388.0, 5.255319148936169], [414.0, 0.9857142857142862], [415.0, 0.5584415584415587], [413.0, 0.16666666666666669], [412.0, 2.3749999999999996], [411.0, 4.50909090909091], [410.0, 0.12000000000000008], [409.0, 1.2753303964757705], [408.0, 1.6308411214953273], [407.0, 1.5800000000000014], [401.0, 2.5180722891566267], [400.0, 26.644171779141114], [403.0, 0.1818181818181818], [402.0, 0.4959016393442622], [406.0, 1.7096774193548392], [405.0, 0.6111111111111112], [404.0, 4.122222222222223], [418.0, 14714.35593220339], [417.0, 37759.07692307692], [416.0, 14964.068535825583], [1.0, 8.214285714285715]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}, {"data": [[227.00261333333194, 681.7547199999929]], "isOverall": false, "label": "Save API HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 418.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 52468.35, "minX": 1.57676328E12, "maxY": 3081988.283333333, "series": [{"data": [[1.57676328E12, 52468.35], [1.57676334E12, 1063282.4666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57676328E12, 3081988.283333333], [1.57676334E12, 916539.9166666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676334E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 436.0800619364231, "minX": 1.57676328E12, "maxY": 783.4575996380219, "series": [{"data": [[1.57676328E12, 436.0800619364231], [1.57676334E12, 783.4575996380219]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676334E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 172.96572527431056, "minX": 1.57676328E12, "maxY": 436.07414154294554, "series": [{"data": [[1.57676328E12, 436.07414154294554], [1.57676334E12, 172.96572527431056]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676334E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.034884780034611665, "minX": 1.57676328E12, "maxY": 21.583085102371722, "series": [{"data": [[1.57676328E12, 0.034884780034611665], [1.57676334E12, 21.583085102371722]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676334E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.57676328E12, "maxY": 38086.0, "series": [{"data": [[1.57676328E12, 1636.0], [1.57676334E12, 38086.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57676328E12, 12.0], [1.57676334E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57676328E12, 958.0], [1.57676334E12, 1725.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57676328E12, 1295.0], [1.57676334E12, 2051.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57676328E12, 1122.0], [1.57676334E12, 1854.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676334E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 40.0, "maxY": 1528.0, "series": [{"data": [[539.0, 228.0], [40.0, 6.0], [49.0, 23.0], [69.0, 1528.0], [124.0, 1214.0], [140.0, 1121.5], [148.0, 53.0], [146.0, 1397.5], [176.0, 91.5], [182.0, 724.0], [181.0, 1228.0], [179.0, 1360.0], [189.0, 783.0], [187.0, 1121.0], [196.0, 759.0], [193.0, 1176.0], [198.0, 1527.0], [207.0, 558.0], [208.0, 363.0], [209.0, 912.0], [210.0, 946.0], [222.0, 1158.5], [224.0, 136.5], [232.0, 172.0], [233.0, 587.0], [236.0, 1337.5], [235.0, 831.0], [238.0, 1020.5], [246.0, 1251.0], [244.0, 1406.0], [250.0, 1326.0], [256.0, 790.0], [261.0, 1161.0], [258.0, 1264.5], [257.0, 1350.0], [297.0, 1513.0], [313.0, 887.0], [320.0, 154.0], [324.0, 171.5], [350.0, 182.5], [349.0, 232.0], [371.0, 191.0], [396.0, 194.0], [433.0, 212.0], [442.0, 221.0], [459.0, 249.0], [466.0, 211.5], [473.0, 233.0], [468.0, 243.0], [510.0, 237.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8893.0, 0.0], [2475.0, 0.0], [5290.0, 0.0], [6598.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8893.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 40.0, "maxY": 1528.0, "series": [{"data": [[539.0, 228.0], [40.0, 6.0], [49.0, 23.0], [69.0, 1528.0], [124.0, 1214.0], [140.0, 1121.5], [148.0, 53.0], [146.0, 1397.5], [176.0, 91.5], [182.0, 724.0], [181.0, 1228.0], [179.0, 1360.0], [189.0, 783.0], [187.0, 1121.0], [196.0, 759.0], [193.0, 1176.0], [198.0, 1527.0], [207.0, 558.0], [208.0, 363.0], [209.0, 912.0], [210.0, 946.0], [222.0, 1158.5], [224.0, 136.5], [232.0, 172.0], [233.0, 587.0], [236.0, 1337.5], [235.0, 831.0], [238.0, 1020.5], [246.0, 1251.0], [244.0, 1406.0], [250.0, 1326.0], [256.0, 790.0], [261.0, 1161.0], [258.0, 1264.5], [257.0, 1350.0], [297.0, 1513.0], [313.0, 887.0], [320.0, 154.0], [324.0, 171.5], [350.0, 182.5], [349.0, 232.0], [371.0, 191.0], [396.0, 194.0], [433.0, 212.0], [442.0, 221.0], [459.0, 249.0], [466.0, 211.5], [473.0, 233.0], [468.0, 243.0], [510.0, 237.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8893.0, 0.0], [2475.0, 0.0], [5290.0, 0.0], [6598.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8893.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 187.21666666666667, "minX": 1.57676328E12, "maxY": 437.78333333333336, "series": [{"data": [[1.57676328E12, 187.21666666666667], [1.57676334E12, 437.78333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676334E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.15, "minX": 1.57676328E12, "maxY": 378.48333333333335, "series": [{"data": [[1.57676328E12, 182.98333333333332], [1.57676334E12, 54.416666666666664]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57676334E12, 378.48333333333335]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.57676334E12, 6.966666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.57676334E12, 2.15]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676334E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 54.416666666666664, "minX": 1.57676328E12, "maxY": 387.6, "series": [{"data": [[1.57676334E12, 387.6]], "isOverall": false, "label": "Save API HTTP Request-failure", "isController": false}, {"data": [[1.57676328E12, 182.98333333333332], [1.57676334E12, 54.416666666666664]], "isOverall": false, "label": "Save API HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676334E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 54.416666666666664, "minX": 1.57676328E12, "maxY": 387.6, "series": [{"data": [[1.57676328E12, 182.98333333333332], [1.57676334E12, 54.416666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57676334E12, 387.6]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676334E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

