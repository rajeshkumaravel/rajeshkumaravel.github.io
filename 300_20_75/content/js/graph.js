/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 39209.0, "series": [{"data": [[0.0, 4.0], [0.1, 6.0], [0.2, 6.0], [0.3, 7.0], [0.4, 9.0], [0.5, 10.0], [0.6, 11.0], [0.7, 13.0], [0.8, 15.0], [0.9, 16.0], [1.0, 20.0], [1.1, 21.0], [1.2, 25.0], [1.3, 28.0], [1.4, 30.0], [1.5, 33.0], [1.6, 35.0], [1.7, 37.0], [1.8, 38.0], [1.9, 40.0], [2.0, 44.0], [2.1, 47.0], [2.2, 49.0], [2.3, 53.0], [2.4, 54.0], [2.5, 56.0], [2.6, 59.0], [2.7, 62.0], [2.8, 63.0], [2.9, 64.0], [3.0, 66.0], [3.1, 68.0], [3.2, 70.0], [3.3, 72.0], [3.4, 73.0], [3.5, 74.0], [3.6, 76.0], [3.7, 78.0], [3.8, 79.0], [3.9, 80.0], [4.0, 83.0], [4.1, 84.0], [4.2, 85.0], [4.3, 86.0], [4.4, 88.0], [4.5, 90.0], [4.6, 91.0], [4.7, 92.0], [4.8, 93.0], [4.9, 96.0], [5.0, 97.0], [5.1, 98.0], [5.2, 99.0], [5.3, 100.0], [5.4, 101.0], [5.5, 101.0], [5.6, 102.0], [5.7, 103.0], [5.8, 104.0], [5.9, 104.0], [6.0, 105.0], [6.1, 105.0], [6.2, 106.0], [6.3, 107.0], [6.4, 108.0], [6.5, 109.0], [6.6, 110.0], [6.7, 111.0], [6.8, 111.0], [6.9, 112.0], [7.0, 112.0], [7.1, 113.0], [7.2, 113.0], [7.3, 114.0], [7.4, 114.0], [7.5, 114.0], [7.6, 115.0], [7.7, 115.0], [7.8, 116.0], [7.9, 116.0], [8.0, 116.0], [8.1, 117.0], [8.2, 118.0], [8.3, 118.0], [8.4, 118.0], [8.5, 119.0], [8.6, 119.0], [8.7, 120.0], [8.8, 120.0], [8.9, 121.0], [9.0, 122.0], [9.1, 122.0], [9.2, 123.0], [9.3, 124.0], [9.4, 124.0], [9.5, 125.0], [9.6, 125.0], [9.7, 126.0], [9.8, 127.0], [9.9, 127.0], [10.0, 127.0], [10.1, 128.0], [10.2, 128.0], [10.3, 129.0], [10.4, 130.0], [10.5, 131.0], [10.6, 131.0], [10.7, 131.0], [10.8, 132.0], [10.9, 132.0], [11.0, 132.0], [11.1, 133.0], [11.2, 133.0], [11.3, 134.0], [11.4, 134.0], [11.5, 135.0], [11.6, 135.0], [11.7, 136.0], [11.8, 136.0], [11.9, 137.0], [12.0, 137.0], [12.1, 137.0], [12.2, 138.0], [12.3, 138.0], [12.4, 139.0], [12.5, 140.0], [12.6, 140.0], [12.7, 141.0], [12.8, 141.0], [12.9, 141.0], [13.0, 142.0], [13.1, 142.0], [13.2, 143.0], [13.3, 144.0], [13.4, 144.0], [13.5, 145.0], [13.6, 145.0], [13.7, 146.0], [13.8, 146.0], [13.9, 146.0], [14.0, 147.0], [14.1, 147.0], [14.2, 148.0], [14.3, 148.0], [14.4, 149.0], [14.5, 150.0], [14.6, 150.0], [14.7, 151.0], [14.8, 152.0], [14.9, 152.0], [15.0, 153.0], [15.1, 153.0], [15.2, 154.0], [15.3, 154.0], [15.4, 155.0], [15.5, 156.0], [15.6, 156.0], [15.7, 157.0], [15.8, 157.0], [15.9, 158.0], [16.0, 158.0], [16.1, 158.0], [16.2, 159.0], [16.3, 160.0], [16.4, 160.0], [16.5, 161.0], [16.6, 161.0], [16.7, 162.0], [16.8, 162.0], [16.9, 162.0], [17.0, 163.0], [17.1, 163.0], [17.2, 164.0], [17.3, 164.0], [17.4, 165.0], [17.5, 165.0], [17.6, 166.0], [17.7, 166.0], [17.8, 166.0], [17.9, 167.0], [18.0, 167.0], [18.1, 168.0], [18.2, 168.0], [18.3, 169.0], [18.4, 169.0], [18.5, 170.0], [18.6, 171.0], [18.7, 171.0], [18.8, 171.0], [18.9, 171.0], [19.0, 172.0], [19.1, 172.0], [19.2, 173.0], [19.3, 173.0], [19.4, 174.0], [19.5, 174.0], [19.6, 174.0], [19.7, 175.0], [19.8, 175.0], [19.9, 175.0], [20.0, 176.0], [20.1, 176.0], [20.2, 176.0], [20.3, 176.0], [20.4, 176.0], [20.5, 177.0], [20.6, 177.0], [20.7, 177.0], [20.8, 178.0], [20.9, 178.0], [21.0, 179.0], [21.1, 179.0], [21.2, 179.0], [21.3, 179.0], [21.4, 180.0], [21.5, 180.0], [21.6, 180.0], [21.7, 181.0], [21.8, 181.0], [21.9, 181.0], [22.0, 182.0], [22.1, 182.0], [22.2, 183.0], [22.3, 184.0], [22.4, 184.0], [22.5, 184.0], [22.6, 184.0], [22.7, 185.0], [22.8, 185.0], [22.9, 185.0], [23.0, 186.0], [23.1, 186.0], [23.2, 186.0], [23.3, 187.0], [23.4, 187.0], [23.5, 187.0], [23.6, 187.0], [23.7, 188.0], [23.8, 188.0], [23.9, 188.0], [24.0, 188.0], [24.1, 189.0], [24.2, 189.0], [24.3, 189.0], [24.4, 189.0], [24.5, 190.0], [24.6, 190.0], [24.7, 190.0], [24.8, 191.0], [24.9, 191.0], [25.0, 192.0], [25.1, 192.0], [25.2, 192.0], [25.3, 193.0], [25.4, 193.0], [25.5, 193.0], [25.6, 194.0], [25.7, 194.0], [25.8, 194.0], [25.9, 194.0], [26.0, 195.0], [26.1, 195.0], [26.2, 196.0], [26.3, 196.0], [26.4, 196.0], [26.5, 197.0], [26.6, 197.0], [26.7, 198.0], [26.8, 198.0], [26.9, 199.0], [27.0, 199.0], [27.1, 200.0], [27.2, 200.0], [27.3, 200.0], [27.4, 201.0], [27.5, 201.0], [27.6, 201.0], [27.7, 202.0], [27.8, 202.0], [27.9, 202.0], [28.0, 202.0], [28.1, 203.0], [28.2, 203.0], [28.3, 204.0], [28.4, 204.0], [28.5, 204.0], [28.6, 204.0], [28.7, 205.0], [28.8, 205.0], [28.9, 205.0], [29.0, 206.0], [29.1, 206.0], [29.2, 206.0], [29.3, 206.0], [29.4, 207.0], [29.5, 207.0], [29.6, 207.0], [29.7, 207.0], [29.8, 208.0], [29.9, 208.0], [30.0, 209.0], [30.1, 209.0], [30.2, 209.0], [30.3, 210.0], [30.4, 210.0], [30.5, 210.0], [30.6, 210.0], [30.7, 211.0], [30.8, 211.0], [30.9, 211.0], [31.0, 211.0], [31.1, 212.0], [31.2, 212.0], [31.3, 212.0], [31.4, 212.0], [31.5, 213.0], [31.6, 213.0], [31.7, 213.0], [31.8, 214.0], [31.9, 214.0], [32.0, 214.0], [32.1, 214.0], [32.2, 215.0], [32.3, 215.0], [32.4, 215.0], [32.5, 216.0], [32.6, 216.0], [32.7, 216.0], [32.8, 217.0], [32.9, 217.0], [33.0, 217.0], [33.1, 217.0], [33.2, 218.0], [33.3, 218.0], [33.4, 219.0], [33.5, 219.0], [33.6, 219.0], [33.7, 219.0], [33.8, 219.0], [33.9, 220.0], [34.0, 220.0], [34.1, 220.0], [34.2, 221.0], [34.3, 221.0], [34.4, 221.0], [34.5, 222.0], [34.6, 222.0], [34.7, 222.0], [34.8, 223.0], [34.9, 223.0], [35.0, 223.0], [35.1, 223.0], [35.2, 224.0], [35.3, 224.0], [35.4, 224.0], [35.5, 224.0], [35.6, 225.0], [35.7, 225.0], [35.8, 225.0], [35.9, 226.0], [36.0, 226.0], [36.1, 226.0], [36.2, 226.0], [36.3, 226.0], [36.4, 227.0], [36.5, 227.0], [36.6, 227.0], [36.7, 228.0], [36.8, 228.0], [36.9, 229.0], [37.0, 229.0], [37.1, 229.0], [37.2, 230.0], [37.3, 230.0], [37.4, 230.0], [37.5, 230.0], [37.6, 231.0], [37.7, 231.0], [37.8, 231.0], [37.9, 231.0], [38.0, 232.0], [38.1, 232.0], [38.2, 232.0], [38.3, 233.0], [38.4, 233.0], [38.5, 233.0], [38.6, 234.0], [38.7, 234.0], [38.8, 234.0], [38.9, 234.0], [39.0, 235.0], [39.1, 235.0], [39.2, 235.0], [39.3, 236.0], [39.4, 236.0], [39.5, 236.0], [39.6, 236.0], [39.7, 236.0], [39.8, 237.0], [39.9, 237.0], [40.0, 237.0], [40.1, 237.0], [40.2, 238.0], [40.3, 238.0], [40.4, 238.0], [40.5, 239.0], [40.6, 239.0], [40.7, 239.0], [40.8, 240.0], [40.9, 240.0], [41.0, 241.0], [41.1, 241.0], [41.2, 242.0], [41.3, 242.0], [41.4, 242.0], [41.5, 243.0], [41.6, 243.0], [41.7, 243.0], [41.8, 243.0], [41.9, 244.0], [42.0, 244.0], [42.1, 245.0], [42.2, 245.0], [42.3, 246.0], [42.4, 247.0], [42.5, 248.0], [42.6, 248.0], [42.7, 249.0], [42.8, 249.0], [42.9, 250.0], [43.0, 252.0], [43.1, 253.0], [43.2, 253.0], [43.3, 254.0], [43.4, 256.0], [43.5, 256.0], [43.6, 257.0], [43.7, 257.0], [43.8, 258.0], [43.9, 258.0], [44.0, 259.0], [44.1, 260.0], [44.2, 261.0], [44.3, 262.0], [44.4, 262.0], [44.5, 263.0], [44.6, 264.0], [44.7, 265.0], [44.8, 265.0], [44.9, 266.0], [45.0, 267.0], [45.1, 268.0], [45.2, 269.0], [45.3, 270.0], [45.4, 271.0], [45.5, 272.0], [45.6, 273.0], [45.7, 274.0], [45.8, 276.0], [45.9, 277.0], [46.0, 278.0], [46.1, 279.0], [46.2, 280.0], [46.3, 281.0], [46.4, 282.0], [46.5, 283.0], [46.6, 284.0], [46.7, 285.0], [46.8, 286.0], [46.9, 287.0], [47.0, 288.0], [47.1, 288.0], [47.2, 289.0], [47.3, 290.0], [47.4, 291.0], [47.5, 292.0], [47.6, 293.0], [47.7, 294.0], [47.8, 297.0], [47.9, 301.0], [48.0, 305.0], [48.1, 309.0], [48.2, 314.0], [48.3, 318.0], [48.4, 320.0], [48.5, 322.0], [48.6, 324.0], [48.7, 329.0], [48.8, 346.0], [48.9, 366.0], [49.0, 415.0], [49.1, 420.0], [49.2, 443.0], [49.3, 576.0], [49.4, 602.0], [49.5, 603.0], [49.6, 615.0], [49.7, 643.0], [49.8, 645.0], [49.9, 647.0], [50.0, 648.0], [50.1, 653.0], [50.2, 702.0], [50.3, 704.0], [50.4, 706.0], [50.5, 706.0], [50.6, 707.0], [50.7, 708.0], [50.8, 710.0], [50.9, 718.0], [51.0, 719.0], [51.1, 728.0], [51.2, 737.0], [51.3, 738.0], [51.4, 739.0], [51.5, 740.0], [51.6, 743.0], [51.7, 744.0], [51.8, 745.0], [51.9, 745.0], [52.0, 746.0], [52.1, 747.0], [52.2, 748.0], [52.3, 749.0], [52.4, 758.0], [52.5, 759.0], [52.6, 764.0], [52.7, 771.0], [52.8, 772.0], [52.9, 772.0], [53.0, 775.0], [53.1, 789.0], [53.2, 794.0], [53.3, 803.0], [53.4, 805.0], [53.5, 813.0], [53.6, 814.0], [53.7, 825.0], [53.8, 829.0], [53.9, 838.0], [54.0, 839.0], [54.1, 840.0], [54.2, 840.0], [54.3, 841.0], [54.4, 842.0], [54.5, 843.0], [54.6, 846.0], [54.7, 847.0], [54.8, 849.0], [54.9, 851.0], [55.0, 854.0], [55.1, 859.0], [55.2, 860.0], [55.3, 861.0], [55.4, 863.0], [55.5, 864.0], [55.6, 867.0], [55.7, 876.0], [55.8, 878.0], [55.9, 883.0], [56.0, 884.0], [56.1, 890.0], [56.2, 899.0], [56.3, 901.0], [56.4, 906.0], [56.5, 910.0], [56.6, 917.0], [56.7, 919.0], [56.8, 922.0], [56.9, 924.0], [57.0, 927.0], [57.1, 928.0], [57.2, 933.0], [57.3, 938.0], [57.4, 941.0], [57.5, 942.0], [57.6, 943.0], [57.7, 943.0], [57.8, 943.0], [57.9, 944.0], [58.0, 945.0], [58.1, 949.0], [58.2, 953.0], [58.3, 955.0], [58.4, 958.0], [58.5, 959.0], [58.6, 961.0], [58.7, 963.0], [58.8, 965.0], [58.9, 967.0], [59.0, 968.0], [59.1, 968.0], [59.2, 969.0], [59.3, 971.0], [59.4, 971.0], [59.5, 972.0], [59.6, 974.0], [59.7, 975.0], [59.8, 976.0], [59.9, 978.0], [60.0, 979.0], [60.1, 987.0], [60.2, 988.0], [60.3, 989.0], [60.4, 990.0], [60.5, 990.0], [60.6, 991.0], [60.7, 991.0], [60.8, 991.0], [60.9, 993.0], [61.0, 994.0], [61.1, 995.0], [61.2, 997.0], [61.3, 998.0], [61.4, 998.0], [61.5, 998.0], [61.6, 998.0], [61.7, 999.0], [61.8, 999.0], [61.9, 999.0], [62.0, 999.0], [62.1, 999.0], [62.2, 1000.0], [62.3, 1000.0], [62.4, 1000.0], [62.5, 1001.0], [62.6, 1001.0], [62.7, 1002.0], [62.8, 1002.0], [62.9, 1002.0], [63.0, 1003.0], [63.1, 1003.0], [63.2, 1004.0], [63.3, 1004.0], [63.4, 1004.0], [63.5, 1005.0], [63.6, 1005.0], [63.7, 1005.0], [63.8, 1006.0], [63.9, 1006.0], [64.0, 1006.0], [64.1, 1007.0], [64.2, 1007.0], [64.3, 1007.0], [64.4, 1008.0], [64.5, 1009.0], [64.6, 1010.0], [64.7, 1010.0], [64.8, 1011.0], [64.9, 1012.0], [65.0, 1012.0], [65.1, 1013.0], [65.2, 1013.0], [65.3, 1014.0], [65.4, 1014.0], [65.5, 1016.0], [65.6, 1017.0], [65.7, 1017.0], [65.8, 1018.0], [65.9, 1018.0], [66.0, 1019.0], [66.1, 1020.0], [66.2, 1020.0], [66.3, 1021.0], [66.4, 1023.0], [66.5, 1023.0], [66.6, 1024.0], [66.7, 1024.0], [66.8, 1026.0], [66.9, 1027.0], [67.0, 1027.0], [67.1, 1029.0], [67.2, 1031.0], [67.3, 1032.0], [67.4, 1034.0], [67.5, 1034.0], [67.6, 1037.0], [67.7, 1039.0], [67.8, 1040.0], [67.9, 1041.0], [68.0, 1043.0], [68.1, 1044.0], [68.2, 1045.0], [68.3, 1045.0], [68.4, 1045.0], [68.5, 1046.0], [68.6, 1046.0], [68.7, 1047.0], [68.8, 1048.0], [68.9, 1049.0], [69.0, 1050.0], [69.1, 1050.0], [69.2, 1051.0], [69.3, 1052.0], [69.4, 1052.0], [69.5, 1052.0], [69.6, 1053.0], [69.7, 1053.0], [69.8, 1053.0], [69.9, 1054.0], [70.0, 1054.0], [70.1, 1054.0], [70.2, 1055.0], [70.3, 1055.0], [70.4, 1056.0], [70.5, 1059.0], [70.6, 1059.0], [70.7, 1059.0], [70.8, 1059.0], [70.9, 1060.0], [71.0, 1062.0], [71.1, 1064.0], [71.2, 1064.0], [71.3, 1064.0], [71.4, 1065.0], [71.5, 1066.0], [71.6, 1068.0], [71.7, 1070.0], [71.8, 1071.0], [71.9, 1072.0], [72.0, 1073.0], [72.1, 1074.0], [72.2, 1075.0], [72.3, 1075.0], [72.4, 1076.0], [72.5, 1077.0], [72.6, 1077.0], [72.7, 1078.0], [72.8, 1079.0], [72.9, 1079.0], [73.0, 1080.0], [73.1, 1080.0], [73.2, 1081.0], [73.3, 1081.0], [73.4, 1082.0], [73.5, 1082.0], [73.6, 1082.0], [73.7, 1083.0], [73.8, 1084.0], [73.9, 1085.0], [74.0, 1086.0], [74.1, 1087.0], [74.2, 1088.0], [74.3, 1088.0], [74.4, 1089.0], [74.5, 1090.0], [74.6, 1091.0], [74.7, 1092.0], [74.8, 1092.0], [74.9, 1093.0], [75.0, 1094.0], [75.1, 1095.0], [75.2, 1096.0], [75.3, 1096.0], [75.4, 1096.0], [75.5, 1097.0], [75.6, 1097.0], [75.7, 1098.0], [75.8, 1098.0], [75.9, 1099.0], [76.0, 1099.0], [76.1, 1100.0], [76.2, 1100.0], [76.3, 1101.0], [76.4, 1101.0], [76.5, 1102.0], [76.6, 1102.0], [76.7, 1102.0], [76.8, 1103.0], [76.9, 1103.0], [77.0, 1104.0], [77.1, 1104.0], [77.2, 1104.0], [77.3, 1105.0], [77.4, 1105.0], [77.5, 1105.0], [77.6, 1106.0], [77.7, 1106.0], [77.8, 1106.0], [77.9, 1107.0], [78.0, 1108.0], [78.1, 1108.0], [78.2, 1109.0], [78.3, 1109.0], [78.4, 1109.0], [78.5, 1110.0], [78.6, 1111.0], [78.7, 1111.0], [78.8, 1112.0], [78.9, 1112.0], [79.0, 1113.0], [79.1, 1114.0], [79.2, 1115.0], [79.3, 1116.0], [79.4, 1117.0], [79.5, 1117.0], [79.6, 1118.0], [79.7, 1118.0], [79.8, 1119.0], [79.9, 1120.0], [80.0, 1121.0], [80.1, 1122.0], [80.2, 1122.0], [80.3, 1123.0], [80.4, 1123.0], [80.5, 1125.0], [80.6, 1125.0], [80.7, 1126.0], [80.8, 1127.0], [80.9, 1128.0], [81.0, 1129.0], [81.1, 1130.0], [81.2, 1132.0], [81.3, 1134.0], [81.4, 1135.0], [81.5, 1136.0], [81.6, 1137.0], [81.7, 1137.0], [81.8, 1138.0], [81.9, 1139.0], [82.0, 1139.0], [82.1, 1139.0], [82.2, 1140.0], [82.3, 1140.0], [82.4, 1141.0], [82.5, 1143.0], [82.6, 1145.0], [82.7, 1148.0], [82.8, 1152.0], [82.9, 1154.0], [83.0, 1156.0], [83.1, 1157.0], [83.2, 1158.0], [83.3, 1159.0], [83.4, 1160.0], [83.5, 1163.0], [83.6, 1165.0], [83.7, 1172.0], [83.8, 1176.0], [83.9, 1178.0], [84.0, 1179.0], [84.1, 1180.0], [84.2, 1182.0], [84.3, 1183.0], [84.4, 1184.0], [84.5, 1185.0], [84.6, 1186.0], [84.7, 1186.0], [84.8, 1188.0], [84.9, 1189.0], [85.0, 1191.0], [85.1, 1192.0], [85.2, 1193.0], [85.3, 1195.0], [85.4, 1197.0], [85.5, 1198.0], [85.6, 1200.0], [85.7, 1200.0], [85.8, 1200.0], [85.9, 1201.0], [86.0, 1202.0], [86.1, 1203.0], [86.2, 1204.0], [86.3, 1205.0], [86.4, 1206.0], [86.5, 1209.0], [86.6, 1212.0], [86.7, 1214.0], [86.8, 1217.0], [86.9, 1219.0], [87.0, 1222.0], [87.1, 1224.0], [87.2, 1228.0], [87.3, 1229.0], [87.4, 1232.0], [87.5, 1234.0], [87.6, 1235.0], [87.7, 1236.0], [87.8, 1237.0], [87.9, 1239.0], [88.0, 1241.0], [88.1, 1243.0], [88.2, 1245.0], [88.3, 1246.0], [88.4, 1248.0], [88.5, 1250.0], [88.6, 1252.0], [88.7, 1253.0], [88.8, 1255.0], [88.9, 1255.0], [89.0, 1256.0], [89.1, 1257.0], [89.2, 1259.0], [89.3, 1260.0], [89.4, 1264.0], [89.5, 1265.0], [89.6, 1266.0], [89.7, 1267.0], [89.8, 1268.0], [89.9, 1273.0], [90.0, 1274.0], [90.1, 1276.0], [90.2, 1277.0], [90.3, 1279.0], [90.4, 1283.0], [90.5, 1286.0], [90.6, 1288.0], [90.7, 1289.0], [90.8, 1295.0], [90.9, 1296.0], [91.0, 1298.0], [91.1, 1301.0], [91.2, 1304.0], [91.3, 1306.0], [91.4, 1309.0], [91.5, 1314.0], [91.6, 1319.0], [91.7, 1322.0], [91.8, 1324.0], [91.9, 1327.0], [92.0, 1328.0], [92.1, 1332.0], [92.2, 1334.0], [92.3, 1335.0], [92.4, 1337.0], [92.5, 1339.0], [92.6, 1345.0], [92.7, 1348.0], [92.8, 1353.0], [92.9, 1357.0], [93.0, 1364.0], [93.1, 1367.0], [93.2, 1372.0], [93.3, 1374.0], [93.4, 1375.0], [93.5, 1376.0], [93.6, 1377.0], [93.7, 1381.0], [93.8, 1382.0], [93.9, 1383.0], [94.0, 1385.0], [94.1, 1395.0], [94.2, 1409.0], [94.3, 1416.0], [94.4, 1419.0], [94.5, 1421.0], [94.6, 1423.0], [94.7, 1424.0], [94.8, 1425.0], [94.9, 1427.0], [95.0, 1430.0], [95.1, 1432.0], [95.2, 1435.0], [95.3, 1437.0], [95.4, 1439.0], [95.5, 1443.0], [95.6, 1446.0], [95.7, 1451.0], [95.8, 1455.0], [95.9, 1458.0], [96.0, 1464.0], [96.1, 1466.0], [96.2, 1469.0], [96.3, 1498.0], [96.4, 1499.0], [96.5, 1500.0], [96.6, 1501.0], [96.7, 1507.0], [96.8, 1523.0], [96.9, 1574.0], [97.0, 1576.0], [97.1, 1579.0], [97.2, 1582.0], [97.3, 1653.0], [97.4, 1668.0], [97.5, 1677.0], [97.6, 1713.0], [97.7, 1731.0], [97.8, 1742.0], [97.9, 1750.0], [98.0, 2087.0], [98.1, 2100.0], [98.2, 2115.0], [98.3, 2152.0], [98.4, 37111.0], [98.5, 37945.0], [98.6, 37954.0], [98.7, 37962.0], [98.8, 37970.0], [98.9, 37975.0], [99.0, 37977.0], [99.1, 38012.0], [99.2, 38020.0], [99.3, 38112.0], [99.4, 38230.0], [99.5, 38728.0], [99.6, 39179.0], [99.7, 39189.0], [99.8, 39195.0], [99.9, 39202.0], [100.0, 39209.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3166.0, "series": [{"data": [[0.0, 767.0], [600.0, 123.0], [700.0, 448.0], [800.0, 427.0], [900.0, 869.0], [1000.0, 2009.0], [1100.0, 1393.0], [1200.0, 796.0], [1300.0, 449.0], [1400.0, 327.0], [1500.0, 126.0], [100.0, 3166.0], [1600.0, 46.0], [1700.0, 50.0], [1800.0, 9.0], [1900.0, 1.0], [2000.0, 14.0], [2100.0, 34.0], [2200.0, 7.0], [2300.0, 3.0], [37100.0, 1.0], [37500.0, 1.0], [38000.0, 27.0], [37900.0, 100.0], [38200.0, 9.0], [38700.0, 9.0], [38100.0, 15.0], [39100.0, 53.0], [39200.0, 18.0], [200.0, 3020.0], [300.0, 157.0], [400.0, 53.0], [500.0, 10.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 39200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 232.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7161.0, "series": [{"data": [[0.0, 7161.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6871.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 273.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 232.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 172.47177711571027, "minX": 1.57676448E12, "maxY": 238.0169971671387, "series": [{"data": [[1.57676448E12, 172.47177711571027], [1.57676454E12, 238.0169971671387]], "isOverall": false, "label": "1. Save API", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676454E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11.4, "minX": 1.0, "maxY": 38474.596858638746, "series": [{"data": [[2.0, 11.4], [3.0, 13.333333333333334], [4.0, 15.933333333333334], [5.0, 19.705882352941174], [6.0, 24.35294117647059], [7.0, 23.941176470588236], [8.0, 30.88888888888889], [9.0, 32.9375], [10.0, 37.64705882352941], [11.0, 39.06250000000001], [12.0, 37.714285714285715], [13.0, 40.173913043478265], [14.0, 60.769230769230774], [15.0, 50.71428571428571], [16.0, 54.666666666666664], [17.0, 68.18181818181819], [18.0, 76.3125], [19.0, 63.22222222222222], [20.0, 58.0], [21.0, 66.26315789473685], [22.0, 70.80952380952381], [23.0, 73.44999999999997], [24.0, 70.8421052631579], [25.0, 72.54545454545456], [26.0, 76.36842105263159], [27.0, 89.82608695652175], [28.0, 77.73076923076924], [29.0, 76.71428571428572], [30.0, 90.57894736842105], [31.0, 86.11999999999999], [32.0, 96.68181818181817], [33.0, 101.47368421052632], [34.0, 118.0], [35.0, 105.85185185185186], [36.0, 95.71428571428572], [37.0, 101.61111111111111], [38.0, 100.83333333333331], [39.0, 112.3666666666667], [40.0, 115.69230769230768], [41.0, 110.34375], [42.0, 108.54545454545455], [43.0, 113.69565217391306], [44.0, 111.49999999999999], [45.0, 122.36363636363637], [46.0, 121.18181818181817], [47.0, 149.8], [48.0, 149.1428571428571], [49.0, 122.47619047619048], [50.0, 118.53571428571429], [51.0, 122.05263157894738], [52.0, 129.86111111111111], [53.0, 139.50000000000003], [54.0, 151.1176470588235], [55.0, 129.04878048780486], [56.0, 117.79166666666667], [57.0, 122.61764705882352], [58.0, 109.76], [59.0, 114.34210526315789], [60.0, 126.38461538461539], [61.0, 130.31578947368425], [62.0, 125.75999999999999], [63.0, 134.96969696969703], [64.0, 140.65517241379305], [65.0, 130.25454545454548], [66.0, 135.8679245283018], [67.0, 135.25000000000006], [68.0, 127.77272727272722], [69.0, 131.5757575757576], [70.0, 126.02325581395353], [71.0, 135.43999999999997], [72.0, 145.7719298245614], [73.0, 137.95454545454547], [74.0, 133.2972972972973], [75.0, 140.50000000000003], [76.0, 144.33333333333334], [77.0, 188.78378378378378], [78.0, 186.36666666666665], [79.0, 176.55555555555554], [80.0, 154.1315789473684], [81.0, 139.60000000000002], [82.0, 154.14634146341461], [83.0, 156.15384615384613], [84.0, 149.56250000000003], [85.0, 174.32432432432435], [86.0, 171.68852459016392], [87.0, 162.0357142857143], [88.0, 162.27272727272734], [89.0, 151.46153846153842], [90.0, 151.11538461538464], [91.0, 157.2], [92.0, 189.44000000000005], [93.0, 179.73809523809524], [94.0, 195.6818181818182], [95.0, 154.86486486486484], [96.0, 169.1590909090909], [97.0, 159.2380952380952], [98.0, 169.69047619047618], [99.0, 169.3448275862069], [100.0, 175.08888888888885], [101.0, 180.61764705882354], [102.0, 177.5434782608696], [103.0, 169.41818181818184], [104.0, 200.12], [105.0, 243.29166666666663], [106.0, 273.2727272727272], [107.0, 257.06451612903226], [108.0, 247.43750000000006], [109.0, 237.4], [110.0, 237.3076923076923], [111.0, 230.84615384615384], [112.0, 216.00000000000003], [113.0, 222.88000000000002], [114.0, 195.90697674418598], [115.0, 192.31914893617017], [116.0, 192.0886075949367], [117.0, 185.34210526315786], [118.0, 192.31666666666672], [119.0, 186.33898305084747], [120.0, 186.87179487179492], [121.0, 215.1923076923077], [122.0, 211.22807017543863], [123.0, 214.59523809523816], [124.0, 162.00000000000003], [125.0, 179.80000000000004], [126.0, 217.4375], [127.0, 214.0], [128.0, 206.1111111111111], [129.0, 191.47826086956525], [130.0, 186.25], [131.0, 193.87272727272722], [132.0, 232.34782608695653], [133.0, 198.17391304347825], [134.0, 213.73333333333338], [135.0, 212.9900000000001], [136.0, 207.95294117647057], [137.0, 203.70454545454544], [138.0, 201.06451612903223], [139.0, 208.32758620689657], [140.0, 215.48837209302317], [141.0, 197.36111111111111], [142.0, 219.6279069767442], [143.0, 207.24528301886795], [144.0, 227.27272727272728], [145.0, 210.8358208955224], [146.0, 209.38679245283026], [147.0, 222.81818181818184], [148.0, 213.94444444444443], [149.0, 238.23809523809527], [150.0, 214.86206896551727], [151.0, 206.82456140350874], [152.0, 226.26562499999994], [153.0, 221.24999999999997], [154.0, 228.0697674418605], [155.0, 239.38709677419354], [156.0, 262.09677419354836], [157.0, 263.625], [158.0, 228.68141592920367], [159.0, 227.7868852459016], [160.0, 223.00000000000003], [161.0, 258.6829268292683], [162.0, 248.025641025641], [163.0, 240.15151515151516], [164.0, 253.7377049180327], [165.0, 223.35294117647055], [166.0, 252.2413793103449], [167.0, 228.03389830508476], [168.0, 250.35], [169.0, 241.02127659574467], [170.0, 235.0163934426229], [171.0, 241.31404958677683], [172.0, 235.67857142857147], [173.0, 242.46511627906983], [174.0, 247.6060606060606], [175.0, 237.06249999999997], [176.0, 249.6741573033707], [177.0, 261.18811881188117], [178.0, 251.0714285714286], [179.0, 255.9555555555557], [180.0, 241.71428571428572], [181.0, 255.3548387096774], [182.0, 254.70454545454547], [183.0, 301.00000000000006], [184.0, 318.962962962963], [186.0, 406.63157894736855], [191.0, 614.5744680851062], [192.0, 637.1428571428571], [194.0, 758.0], [193.0, 758.2727272727273], [195.0, 816.6538461538462], [196.0, 775.4230769230768], [197.0, 784.4], [200.0, 718.6428571428571], [201.0, 718.1428571428571], [202.0, 793.5000000000001], [203.0, 906.375], [206.0, 890.8076923076923], [207.0, 809.15625], [205.0, 848.9473684210527], [204.0, 826.8275862068965], [208.0, 949.5000000000001], [212.0, 989.6500000000001], [213.0, 925.4230769230771], [216.0, 981.3333333333334], [217.0, 843.4545454545455], [219.0, 986.6483516483518], [220.0, 802.2105263157895], [222.0, 793.16], [225.0, 29761.59259259259], [224.0, 17749.727272727272], [229.0, 1050.2105263157891], [230.0, 10688.684210526317], [231.0, 38474.596858638746], [226.0, 102.0], [234.0, 1203.8102189781027], [233.0, 1272.441860465115], [238.0, 1270.7164179104477], [239.0, 813.047619047619], [237.0, 1067.8415841584165], [236.0, 1012.295918367348], [235.0, 1066.8815789473688], [232.0, 7598.844444444445], [243.0, 1180.4468085106378], [246.0, 1123.8], [247.0, 986.5309734513277], [245.0, 1049.9263157894738], [244.0, 1055.2166666666667], [242.0, 1109.3000000000002], [241.0, 1154.477272727273], [240.0, 1197.9846491228068], [248.0, 1257.698324022346], [249.0, 1275.470588235294], [250.0, 1176.2196078431375], [252.0, 783.0476190476189], [253.0, 1108.2857142857142], [254.0, 1260.219047619048], [255.0, 1078.8139534883724], [251.0, 780.6516853932583], [268.0, 1080.7767857142858], [256.0, 1065.5153846153853], [259.0, 1007.1875000000001], [258.0, 1090.9382716049379], [257.0, 899.1363636363635], [262.0, 1094.0651731160895], [261.0, 1341.9665551839466], [260.0, 1143.6126984126972], [263.0, 1145.394736842105], [264.0, 1099.1875], [267.0, 1001.7391304347823], [266.0, 921.6906474820147], [265.0, 1158.8081395348834], [269.0, 1062.418181818182], [270.0, 1104.8000000000004], [271.0, 1164.4593023255807], [273.0, 1109.1972789115641], [272.0, 1110.5519480519486], [1.0, 12.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}, {"data": [[182.02153126504834, 1247.481529889245]], "isOverall": false, "label": "Save API HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 273.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 17013.766666666666, "minX": 1.57676448E12, "maxY": 3486220.283333333, "series": [{"data": [[1.57676448E12, 59404.21666666667], [1.57676454E12, 17013.766666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57676448E12, 3486220.283333333], [1.57676454E12, 529431.6333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676454E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 575.892744987518, "minX": 1.57676448E12, "maxY": 5185.376298394715, "series": [{"data": [[1.57676448E12, 575.892744987518], [1.57676454E12, 5185.376298394715]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676454E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 575.8886383766815, "minX": 1.57676448E12, "maxY": 1015.2606232294622, "series": [{"data": [[1.57676448E12, 575.8886383766815], [1.57676454E12, 1015.2606232294622]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676454E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.04428697962798935, "minX": 1.57676448E12, "maxY": 27.944287063267222, "series": [{"data": [[1.57676448E12, 0.04428697962798935], [1.57676454E12, 27.944287063267222]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676454E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.57676448E12, "maxY": 38063.0, "series": [{"data": [[1.57676448E12, 1902.0], [1.57676454E12, 38063.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57676448E12, 5.0], [1.57676454E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57676448E12, 1229.0], [1.57676454E12, 1376.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57676448E12, 1579.7999999999993], [1.57676454E12, 2151.13]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57676448E12, 1344.0], [1.57676454E12, 1438.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676454E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 67.0, "maxY": 38019.5, "series": [{"data": [[531.0, 159.0], [551.0, 206.0], [617.0, 191.0], [642.0, 203.0], [669.0, 227.0], [680.0, 226.0], [689.0, 237.0], [67.0, 9.0], [100.0, 19.0], [106.0, 1139.0], [140.0, 1106.0], [150.0, 1019.0], [159.0, 1065.0], [154.0, 1376.5], [160.0, 1117.5], [164.0, 738.0], [198.0, 1105.0], [207.0, 1027.0], [202.0, 1135.5], [205.0, 1109.0], [213.0, 1036.0], [220.0, 1106.0], [223.0, 1103.0], [226.0, 944.0], [227.0, 1075.0], [225.0, 1078.0], [228.0, 1096.0], [230.0, 1053.0], [236.0, 1425.5], [237.0, 1005.0], [240.0, 1140.0], [247.0, 1248.0], [254.0, 794.0], [251.0, 1094.0], [255.0, 1053.0], [268.0, 412.5], [258.0, 1118.5], [257.0, 1117.0], [266.0, 1138.0], [263.0, 6.0], [277.0, 53.0], [323.0, 87.0], [330.0, 1051.0], [363.0, 116.0], [354.0, 989.0], [445.0, 128.0], [495.0, 141.0], [508.0, 171.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[263.0, 38019.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 689.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 67.0, "maxY": 1425.5, "series": [{"data": [[531.0, 159.0], [551.0, 206.0], [617.0, 191.0], [642.0, 203.0], [669.0, 227.0], [680.0, 226.0], [689.0, 237.0], [67.0, 9.0], [100.0, 19.0], [106.0, 1139.0], [140.0, 1106.0], [150.0, 1019.0], [159.0, 1065.0], [154.0, 1376.5], [160.0, 1117.5], [164.0, 738.0], [198.0, 1105.0], [207.0, 1027.0], [202.0, 1135.5], [205.0, 1109.0], [213.0, 1036.0], [220.0, 1106.0], [223.0, 1103.0], [226.0, 944.0], [227.0, 1075.0], [225.0, 1078.0], [228.0, 1096.0], [230.0, 1053.0], [236.0, 1425.5], [237.0, 1005.0], [240.0, 1140.0], [247.0, 1248.0], [254.0, 794.0], [251.0, 1094.0], [255.0, 1053.0], [268.0, 412.5], [258.0, 1118.5], [257.0, 1117.0], [266.0, 1138.0], [263.0, 6.0], [277.0, 53.0], [323.0, 87.0], [330.0, 1051.0], [363.0, 115.0], [354.0, 989.0], [445.0, 128.0], [495.0, 141.0], [508.0, 171.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[263.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 689.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.183333333333334, "minX": 1.57676448E12, "maxY": 211.1, "series": [{"data": [[1.57676448E12, 211.1], [1.57676454E12, 31.183333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676454E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.8666666666666667, "minX": 1.57676448E12, "maxY": 206.98333333333332, "series": [{"data": [[1.57676448E12, 206.98333333333332], [1.57676454E12, 31.433333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57676454E12, 3.8666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676454E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.8666666666666667, "minX": 1.57676448E12, "maxY": 206.98333333333332, "series": [{"data": [[1.57676454E12, 3.8666666666666667]], "isOverall": false, "label": "Save API HTTP Request-failure", "isController": false}, {"data": [[1.57676448E12, 206.98333333333332], [1.57676454E12, 31.433333333333334]], "isOverall": false, "label": "Save API HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676454E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.8666666666666667, "minX": 1.57676448E12, "maxY": 206.98333333333332, "series": [{"data": [[1.57676448E12, 206.98333333333332], [1.57676454E12, 31.433333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57676454E12, 3.8666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676454E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

