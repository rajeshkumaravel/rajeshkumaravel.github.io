/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 33196.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 2.0], [46.8, 2.0], [46.9, 2.0], [47.0, 3.0], [47.1, 3.0], [47.2, 4.0], [47.3, 4.0], [47.4, 5.0], [47.5, 5.0], [47.6, 5.0], [47.7, 6.0], [47.8, 6.0], [47.9, 7.0], [48.0, 8.0], [48.1, 8.0], [48.2, 9.0], [48.3, 9.0], [48.4, 10.0], [48.5, 10.0], [48.6, 11.0], [48.7, 11.0], [48.8, 12.0], [48.9, 13.0], [49.0, 13.0], [49.1, 14.0], [49.2, 15.0], [49.3, 15.0], [49.4, 16.0], [49.5, 17.0], [49.6, 18.0], [49.7, 19.0], [49.8, 20.0], [49.9, 21.0], [50.0, 23.0], [50.1, 24.0], [50.2, 25.0], [50.3, 26.0], [50.4, 28.0], [50.5, 29.0], [50.6, 31.0], [50.7, 32.0], [50.8, 33.0], [50.9, 35.0], [51.0, 36.0], [51.1, 38.0], [51.2, 39.0], [51.3, 41.0], [51.4, 43.0], [51.5, 45.0], [51.6, 47.0], [51.7, 50.0], [51.8, 52.0], [51.9, 54.0], [52.0, 57.0], [52.1, 59.0], [52.2, 61.0], [52.3, 62.0], [52.4, 64.0], [52.5, 65.0], [52.6, 66.0], [52.7, 67.0], [52.8, 68.0], [52.9, 69.0], [53.0, 70.0], [53.1, 71.0], [53.2, 71.0], [53.3, 72.0], [53.4, 73.0], [53.5, 73.0], [53.6, 74.0], [53.7, 74.0], [53.8, 75.0], [53.9, 75.0], [54.0, 76.0], [54.1, 76.0], [54.2, 77.0], [54.3, 77.0], [54.4, 78.0], [54.5, 78.0], [54.6, 79.0], [54.7, 79.0], [54.8, 79.0], [54.9, 80.0], [55.0, 80.0], [55.1, 81.0], [55.2, 81.0], [55.3, 82.0], [55.4, 82.0], [55.5, 82.0], [55.6, 83.0], [55.7, 83.0], [55.8, 83.0], [55.9, 83.0], [56.0, 84.0], [56.1, 84.0], [56.2, 84.0], [56.3, 84.0], [56.4, 85.0], [56.5, 85.0], [56.6, 85.0], [56.7, 86.0], [56.8, 86.0], [56.9, 86.0], [57.0, 86.0], [57.1, 87.0], [57.2, 87.0], [57.3, 87.0], [57.4, 87.0], [57.5, 88.0], [57.6, 88.0], [57.7, 88.0], [57.8, 88.0], [57.9, 89.0], [58.0, 89.0], [58.1, 89.0], [58.2, 90.0], [58.3, 90.0], [58.4, 90.0], [58.5, 90.0], [58.6, 91.0], [58.7, 91.0], [58.8, 91.0], [58.9, 91.0], [59.0, 92.0], [59.1, 92.0], [59.2, 92.0], [59.3, 93.0], [59.4, 93.0], [59.5, 93.0], [59.6, 93.0], [59.7, 94.0], [59.8, 94.0], [59.9, 94.0], [60.0, 94.0], [60.1, 95.0], [60.2, 95.0], [60.3, 95.0], [60.4, 95.0], [60.5, 95.0], [60.6, 96.0], [60.7, 96.0], [60.8, 96.0], [60.9, 96.0], [61.0, 96.0], [61.1, 97.0], [61.2, 97.0], [61.3, 97.0], [61.4, 97.0], [61.5, 97.0], [61.6, 98.0], [61.7, 98.0], [61.8, 98.0], [61.9, 98.0], [62.0, 98.0], [62.1, 98.0], [62.2, 99.0], [62.3, 99.0], [62.4, 99.0], [62.5, 100.0], [62.6, 100.0], [62.7, 100.0], [62.8, 100.0], [62.9, 100.0], [63.0, 101.0], [63.1, 101.0], [63.2, 101.0], [63.3, 102.0], [63.4, 102.0], [63.5, 102.0], [63.6, 102.0], [63.7, 103.0], [63.8, 103.0], [63.9, 103.0], [64.0, 104.0], [64.1, 104.0], [64.2, 104.0], [64.3, 104.0], [64.4, 105.0], [64.5, 105.0], [64.6, 105.0], [64.7, 105.0], [64.8, 105.0], [64.9, 106.0], [65.0, 106.0], [65.1, 106.0], [65.2, 107.0], [65.3, 107.0], [65.4, 107.0], [65.5, 108.0], [65.6, 108.0], [65.7, 108.0], [65.8, 108.0], [65.9, 109.0], [66.0, 109.0], [66.1, 109.0], [66.2, 110.0], [66.3, 110.0], [66.4, 110.0], [66.5, 111.0], [66.6, 111.0], [66.7, 111.0], [66.8, 112.0], [66.9, 112.0], [67.0, 112.0], [67.1, 113.0], [67.2, 113.0], [67.3, 113.0], [67.4, 114.0], [67.5, 114.0], [67.6, 114.0], [67.7, 115.0], [67.8, 115.0], [67.9, 116.0], [68.0, 116.0], [68.1, 116.0], [68.2, 117.0], [68.3, 117.0], [68.4, 117.0], [68.5, 118.0], [68.6, 118.0], [68.7, 119.0], [68.8, 119.0], [68.9, 120.0], [69.0, 120.0], [69.1, 121.0], [69.2, 121.0], [69.3, 122.0], [69.4, 122.0], [69.5, 123.0], [69.6, 123.0], [69.7, 124.0], [69.8, 124.0], [69.9, 125.0], [70.0, 126.0], [70.1, 126.0], [70.2, 127.0], [70.3, 128.0], [70.4, 128.0], [70.5, 129.0], [70.6, 130.0], [70.7, 131.0], [70.8, 132.0], [70.9, 133.0], [71.0, 134.0], [71.1, 134.0], [71.2, 136.0], [71.3, 137.0], [71.4, 139.0], [71.5, 140.0], [71.6, 142.0], [71.7, 144.0], [71.8, 145.0], [71.9, 147.0], [72.0, 149.0], [72.1, 152.0], [72.2, 154.0], [72.3, 156.0], [72.4, 158.0], [72.5, 162.0], [72.6, 168.0], [72.7, 176.0], [72.8, 194.0], [72.9, 217.0], [73.0, 227.0], [73.1, 255.0], [73.2, 265.0], [73.3, 273.0], [73.4, 279.0], [73.5, 284.0], [73.6, 287.0], [73.7, 292.0], [73.8, 301.0], [73.9, 307.0], [74.0, 314.0], [74.1, 317.0], [74.2, 323.0], [74.3, 335.0], [74.4, 343.0], [74.5, 347.0], [74.6, 353.0], [74.7, 360.0], [74.8, 367.0], [74.9, 372.0], [75.0, 380.0], [75.1, 388.0], [75.2, 392.0], [75.3, 399.0], [75.4, 407.0], [75.5, 415.0], [75.6, 422.0], [75.7, 429.0], [75.8, 439.0], [75.9, 446.0], [76.0, 455.0], [76.1, 461.0], [76.2, 470.0], [76.3, 475.0], [76.4, 479.0], [76.5, 485.0], [76.6, 491.0], [76.7, 493.0], [76.8, 498.0], [76.9, 505.0], [77.0, 510.0], [77.1, 518.0], [77.2, 522.0], [77.3, 532.0], [77.4, 539.0], [77.5, 542.0], [77.6, 547.0], [77.7, 550.0], [77.8, 551.0], [77.9, 559.0], [78.0, 568.0], [78.1, 571.0], [78.2, 579.0], [78.3, 588.0], [78.4, 595.0], [78.5, 606.0], [78.6, 620.0], [78.7, 630.0], [78.8, 635.0], [78.9, 644.0], [79.0, 649.0], [79.1, 652.0], [79.2, 662.0], [79.3, 671.0], [79.4, 674.0], [79.5, 680.0], [79.6, 687.0], [79.7, 689.0], [79.8, 691.0], [79.9, 694.0], [80.0, 699.0], [80.1, 707.0], [80.2, 717.0], [80.3, 720.0], [80.4, 723.0], [80.5, 727.0], [80.6, 730.0], [80.7, 741.0], [80.8, 746.0], [80.9, 764.0], [81.0, 768.0], [81.1, 771.0], [81.2, 778.0], [81.3, 782.0], [81.4, 785.0], [81.5, 791.0], [81.6, 796.0], [81.7, 800.0], [81.8, 820.0], [81.9, 837.0], [82.0, 839.0], [82.1, 854.0], [82.2, 856.0], [82.3, 857.0], [82.4, 860.0], [82.5, 869.0], [82.6, 873.0], [82.7, 884.0], [82.8, 903.0], [82.9, 921.0], [83.0, 928.0], [83.1, 938.0], [83.2, 942.0], [83.3, 968.0], [83.4, 989.0], [83.5, 995.0], [83.6, 1001.0], [83.7, 1003.0], [83.8, 1010.0], [83.9, 1013.0], [84.0, 1015.0], [84.1, 1018.0], [84.2, 1021.0], [84.3, 1023.0], [84.4, 1029.0], [84.5, 1035.0], [84.6, 1042.0], [84.7, 1046.0], [84.8, 1048.0], [84.9, 1052.0], [85.0, 1060.0], [85.1, 1061.0], [85.2, 1067.0], [85.3, 1071.0], [85.4, 1075.0], [85.5, 1084.0], [85.6, 1094.0], [85.7, 1103.0], [85.8, 1109.0], [85.9, 1117.0], [86.0, 1128.0], [86.1, 1132.0], [86.2, 1147.0], [86.3, 1152.0], [86.4, 1162.0], [86.5, 1168.0], [86.6, 1173.0], [86.7, 1176.0], [86.8, 1177.0], [86.9, 1183.0], [87.0, 1193.0], [87.1, 1204.0], [87.2, 1210.0], [87.3, 1217.0], [87.4, 1220.0], [87.5, 1229.0], [87.6, 1232.0], [87.7, 1235.0], [87.8, 1239.0], [87.9, 1242.0], [88.0, 1245.0], [88.1, 1246.0], [88.2, 1251.0], [88.3, 1254.0], [88.4, 1259.0], [88.5, 1261.0], [88.6, 1265.0], [88.7, 1268.0], [88.8, 1272.0], [88.9, 1278.0], [89.0, 1292.0], [89.1, 1306.0], [89.2, 1307.0], [89.3, 1308.0], [89.4, 1323.0], [89.5, 1341.0], [89.6, 1351.0], [89.7, 1355.0], [89.8, 1356.0], [89.9, 1359.0], [90.0, 1363.0], [90.1, 1369.0], [90.2, 1371.0], [90.3, 1374.0], [90.4, 1378.0], [90.5, 1378.0], [90.6, 1380.0], [90.7, 1387.0], [90.8, 1411.0], [90.9, 1432.0], [91.0, 1440.0], [91.1, 1443.0], [91.2, 1450.0], [91.3, 1457.0], [91.4, 1468.0], [91.5, 1491.0], [91.6, 1500.0], [91.7, 1509.0], [91.8, 1517.0], [91.9, 1521.0], [92.0, 1534.0], [92.1, 1536.0], [92.2, 1540.0], [92.3, 1544.0], [92.4, 1560.0], [92.5, 1568.0], [92.6, 1572.0], [92.7, 1587.0], [92.8, 1611.0], [92.9, 1631.0], [93.0, 1640.0], [93.1, 1650.0], [93.2, 1656.0], [93.3, 1665.0], [93.4, 1687.0], [93.5, 1691.0], [93.6, 1708.0], [93.7, 1719.0], [93.8, 1772.0], [93.9, 1811.0], [94.0, 1872.0], [94.1, 2003.0], [94.2, 2106.0], [94.3, 2260.0], [94.4, 2275.0], [94.5, 2277.0], [94.6, 2432.0], [94.7, 2648.0], [94.8, 3038.0], [94.9, 3062.0], [95.0, 3174.0], [95.1, 3206.0], [95.2, 3463.0], [95.3, 3550.0], [95.4, 3573.0], [95.5, 3905.0], [95.6, 4816.0], [95.7, 5632.0], [95.8, 5636.0], [95.9, 5639.0], [96.0, 5643.0], [96.1, 5659.0], [96.2, 5974.0], [96.3, 5998.0], [96.4, 6017.0], [96.5, 6083.0], [96.6, 6679.0], [96.7, 7000.0], [96.8, 7006.0], [96.9, 7008.0], [97.0, 7009.0], [97.1, 7014.0], [97.2, 8859.0], [97.3, 9047.0], [97.4, 9840.0], [97.5, 9884.0], [97.6, 10121.0], [97.7, 10525.0], [97.8, 10666.0], [97.9, 12122.0], [98.0, 13665.0], [98.1, 13682.0], [98.2, 13693.0], [98.3, 13702.0], [98.4, 13739.0], [98.5, 20460.0], [98.6, 23467.0], [98.7, 26469.0], [98.8, 29491.0], [98.9, 30730.0], [99.0, 30768.0], [99.1, 30826.0], [99.2, 31142.0], [99.3, 31651.0], [99.4, 31725.0], [99.5, 32382.0], [99.6, 32905.0], [99.7, 32953.0], [99.8, 32998.0], [99.9, 33057.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 21873.0, "series": [{"data": [[0.0, 21873.0], [100.0, 3615.0], [32900.0, 84.0], [200.0, 337.0], [300.0, 530.0], [400.0, 531.0], [500.0, 566.0], [600.0, 553.0], [700.0, 580.0], [800.0, 389.0], [900.0, 266.0], [1000.0, 736.0], [1100.0, 489.0], [1200.0, 691.0], [1300.0, 600.0], [1400.0, 297.0], [1500.0, 403.0], [1600.0, 289.0], [1700.0, 112.0], [1800.0, 50.0], [1900.0, 27.0], [2000.0, 29.0], [2100.0, 20.0], [2200.0, 118.0], [2300.0, 3.0], [2400.0, 16.0], [2500.0, 18.0], [2600.0, 17.0], [2700.0, 4.0], [2800.0, 1.0], [3000.0, 76.0], [3100.0, 44.0], [3200.0, 12.0], [3300.0, 13.0], [3400.0, 41.0], [3500.0, 53.0], [3600.0, 6.0], [3800.0, 16.0], [3900.0, 28.0], [4700.0, 4.0], [4800.0, 18.0], [5100.0, 2.0], [5200.0, 2.0], [5600.0, 177.0], [5800.0, 3.0], [5700.0, 1.0], [5900.0, 51.0], [6000.0, 76.0], [6100.0, 25.0], [6200.0, 1.0], [6600.0, 28.0], [6900.0, 7.0], [7000.0, 156.0], [7100.0, 9.0], [8500.0, 4.0], [8800.0, 10.0], [8900.0, 6.0], [9000.0, 31.0], [9700.0, 11.0], [9600.0, 1.0], [10100.0, 58.0], [9800.0, 63.0], [10600.0, 31.0], [10500.0, 29.0], [10400.0, 1.0], [10800.0, 1.0], [11200.0, 1.0], [11300.0, 2.0], [11600.0, 1.0], [11700.0, 2.0], [11900.0, 2.0], [12000.0, 2.0], [12100.0, 1.0], [12600.0, 18.0], [12700.0, 1.0], [12400.0, 1.0], [13100.0, 1.0], [13200.0, 1.0], [13700.0, 73.0], [13600.0, 97.0], [13500.0, 3.0], [13800.0, 3.0], [19400.0, 1.0], [19800.0, 1.0], [19600.0, 1.0], [20200.0, 2.0], [20400.0, 1.0], [21200.0, 1.0], [20600.0, 1.0], [20800.0, 2.0], [21000.0, 1.0], [21400.0, 2.0], [22000.0, 1.0], [22200.0, 1.0], [22400.0, 1.0], [21600.0, 1.0], [21800.0, 2.0], [22600.0, 2.0], [22800.0, 1.0], [23000.0, 1.0], [23200.0, 1.0], [23400.0, 1.0], [23600.0, 1.0], [23800.0, 2.0], [24000.0, 1.0], [24400.0, 2.0], [24200.0, 1.0], [24600.0, 1.0], [25000.0, 2.0], [24800.0, 1.0], [25200.0, 1.0], [25400.0, 1.0], [26000.0, 1.0], [26200.0, 2.0], [26600.0, 1.0], [25600.0, 2.0], [25800.0, 1.0], [26400.0, 1.0], [26800.0, 2.0], [27000.0, 1.0], [27200.0, 1.0], [27400.0, 2.0], [27600.0, 1.0], [27800.0, 1.0], [28000.0, 2.0], [28200.0, 1.0], [28400.0, 1.0], [28600.0, 1.0], [29400.0, 2.0], [29600.0, 1.0], [29200.0, 1.0], [28800.0, 1.0], [29000.0, 1.0], [29800.0, 1.0], [30400.0, 6.0], [30000.0, 2.0], [30200.0, 1.0], [31600.0, 14.0], [30800.0, 47.0], [31000.0, 1.0], [31400.0, 8.0], [31200.0, 1.0], [32600.0, 1.0], [32400.0, 3.0], [32000.0, 1.0], [32200.0, 1.0], [31800.0, 1.0], [32800.0, 13.0], [33100.0, 16.0], [19700.0, 1.0], [19500.0, 1.0], [19900.0, 2.0], [20300.0, 1.0], [20100.0, 1.0], [20700.0, 1.0], [20500.0, 1.0], [20900.0, 1.0], [21100.0, 1.0], [21500.0, 1.0], [21300.0, 1.0], [22300.0, 1.0], [22100.0, 2.0], [21900.0, 1.0], [22500.0, 1.0], [23300.0, 1.0], [23100.0, 2.0], [22700.0, 1.0], [22900.0, 1.0], [23500.0, 1.0], [23700.0, 1.0], [24100.0, 1.0], [24300.0, 1.0], [23900.0, 1.0], [24500.0, 1.0], [24700.0, 1.0], [24900.0, 1.0], [25100.0, 1.0], [25300.0, 1.0], [25500.0, 1.0], [25700.0, 1.0], [25900.0, 1.0], [26300.0, 1.0], [26500.0, 1.0], [26100.0, 1.0], [26900.0, 1.0], [27100.0, 1.0], [26700.0, 1.0], [27300.0, 1.0], [27500.0, 1.0], [27900.0, 1.0], [28100.0, 1.0], [27700.0, 1.0], [28300.0, 1.0], [28500.0, 1.0], [29500.0, 1.0], [29300.0, 1.0], [28700.0, 1.0], [28900.0, 2.0], [29100.0, 1.0], [30700.0, 66.0], [30500.0, 7.0], [29700.0, 1.0], [29900.0, 1.0], [30100.0, 1.0], [30300.0, 1.0], [31300.0, 14.0], [31700.0, 24.0], [31100.0, 11.0], [31500.0, 1.0], [30900.0, 1.0], [32300.0, 35.0], [32100.0, 1.0], [32700.0, 1.0], [31900.0, 1.0], [32500.0, 1.0], [33000.0, 49.0]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 33100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1325.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 20352.0, "series": [{"data": [[0.0, 8559.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4764.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1325.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 20352.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 17.05369127516778, "minX": 1.57676274E12, "maxY": 344.52442184520567, "series": [{"data": [[1.57676274E12, 138.20773387606184], [1.5767628E12, 344.52442184520567], [1.57676286E12, 17.05369127516778]], "isOverall": false, "label": "1. Save API", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676286E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 22731.703496503484, "series": [{"data": [[2.0, 708.3684210526316], [3.0, 586.8260869565217], [4.0, 610.6190476190476], [5.0, 12.736842105263161], [6.0, 18.41935483870968], [7.0, 387.9090909090909], [8.0, 889.4642857142858], [9.0, 801.5161290322579], [10.0, 29.96296296296296], [11.0, 487.46153846153845], [12.0, 870.8214285714284], [13.0, 47.2962962962963], [14.0, 854.1428571428571], [15.0, 497.9600000000001], [16.0, 54.42857142857142], [17.0, 436.1698113207546], [18.0, 247.77192982456137], [19.0, 66.20000000000002], [20.0, 688.5937499999999], [21.0, 442.7692307692307], [22.0, 265.8103448275862], [23.0, 604.235294117647], [24.0, 606.3125000000001], [25.0, 3066.375], [26.0, 1720.2083333333333], [27.0, 1290.1090909090908], [28.0, 909.21875], [29.0, 55.53333333333333], [30.0, 64.48214285714285], [31.0, 161.58823529411762], [32.0, 182.24242424242422], [33.0, 143.59574468085106], [34.0, 196.6129032258064], [35.0, 201.42424242424244], [36.0, 85.67567567567568], [37.0, 255.84615384615384], [38.0, 84.5121951219512], [39.0, 172.37254901960785], [40.0, 101.16239316239316], [41.0, 1072.9326923076924], [42.0, 61.51724137931032], [43.0, 119.18072289156626], [44.0, 88.6578947368421], [45.0, 119.46511627906975], [46.0, 69.55223880597015], [47.0, 211.31000000000003], [48.0, 99.97333333333333], [49.0, 127.3461538461538], [50.0, 122.30833333333334], [51.0, 85.77272727272727], [52.0, 150.74698795180726], [53.0, 102.59285714285714], [54.0, 157.2666666666667], [55.0, 124.7639751552795], [56.0, 122.25213675213676], [57.0, 123.33779264214046], [58.0, 118.34831460674158], [59.0, 121.59883720930239], [60.0, 169.48868778280544], [61.0, 148.72365339578448], [62.0, 124.47277227722783], [63.0, 119.02265372168262], [64.0, 129.17408906882585], [65.0, 174.79330708661413], [66.0, 556.5869565217392], [67.0, 579.783783783784], [68.0, 169.0], [69.0, 301.24242424242425], [70.0, 178.2191780821918], [71.0, 196.72972972972974], [72.0, 174.4230769230769], [73.0, 223.43478260869574], [74.0, 216.71428571428572], [75.0, 156.28000000000014], [76.0, 337.5609756097561], [77.0, 73.19230769230766], [78.0, 91.71666666666663], [79.0, 163.62790697674419], [80.0, 125.95402298850571], [81.0, 295.375], [82.0, 228.84375], [83.0, 166.58730158730157], [84.0, 396.1578947368421], [85.0, 78.20588235294117], [86.0, 359.16326530612247], [87.0, 185.00000000000003], [88.0, 292.13043478260875], [89.0, 213.83333333333334], [90.0, 224.34042553191492], [91.0, 137.84615384615387], [92.0, 20.3103448275862], [93.0, 408.9333333333332], [94.0, 288.6785714285714], [95.0, 385.64285714285717], [96.0, 243.96874999999997], [97.0, 258.64516129032256], [98.0, 337.0], [99.0, 306.0], [101.0, 141.1818181818182], [102.0, 405.047619047619], [103.0, 273.3603603603604], [100.0, 0.5], [104.0, 73.2906976744186], [105.0, 584.0], [106.0, 215.19999999999987], [107.0, 266.1827956989248], [108.0, 118.39534883720926], [110.0, 212.35294117647055], [111.0, 163.17307692307696], [109.0, 0.5070422535211268], [112.0, 315.7142857142857], [113.0, 222.95333333333357], [115.0, 276.97435897435884], [114.0, 0.3684210526315789], [117.0, 414.5652173913042], [118.0, 320.5454545454545], [119.0, 485.8955223880599], [116.0, 0.0], [120.0, 141.0897435897436], [122.0, 607.9200000000001], [123.0, 0.9480519480519479], [121.0, 1.7894736842105263], [124.0, 363.37499999999994], [125.0, 463.48979591836735], [126.0, 566.6571428571431], [127.0, 257.5538461538462], [128.0, 181.52631578947367], [129.0, 332.03896103896125], [131.0, 336.87037037037044], [130.0, 352.3600000000001], [133.0, 450.8695652173914], [134.0, 264.9090909090909], [135.0, 232.2118644067796], [132.0, 0.06250000000000001], [137.0, 511.2307692307694], [136.0, 452.0], [139.0, 121.53333333333332], [140.0, 292.74999999999994], [141.0, 446.23333333333346], [142.0, 244.16129032258067], [143.0, 0.13333333333333336], [138.0, 0.5689655172413792], [144.0, 518.578947368421], [146.0, 582.763157894737], [147.0, 629.6046511627908], [145.0, 530.9565217391303], [149.0, 201.2333333333333], [151.0, 486.4444444444444], [150.0, 256.00000000000006], [148.0, 0.4025974025974026], [152.0, 369.7142857142857], [156.0, 255.0731707317073], [159.0, 447.0862068965518], [158.0, 0.27083333333333337], [157.0, 0.33333333333333337], [155.0, 0.13333333333333336], [154.0, 1.0], [160.0, 505.4520547945206], [161.0, 578.3023255813954], [162.0, 210.66666666666666], [164.0, 158.4324324324324], [165.0, 277.28124999999983], [166.0, 84.62222222222223], [167.0, 591.9038461538462], [163.0, 0.6], [168.0, 575.3636363636365], [169.0, 54.13636363636366], [171.0, 289.2083333333333], [172.0, 139.63636363636365], [173.0, 121.11111111111113], [174.0, 267.52307692307704], [175.0, 4247.544850498341], [170.0, 3.3333333333333335], [176.0, 506.9268292682927], [180.0, 721.9374999999999], [182.0, 555.5833333333333], [183.0, 605.1478260869567], [181.0, 0.0], [179.0, 0.0], [178.0, 7.333333333333333], [177.0, 0.11111111111111113], [184.0, 652.2727272727271], [186.0, 436.1666666666667], [185.0, 625.1956521739131], [189.0, 663.6716417910447], [190.0, 691.7118644067797], [191.0, 1.6111111111111112], [188.0, 0.0], [187.0, 8.615384615384617], [193.0, 169.9], [194.0, 856.2539682539683], [195.0, 336.16666666666663], [196.0, 107.33333333333333], [197.0, 18.021739130434767], [199.0, 665.8791208791209], [198.0, 0.0], [192.0, 19.25], [200.0, 500.12499999999983], [204.0, 773.8617021276599], [205.0, 110.38888888888893], [207.0, 5.041666666666667], [206.0, 0.0], [203.0, 0.6666666666666666], [202.0, 0.0], [201.0, 0.17647058823529413], [209.0, 742.2371134020622], [211.0, 542.1], [212.0, 498.2325581395348], [213.0, 774.3333333333335], [215.0, 611.9999999999995], [214.0, 3.0], [210.0, 1.1940298507462688], [208.0, 2.785185185185185], [216.0, 380.55263157894746], [219.0, 801.4117647058823], [220.0, 838.9795918367346], [221.0, 436.9999999999999], [223.0, 2.8823529411764706], [222.0, 0.16000000000000003], [218.0, 6.099999999999999], [217.0, 0.0], [224.0, 769.9677419354837], [226.0, 1058.1020408163267], [228.0, 879.5], [230.0, 350.8199999999999], [231.0, 697.9125000000004], [229.0, 0.0], [227.0, 6.666666666666666], [225.0, 0.872340425531915], [232.0, 664.4920634920634], [236.0, 1085.5581395348838], [238.0, 1008.8421052631579], [237.0, 830.0], [239.0, 0.36363636363636365], [235.0, 0.75], [234.0, 0.22727272727272727], [233.0, 0.07692307692307691], [241.0, 916.2923076923079], [242.0, 561.6666666666665], [243.0, 1023.196078431373], [244.0, 451.7333333333332], [245.0, 685.0294117647057], [246.0, 916.1864406779661], [247.0, 3.1], [240.0, 1.0], [248.0, 815.6041666666665], [251.0, 600.5], [252.0, 804.9599999999999], [253.0, 553.0735294117648], [255.0, 0.631578947368421], [254.0, 1.1500000000000001], [250.0, 1.478260869565217], [249.0, 1.0], [259.0, 442.1261261261257], [256.0, 433.8181818181817], [257.0, 739.3793103448274], [258.0, 268.8865979381442], [260.0, 530.8571428571428], [261.0, 0.13333333333333336], [262.0, 3.1666666666666665], [264.0, 896.2413793103449], [270.0, 1179.075], [271.0, 935.1274509803919], [266.0, 805.6486486486485], [267.0, 0.09756097560975609], [265.0, 473.5454545454546], [268.0, 497.2307692307691], [269.0, 205.3714285714286], [284.0, 559.1666666666671], [272.0, 627.4431137724553], [275.0, 511.51612903225833], [274.0, 2.0], [273.0, 0.13333333333333336], [278.0, 244.55555555555566], [277.0, 2.2777777777777777], [276.0, 0.07142857142857142], [279.0, 0.4367816091954022], [280.0, 29.701754385964893], [281.0, 711.6666666666666], [282.0, 67.11428571428574], [283.0, 420.05319148936155], [285.0, 1162.9758064516127], [287.0, 1.957142857142857], [286.0, 2.094736842105263], [288.0, 616.4423076923077], [292.0, 641.6363636363639], [293.0, 91.26016260162596], [294.0, 509.0212765957447], [295.0, 1.3617021276595742], [296.0, 753.7], [303.0, 1.5217391304347825], [297.0, 993.2307692307693], [298.0, 47.813953488372114], [299.0, 1120.6904761904757], [300.0, 1178.5774647887326], [291.0, 0.10000000000000002], [290.0, 2.2], [289.0, 3.0810810810810807], [301.0, 0.20833333333333331], [302.0, 588.7341772151898], [317.0, 1389.4677419354837], [308.0, 512.2253521126755], [309.0, 5.351351351351352], [310.0, 487.6], [312.0, 996.7605633802817], [313.0, 858.0210526315791], [314.0, 1136.9122807017543], [315.0, 519.7272727272726], [311.0, 1340.9855072463765], [304.0, 6.84], [306.0, 0.511111111111111], [305.0, 2.600000000000001], [316.0, 247.13043478260866], [307.0, 2.170731707317073], [319.0, 1.125984251968505], [318.0, 0.4444444444444444], [334.0, 0.46153846153846156], [322.0, 512.3636363636361], [323.0, 522.5555555555557], [333.0, 0.3333333333333333], [332.0, 10.642857142857142], [325.0, 1247.380952380952], [324.0, 117.6326530612245], [326.0, 1335.6262626262624], [327.0, 1336.4666666666665], [321.0, 286.5999999999999], [320.0, 3.8181818181818183], [328.0, 1078.7804878048782], [329.0, 4079.5867346938785], [331.0, 5352.181818181818], [330.0, 5971.5], [335.0, 0.8771929824561406], [336.0, 1429.179104477612], [338.0, 653.7272727272726], [337.0, 1.4651162790697674], [339.0, 0.875], [348.0, 847.7272727272725], [349.0, 1343.1874999999998], [351.0, 50.787878787878796], [350.0, 1.875], [340.0, 451.05882352941177], [341.0, 42.597560975609774], [342.0, 329.42682926829247], [343.0, 1160.5], [344.0, 1435.9009900990097], [345.0, 1027.4556962025313], [346.0, 806.6800000000002], [347.0, 0.6875], [365.0, 611.3333333333334], [353.0, 427.8666666666665], [352.0, 6.25925925925926], [354.0, 194.18446601941747], [364.0, 121.82758620689656], [355.0, 24.211538461538463], [356.0, 608.9423076923077], [358.0, 54.21739130434782], [357.0, 206.0], [359.0, 1462.125], [360.0, 813.5217391304349], [361.0, 781.331168831169], [362.0, 628.6025641025637], [363.0, 101.936170212766], [367.0, 109.24581005586596], [366.0, 232.8], [381.0, 887.2656249999999], [371.0, 280.34883720930236], [375.0, 72.82926829268298], [368.0, 488.6041666666671], [370.0, 0.35064935064935077], [369.0, 494.7290640394089], [374.0, 0.0], [373.0, 22.312500000000004], [372.0, 33.27397260273973], [376.0, 917.7142857142858], [377.0, 304.0535714285714], [378.0, 925.2549019607843], [379.0, 1066.3432835820888], [380.0, 643.5948275862064], [383.0, 2.6708860759493684], [382.0, 0.33333333333333337], [399.0, 757.1698113207551], [387.0, 1100.9999999999995], [388.0, 217.46694214876032], [389.0, 0.5238095238095238], [391.0, 0.6875], [384.0, 1.4920634920634919], [386.0, 3.1615384615384614], [385.0, 1.3076923076923077], [390.0, 2.824175824175824], [395.0, 235.2364864864865], [396.0, 651.3500000000005], [398.0, 1291.0909090909095], [397.0, 912.653846153846], [394.0, 0.41666666666666663], [393.0, 6.0984848484848495], [392.0, 3.5584415584415585], [402.0, 1557.6800000000003], [406.0, 1912.402234636872], [405.0, 1399.4017857142858], [404.0, 987.9249999999998], [407.0, 5133.959550561806], [401.0, 665.6293706293702], [400.0, 1129.1714285714286], [415.0, 4.130434782608696], [409.0, 3236.9578059071755], [408.0, 4627.913043478263], [411.0, 0.0], [410.0, 2.5217391304347827], [414.0, 0.4444444444444444], [413.0, 1.0], [412.0, 2.4074074074074083], [403.0, 2588.8571428571427], [430.0, 3.2941176470588234], [431.0, 2.9166666666666665], [429.0, 2.35], [428.0, 9.0], [427.0, 4.666666666666665], [426.0, 0.0], [425.0, 11.810810810810812], [424.0, 8.217391304347828], [423.0, 4.571428571428571], [417.0, 0.8333333333333333], [416.0, 1.5384615384615383], [419.0, 3.095238095238095], [418.0, 0.0], [422.0, 8.0], [421.0, 5.333333333333333], [420.0, 3.407407407407408], [446.0, 14.277777777777779], [447.0, 8.714285714285714], [445.0, 2.0], [444.0, 0.3333333333333333], [443.0, 0.20000000000000004], [442.0, 0.09999999999999999], [441.0, 2.9090909090909096], [440.0, 0.0], [439.0, 0.7567567567567569], [433.0, 3.5555555555555562], [432.0, 15.333333333333336], [435.0, 0.0], [434.0, 21.466666666666665], [438.0, 7.411764705882352], [437.0, 13.857142857142856], [436.0, 21.608695652173914], [462.0, 4.5], [463.0, 0.23529411764705882], [461.0, 0.16666666666666669], [460.0, 11.637931034482756], [459.0, 0.0], [458.0, 0.0], [457.0, 8.937500000000002], [456.0, 6.764705882352943], [455.0, 8.0], [449.0, 2.826086956521739], [448.0, 7.000000000000001], [451.0, 3.384615384615384], [450.0, 9.588235294117647], [454.0, 1.6666666666666667], [453.0, 0.0], [452.0, 10.705882352941176], [477.0, 28.0], [479.0, 2.750000000000001], [476.0, 0.10714285714285715], [467.0, 0.0], [466.0, 0.08333333333333331], [465.0, 0.18749999999999997], [464.0, 0.2307692307692308], [475.0, 0.20000000000000004], [474.0, 0.761904761904762], [473.0, 0.6500000000000001], [472.0, 16.23529411764706], [471.0, 0.0], [470.0, 3.461538461538462], [469.0, 1.2666666666666666], [468.0, 5.173913043478261], [494.0, 14.917197452229297], [495.0, 0.7391304347826089], [493.0, 0.0], [492.0, 0.15000000000000002], [491.0, 0.16666666666666669], [490.0, 23.956521739130434], [489.0, 21.65909090909091], [488.0, 45.10880829015544], [487.0, 1.070588235294118], [481.0, 3.3684210526315788], [480.0, 1.9859154929577454], [483.0, 1.5925925925925923], [482.0, 4.823529411764706], [486.0, 0.0], [485.0, 4.714285714285714], [484.0, 4.277777777777778], [510.0, 6.215568862275447], [511.0, 1.0516129032258066], [509.0, 0.6666666666666664], [508.0, 0.0], [507.0, 5.7165354330708675], [506.0, 47.5], [505.0, 4.3410852713178265], [504.0, 0.8321917808219176], [503.0, 0.3076923076923076], [497.0, 1.4038461538461533], [496.0, 6.068181818181818], [499.0, 0.13953488372093026], [498.0, 3.8095238095238093], [502.0, 0.09999999999999999], [501.0, 0.4642857142857143], [500.0, 5.574074074074075], [528.0, 3.4913294797687864], [532.0, 1.2771084337349399], [536.0, 22731.703496503484], [519.0, 0.5438596491228068], [518.0, 0.163265306122449], [517.0, 2.767441860465116], [516.0, 0.25000000000000006], [515.0, 1.512820512820513], [514.0, 0.580246913580247], [513.0, 0.0], [512.0, 3.0624999999999996], [527.0, 0.22857142857142856], [526.0, 0.66875], [525.0, 0.4324324324324325], [524.0, 0.0], [523.0, 0.4642857142857143], [522.0, 0.8387096774193549], [521.0, 0.7142857142857142], [520.0, 1.3714285714285717], [535.0, 12.294117647058826], [534.0, 0.13333333333333336], [533.0, 9.789473684210526], [531.0, 6.8173913043478285], [530.0, 1.111111111111111], [529.0, 5.428571428571429], [1.0, 1550.1111111111113]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}, {"data": [[257.74171428571174, 980.8198285714268]], "isOverall": false, "label": "Save API HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 536.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5790.333333333333, "minX": 1.57676274E12, "maxY": 3999931.783333333, "series": [{"data": [[1.57676274E12, 67920.23333333334], [1.5767628E12, 898631.3833333333], [1.57676286E12, 5790.333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57676274E12, 3999931.783333333], [1.5767628E12, 63161.25], [1.57676286E12, 48844.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676286E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 547.7464383465513, "minX": 1.57676274E12, "maxY": 2320.802013422819, "series": [{"data": [[1.57676274E12, 547.7464383465513], [1.5767628E12, 1263.005720432216], [1.57676286E12, 2320.802013422819]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676286E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 37.904757248325154, "minX": 1.57676274E12, "maxY": 855.1510067114094, "series": [{"data": [[1.57676274E12, 547.7427889676464], [1.5767628E12, 37.904757248325154], [1.57676286E12, 855.1510067114094]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676286E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.04351182539125553, "minX": 1.57676274E12, "maxY": 332.76510067114117, "series": [{"data": [[1.57676274E12, 0.04351182539125553], [1.5767628E12, 69.49733535422659], [1.57676286E12, 332.76510067114117]], "isOverall": false, "label": "Save API HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676286E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.57676274E12, "maxY": 13817.0, "series": [{"data": [[1.57676274E12, 2743.0], [1.5767628E12, 5226.0], [1.57676286E12, 13817.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57676274E12, 7.0], [1.5767628E12, 95.0], [1.57676286E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57676274E12, 1381.0], [1.5767628E12, 4799.2], [1.57676286E12, 10591.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57676274E12, 2263.0], [1.5767628E12, 5204.64], [1.57676286E12, 13397.75]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57676274E12, 1586.0], [1.5767628E12, 4824.2], [1.57676286E12, 11941.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676286E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 28223.0, "series": [{"data": [[590.0, 107.0], [600.0, 106.0], [628.0, 101.0], [635.0, 98.0], [632.0, 93.0], [611.0, 92.0], [4.0, 5196.0], [7.0, 15.0], [14.0, 7.0], [18.0, 10.5], [4967.0, 98.0], [19.0, 14.0], [22.0, 4813.5], [30.0, 3036.5], [35.0, 2258.0], [38.0, 13.0], [56.0, 1462.0], [64.0, 2106.0], [78.0, 11.0], [82.0, 1640.0], [95.0, 1219.0], [122.0, 2277.0], [125.0, 21.0], [159.0, 3559.0], [162.0, 547.0], [174.0, 694.0], [173.0, 1011.0], [178.0, 1055.5], [190.0, 723.0], [197.0, 352.0], [199.0, 624.0], [206.0, 747.5], [214.0, 350.5], [215.0, 793.5], [220.0, 277.0], [217.0, 416.0], [222.0, 472.0], [223.0, 1049.0], [233.0, 559.0], [247.0, 870.0], [244.0, 1021.0], [253.0, 604.0], [252.0, 1254.5], [263.0, 50.0], [268.0, 1278.0], [265.0, 1232.0], [264.0, 1355.0], [288.0, 76.0], [292.0, 742.5], [294.0, 1442.0], [312.0, 1521.0], [315.0, 1669.0], [329.0, 97.0], [425.0, 94.0], [476.0, 98.0], [471.0, 109.0], [479.0, 117.0], [490.0, 120.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2106.0, 0.0], [159.0, 1.0], [39.0, 6687.0], [2888.0, 0.0], [3.0, 1048.0], [3257.0, 0.0], [868.0, 28223.0], [57.0, 9.0], [3866.0, 0.0], [4967.0, 0.0], [1338.0, 0.0], [386.0, 0.0], [400.0, 3.5], [28.0, 1010.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4967.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 5196.0, "series": [{"data": [[590.0, 107.0], [600.0, 106.0], [628.0, 101.0], [635.0, 98.0], [632.0, 93.0], [611.0, 92.0], [4.0, 5196.0], [7.0, 15.0], [14.0, 7.0], [18.0, 10.5], [4967.0, 98.0], [19.0, 14.0], [22.0, 4813.5], [30.0, 3036.5], [35.0, 2258.0], [38.0, 13.0], [56.0, 1462.0], [64.0, 2106.0], [78.0, 11.0], [82.0, 1640.0], [95.0, 1219.0], [122.0, 2277.0], [125.0, 21.0], [159.0, 3559.0], [162.0, 547.0], [174.0, 694.0], [173.0, 1011.0], [178.0, 1055.5], [190.0, 723.0], [197.0, 352.0], [199.0, 624.0], [206.0, 747.5], [214.0, 350.5], [215.0, 793.5], [220.0, 277.0], [217.0, 416.0], [222.0, 472.0], [223.0, 1049.0], [233.0, 559.0], [247.0, 870.0], [244.0, 1021.0], [253.0, 604.0], [252.0, 1254.5], [263.0, 50.0], [268.0, 1278.0], [265.0, 1232.0], [264.0, 1355.0], [288.0, 76.0], [292.0, 742.5], [294.0, 1442.0], [312.0, 1521.0], [315.0, 1669.0], [329.0, 97.0], [425.0, 94.0], [476.0, 98.0], [471.0, 109.0], [479.0, 117.0], [490.0, 120.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2106.0, 0.0], [159.0, 0.0], [39.0, 0.0], [2888.0, 0.0], [3.0, 0.0], [3257.0, 0.0], [868.0, 0.0], [57.0, 0.0], [3866.0, 0.0], [4967.0, 0.0], [1338.0, 0.0], [386.0, 0.0], [400.0, 0.0], [28.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4967.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.5, "minX": 1.57676274E12, "maxY": 332.68333333333334, "series": [{"data": [[1.57676274E12, 246.15], [1.5767628E12, 332.68333333333334], [1.57676286E12, 4.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676286E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.57676274E12, "maxY": 306.1666666666667, "series": [{"data": [[1.57676274E12, 237.48333333333332], [1.5767628E12, 3.75], [1.57676286E12, 2.9]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5767628E12, 306.1666666666667], [1.57676286E12, 0.8666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.5767628E12, 25.966666666666665], [1.57676286E12, 0.8833333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.5767628E12, 5.0], [1.57676286E12, 0.31666666666666665]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57676286E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.066666666666667, "minX": 1.57676274E12, "maxY": 337.1333333333333, "series": [{"data": [[1.5767628E12, 337.1333333333333], [1.57676286E12, 2.066666666666667]], "isOverall": false, "label": "Save API HTTP Request-failure", "isController": false}, {"data": [[1.57676274E12, 237.48333333333332], [1.5767628E12, 3.75], [1.57676286E12, 2.9]], "isOverall": false, "label": "Save API HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676286E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.066666666666667, "minX": 1.57676274E12, "maxY": 337.1333333333333, "series": [{"data": [[1.57676274E12, 237.48333333333332], [1.5767628E12, 3.75], [1.57676286E12, 2.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5767628E12, 337.1333333333333], [1.57676286E12, 2.066666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57676286E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

